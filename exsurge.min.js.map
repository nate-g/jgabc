{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///exsurge.min.js","webpack:///webpack/bootstrap c3ef232c639e4aaf0bbf","webpack:///./src/index.js","webpack:///./src/Exsurge.Core.js","webpack:///./src/Exsurge.Text.js","webpack:///./src/Exsurge.Glyphs.js","webpack:///./src/Exsurge.Drawing.js","webpack:///./src/Exsurge.Chant.js","webpack:///./src/Exsurge.Chant.ChantLine.js","webpack:///./src/Exsurge.Chant.Neumes.js","webpack:///./src/Exsurge.Chant.Signs.js","webpack:///./src/Exsurge.Chant.Markings.js","webpack:///./src/Exsurge.Gabc.js","webpack:///./src/Exsurge.Titles.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_ExsurgeCore","keys","forEach","key","enumerable","get","_ExsurgeText","_ExsurgeGlyphs","_ExsurgeDrawing","_ExsurgeChant","_ExsurgeChantChantLine","_ExsurgeChantMarkings","_ExsurgeChantSigns","_ExsurgeChantNeumes","_ExsurgeGabc","_ExsurgeTitles","_classCallCheck","instance","Constructor","TypeError","DeviceIndependent","n","Centimeters","Units","ToDeviceIndependent","Millimeters","Inches","ToCentimeters","FromDeviceIndependent","ToMillimeters","ToInches","generateRandomGuid","s4","Math","floor","random","toString","substring","getCssForProperties","properties","map","join","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","prototype","DeviceIndepenedent","DIU_PER_INCH","DIU_PER_CENTIMETER","inputUnits","outputUnits","StringToUnitsType","s","ToLower","UnitsTypeToString","units","Point","x","y","point","Step","Rect","width","height","Infinity","rect","other","right","max","bottom","min","Margins","left","top","margins","Size","size","Do","Du","Re","Me","Mi","Fa","Fu","So","La","Te","Ti","__StepToStaffPosition","__StaffOffsetToStep","Pitch","step","octave","toInt","pitch","offset","_interopRequireWildcard","obj","__esModule","newObj","hasOwnProperty","default","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","language","Spanish","Latin","English","Language","undefined","name","centerNeume","text","parsedWords","words","split","end","push","syllabifyWord","_Language","_this","getPrototypeOf","startIndex","regexLetter","match","exec","slice","found","index","_Language2","_this2","diphthongs","possibleDiphthongs","concat","regexVowel","wordExceptions","vowels","vowelsThatMightBeConsonants","muteConsonantsAndF","liquidConsonants","isVowelThatMightBeConsonant","isVowel","word","lookahead","haveLookahead","syllables","haveCompleteSyllable","previousWasVowel","workingString","toLowerCase","startSyllable","makeSyllable","substr","wordLength","cIsVowel","isDiphthong","isMuteConsonantOrF","isLiquidConsonant","_Language3","_this3","weakVowels","strongVowels","uDiphthongExceptions","previousIsVowel","previousIsStrongVowel","cIsStrongVowel","isStrongVowel","createSyllable","consonant2","numberOfConsonants","j","d","indexOf","tripthong","endj","findVowelSegment","english","latin","spanish","Glyphs","None","paths","type","data","bounds","origin","align","AcuteAccent","GraveAccent","Circle","Semicircle","ReversedSemicircle","Stropha","BeginningAscLiquescent","BeginningDesLiquescent","CustosDescLong","CustosDescShort","CustosLong","CustosShort","DoClef","FaClef","Flat","Mora","Natural","Sharp","OriscusAsc","OriscusDes","OriscusLiquescent","PodatusLower","PodatusUpper","Porrectus1","Porrectus2","Porrectus3","Porrectus4","PunctumCavum","PunctumQuadratum","PunctumQuadratumLiquescent","PunctumQuadratumAscLiquescent","PunctumQuadratumDesLiquescent","PunctumInclinatum","PunctumInclinatumLiquescent","Quilisma","TerminatingAscLiquescent","TerminatingDesLiquescent","VerticalEpisemaAbove","VerticalEpisemaBelow","VirgaLong","VirgaShort","Virgula","_toConsumableArray","arr","Array","isArray","arr2","from","getFontFilenameForProperties","arguments","url","italic","bold","replace","MarkupStackFrame","tagName","ChantNotationElement","Annotations","Annotation","TextLeftRight","Subtitle","Title","Supertitle","TitleTextElement","DropCap","TranslationText","AboveLinesText","ChoralSign","Lyric","LyricArray","LyricType","TextElement","TextSpan","CurlyBraceVisualizer","RoundBraceVisualizer","GlyphVisualizer","VirgaLineVisualizer","NeumeLineVisualizer","DividerLineVisualizer","ChantLayoutElement","ChantContext","TextMeasuringStrategy","QuickSvg","GlyphCode","DefaultTrailingSpace","TextTypesByClass","TextTypes","MarkingPositionHint","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","canAccessDOM","document","__getNeumeFromSvgElem","score","elem","note","notes","parentElement","querySelector","getAttribute","neume","Default","Above","Below","supertitle","display","defaultSize","containedInScore","titles","hasSupertitle","getFromScore","title","hasTitle","subtitle","hasSubtitle","leftRight","cssClass","hasTextLeft","hasTextRight","extraClass","getFromSvgElem","classList","contains","annotation","mergeAnnotationWithTextLeft","dropCap","_ref","_ref$elementIndex","elementIndex","annotations","al","hasAboveLinesText","notations","notation","notationIndex","alText","alIndex","choralSign","ctxt","staffInterval","lyric","hasLyrics","lyrics","lyricIndex","translation","hasTranslations","translationText","translationIndex","entries","_ref2","_ref3","entry","intraNeumeSpacing","interSyllabicMultiplier","isDefault","StrophaLiquescent","UpperBrace","ns","xmlns","xlink","hasDOMAccess","svg","node","createElementNS","setAttribute","setAttributeNS","defs","appendChild","clearNotations","removeChild","hasChildNodes","lastChild","line","x1","y1","x2","y2","g","tspan","str","textContent","use","nodeRef","svgFragmentForGlyph","glyph","svgSrc","path","createFragment","fill","nodesForGlyph","functionName","nodes","createNode","attributes","children","source","attr","val","createSvgTree","_len","_key","className","class","convertKeysToCamelCase","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","test","camelCase","whole","letter","toUpperCase","return","style","sourceGabc","child","fragment","parseFragment","well","createElement","container","innerHTML","il","firstChild","childNodes","translate","scale","sx","sy","Svg","Canvas","OpenTypeJS","textMeasuringStrategy","makeDefs","defsNode","textStyles","textColor","setFont","rubricColor","specialCharProperties","font-family","textBeforeSpecialChar","textAfterSpecialChar","specialCharText","char","fontStyleDictionary","b","font-weight","font-style","u","text-decoration","ul","sc","font-variant","font-variant-caps","font-feature-settings","-webkit-font-feature-settings","markupSymbolDictionary","*","_","^","%","prefix","padding","minLedgerSeparation","minSpaceAboveStaff","minSpaceBelowStaff","spaceBetweenSystems","glyphPunctumWidth","glyphPunctumHeight","maxExtraSpaceInStaffIntervals","activeClef","neumeLineColor","staffLineColor","dividerLineColor","defaultLanguage","pixelRatio","window","devicePixelRatio","svgTextMeasurer","body","insertBefore","makeCanvasIfNeeded","syllableConnector","scaleDefs","setGlyphScaling","accidentalSpaceMultiplier","interVerbalMultiplier","drawGuides","drawDebuggingBounds","activeNotations","currNotationIndex","condensingTolerance","autoColor","useExtraTextOnly","insertFontsInDoc","fontFamily","keyWithFontFamily","fontDictionary","Regular","font","baseStyle","opentypeFontDictionary","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_step2$value","textType","textStyle","color","baseTextStyle","glyphScaling","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","_textStyles$key","createStyleCss","hyphen","SingleSyllable","multiplier","minLyricWordSpacing","hyphenWidth","staffHeight","staffLineWeight","ceil","neumeLineWeight","dividerLineWeight","episemaLineWeight","updateHyphenWidth","staffPosition","styleElement","getElementById","head","isNeume","hasNoWidth","canvas","canvasCtxt","getContext","setTransform","selected","highlighted","_ChantLayoutElement","staffPosition0","staffPosition1","divider","y0","calculateHeightFromStaffPosition","temp","fillStyle","fillRect","sourceIndex","getSvgProps","_ChantLayoutElement2","note0","note1","hanging","abs","_ChantLayoutElement3","_ChantLayoutElement4","glyphCode","_this4","setGlyph","_this5","getDefProps","options","transform","makeDef","makeSvgTree","apply","Path2D","noteIndex","nextNote","isSelected","model","result","xlink:href","getSvgAttributes","_ChantLayoutElement5","isAbove","_this6","braceHeight","generatePathString","stroke","stroke-width","getSvgPathProps","accent","createSvgNode","createSvgFragment","dx","dy","cx1","cy","cx2","dp","toFixed","_ChantLayoutElement6","addAcuteAccent","_this7","union","h","q","qy1","qx2","qy2","tx1","ty1","qy3","qx4","qy4","activeTags","createStackFrame","__subsForTspans","&","<",">","_ChantLayoutElement7","fontSize","textAnchor","_this8","dominantBaseline","generateSpansFromText","recalculateMetrics","_this9","spans","markupStack","spanStartIndex","newLineInNextSpan","filterFrames","frame","symbol","closeSpan","spanText","extraProperties","assign","newLine","markupRegex","openedAsterisk","closeCurrentSpan","_match","_match2","specialChar","specialChar2","markupSymbol","closingTag","enclosedText","pop","filter","findIndex","splice","parseFloat","resize","measureSubstring","returnBBox","lines","widths","newLineSpans","subStringLength","numLines","bbox","span","myText","parseInt","rightAligned","xOffset","firstLineMaxWidth","getCanvasFontForProperties","metrics","measureText","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxDescent","getFontForProperties","features","liga","smcp","spanFontSize","subBbox","getPath","getBoundingBox","subWidth","getAdvanceWidth","resetNewLines","maxWidth","createStyleNode","getBBox","measureSubstringBBox","reduce","percentage","lastWidth","lastMatch","regex","_spans","spanIndex","splitSpan","textLeft","textRight","newSpans","needsLayout","textAlign","translateWidth","translateHeight","count","getExtraStyleProperties","fillText","textLength","source-index","getCssClasses","trim","text-anchor","useStyleObject","lengthAdjust","getSpanOptions","svgNode","escapeForTspan","setFontFamilyAttributes","string","String","BeginningSyllable","MiddleSyllable","EndingSyllable","Directive","getLeft","lyricArray","NaN","Number","MAX_VALUE","getRight","presumeConnectorNeeded","MIN_VALUE","l","allowsConnector","needsConnector","getConnectorWidth","hasOnlyOneLyric","originalText","indexOfLyric","mergeIn","newLyrics","mergeInArray","setNotation","_TextElement","lyricType","_this10","centerStartIndex","centerLength","connectorSpan","force","forceConnector","needs","setConnectorWidth","widthWithoutConnector","connectorWidth","defaultConnectorWidth","setNeedsConnector","activeLanguage","vowelSegmentWidth","getSubStringLength","lastIndexOf","dropCapSpan","clone","dropCapLowerCase","dropCapSourceGabcLength","classes","_TextElement2","_this11","positionHint","_TextElement3","_this12","_TextElement4","gabcSource","anchor","_this13","_TextElement5","_this14","_TextElement6","_TitleTextElement","_this16","_TitleTextElement2","_this17","_TitleTextElement3","_this18","_TitleTextElement4","_this19","headerKey","_TextElement7","_this20","_ChantLayoutElement8","_this21","_len2","texts","_key2","updateBounds","draw","_ChantLayoutElement9","_this22","leadingSpace","trailingSpace","keepWithNext","visualizers","chantLayoutElement","ignoreBounds","isEmpty","unshift","calculatedTrailingSpace","_this23","calculateLyricX","inner","getInnerSvgNodes","svgProps","ChantDocument","ChantScore","ChantMapping","ChantLineBreak","TextOnly","Clef","Note","NoteShapeModifiers","NoteShape","LiquescentType","Large","Small","Ascending","Descending","InitioDebilis","LargeAscending","LargeDescending","SmallAscending","SmallDescending","Virga","Inclinatum","Oriscus","Cavum","Stemmed","glyphVisualizer","liquescent","shape","shapeModifiers","episemata","morae","setStaffPosition","shapeModifier","_ChantNotationElement","defaultAccidental","isClef","activeAccidental","performLayout","accidentalGlyph","createGlyphVisualizer","addVisualizer","__defaultDoClef","_Clef","stepToStaffOffset","octaveOffset","staffOffsetToStep","accidentalType","finishLayout","_Clef2","_ChantNotationElement2","sourceLength","__connectorSpan","_ChantNotationElement3","justify","lb","__mergeAnnotationWithTextLeft","annotationSpans","mappings","useDropCap","Titles","startingClef","compiled","autoColoring","updateNotations","startLine","endLine","lastLine","selection","elementSelection","element","indices","selectedIndices","insertion","afterElementIndex","includes","insertionCursor","insertionElement","insertionLine","chantLine","InsertionCursor","mapping","elements","recreateDropCap","generateDropCap","initializeLayout","finishedCallback","setTimeout","onFontLoaded","performLayoutAsync","layoutElementsAsync","timeout","Date","getTime","overrideTextLeft","layoutTitles","currIndex","ChantLine","buildFromChantNotationIndex","notationsStartIndex","numNotationsOnLine","pages","updateSelection","pageHeightOffset","startLineIndex","pageHeight","copyLines","setCanvasSize","clearRect","zoom","version","editable","viewBox","cloneNode","createStyleTree","def","createStyle","lineFragment","fragmentDefs","xmlns:xlink","createDropCap","Gabc","parseChantNotations","unsanitizedText","defaults","layout","default-font","font-size","page","margin-left","margin-top","margin-right","margin-bottom","scores","copyLayout","to","unserializeFromJson","serializeToJson","notationBounds","staffLeft","staffRight","custos","ledgerLines","braces","nextLine","previousLine","lyricLineHeight","lyricLineBaseline","numLyricLines","spaceAfterNotations","spaceBetweenTextTracks","lastLyrics","lastNeumeIndex","extraTextOnlyIndex","lastIndex","altLineHeight","altLineBaseline","numAltLines","translationLineHeight","translationLineBaseline","numTranslationLines","notationBoundsOffset","extraTextOnlyHeight","extraTextOnlyLyricIndex","lastNotation","extraLines","lineWidth","lowestPossibleAnnotationY","lyricAndTextRect","altLineTextRect","totalHeight","strokeStyle","beginPath","moveTo","lineTo","layoutInsertionCursor","ledgerLine","functionNames","quickSvg","getInnerNodes","element-index","len","qx1","qx3","newElementStart","beginningLyrics","prev","prevNeume","prevLyrics","condensableSpaces","paddingLeft","DoubleBar","newLyric","elidesToNext","MAX_SAFE_INTEGER","minX","a","curr","rightNotationBoundary","lastTranslationTextWithEndNeume","lastNotationIndex","lastStartBrace","lastLyricsBeforeTextOnly","textOnlyStartIndex","actualRightBoundary","Custos","isDivider","forceBreak","fitsOnLine","positionNotationElement","candidateForExtraTextOnlyLine","currentLyric","nextNotation","firstOnLine","startExtraTextOnlyFromFirst","lastNotationWithLyrics","reverse","find","lastLyricRight","setMaxWidth","cne","firstWithNoWidth","allowLineBreakBeforeNext","maxNumNotationsOnLine","findNeumesToJustify","extraSpace","getWhitespaceOnRight","toJustify","sum","condensable","endNeume","last","isLastLine","whitespace","rightEdge","minHyphenWidth","justifyElements","centerDividers","oldBoundsX","leftPoint","rightPoint","FullBar","nextOrCurr","isAccidental","lastRightNeume","lastRightLyric","doJustify","extraSpaceBeforeCustos","increment","toJustifyIndex","nextToJustify","incrementOffsetAtNextChance","startBrace","k","startNote","BraceShape","RoundBrace","getAttachmentX","braceEnd","AccentedCurlyBrace","processElementForLedgerLine","endElem","offsetX","half","minY","maxY","positionNonLyricText","rightX","beyondStaffRight","ll","episema","spaceBetweenEpisemata","terminating","alignment","HorizontalEpisemaAlignment","Left","Center","Right","newY","newWidth","handleEndBrace","braceStart","nextNotationButOne","nextNoteButOne","BracePoint","BraceAttachment","space","fixedX","total","maxRight","currLyric","minLeft","firstOfSyllable","hasShifted","atLeastOneWithoutConnector","prevLyricRight","condensableSpacesSincePrevLyric","condensableSpaceSincePrevLyric","notationI","currLyricLeft","shift","spaceBetweenSyls","pLyrics","lastCondensable","useMidpoint","minIndex","maxIndex","curIndex","notationX","closenessToLeft","closenessToRight","Tristropha","TorculusResupinusFlexus","TorculusResupinus","Torculus","ScandicusFlexus","Scandicus","SalicusFlexus","Salicus","Punctum","PunctaInclinata","PorrectusFlexus","Porrectus","Podatus","PesSubpunctis","PesQuassus","Distropha","Clivis","Climacus","Trivirga","Bivirga","Apostropha","Neume","NeumeBuilder","startingX","lastNote","lineIsHanging","previousNotation","withLineTo","noteAlignsRight","needsLine","noteAt","lowerNote","upperNote","upperGlyph","lowerGlyph","upper","lower","lineFrom","prevStaffPosition","advanceWidth","multiple","start","requiresLedgerLine","positionMarkings","ictus","firstAbove","needsAbove","firstBelow","needsBelow","endI","position","positionEpisemata","bottomNote","topNote","positionEpisemataBelow","positionEpisemataAbove","mark","positionPodatusEpisemata","positionPodatusMorae","firstNote","secondNote","thirdNote","hasTopEpisema","positionClivisMarkings","positionClivisMorae","positionClivisEpisemata","positionPodatusMarkings","first","second","third","fourth","_Neume","build","getNoteGlyphCode","_Neume2","virgaAt","advanceBy","_Neume3","_Neume4","positionInclinataMorae","withInclinata","_Neume5","withClivis","_Neume6","glyphCodes","glyphAdvance","_Neume7","findNextNeume","nextNoteStaffPosition","pitchToStaffPosition","_Neume8","lowerStaffPos","upperStaffPos","builder","withLineEndingAt","_Neume9","withPodatus","_Neume10","_Neume11","positionPorrectusMarkings","thirdGlyph","withPorrectusSwash","_Neume12","positionPorrectusFlexusMarkings","fourthGlyph","_Neume13","_Neume14","_Neume15","_Neume16","positionTorculusMarkings","_Neume17","_Neume18","_Neume19","glyph1","glyph3","note2","note3","_Neume20","firstGlyph","_Neume21","fifthGlyph","fifth","_Neume22","_Neume23","Accidental","AccidentalType","DominicanBar","HalfBar","QuarterBar","Divider","auto","getGlyphCode","resetsAccidentals","_Divider","_Divider2","_Divider3","_Divider4","_Divider5","parity","_Divider6","line0","line1","adjustStep","_Divider7","Ictus","HorizontalEpisema","Accent","_GlyphVisualizer","minDistanceAway","punctumInclinatumShorten","prevNote","_GlyphVisualizer2","horizontalOffset","collisionWithEpisema","verticalOffset","shortOffset","extraOffset","collisionWithStaffLine","_GlyphVisualizer3","CurlyBrace","attachment","GabcHeader","Markings","Signs","Neumes","__syllablesRegex","__altTranslationRegex","__notationsRegex","__notationsRegex_group_insideBraces","__bracketedCommandRegex","__braceSpecRegex","TrailingSpaceForAccidental","TrailingSpaceMultiple","regexHeaderEnd","regexHeaderLine","regexHeaderComment","comments","cValues","original","txtHeader","arrayName","gabc","alternateKey","array","e","console","warn","elementCountForNotations","items","item","headerLength","getLength","splitWords","createMappingsFromWords","clef","before","after","oldIndexMap","startOld","startNew","subLength","inew","overlap","_overlap","iold","diffDescriptorsAndNewWords","newGabcSource","insertionIndex","oldInsertionIndex","newWords","results","lastTranslationNeumes","resultCode","resultValues","sourceIndexDiff","elementCount","createMappingFromWord","curNotation","prevIsAccidental","resetDependencies","resetAccidentals","staffPositionToPitch","automatic","needToEndBrace","transText","lastTranslationText","matches","currSyllable","lyricText","notationData","parseNotations","firstOfParentheses","notationWithLyrics","indexOffset","proposedLyricType","createSyllableLyrics","lyricTexts","indexClosingBracket","makeLyric","textIndex","centerEndIndex","elides","setForceConnector","baseSourceIndex","addToLastSourceGabc","addNotation","neumes","createNeumesFromNotes","prevNotation","RegExp","atom","gabcHeightToExsurgeHeight","noteArray","createNoteFromData","accidental","gabcHeightToExsurgePitch","bracketedNotations","finalTrailingSpace","firstNoteIndex","currNoteIndex","createNeume","includeCurrNote","lastNoteIndex","includePrevNote","addNote","unknownState","handle","currNote","virgaState","apostrophaState","oriscusState","punctaInclinataState","punctumState","notesRemaining","state","podatusState","climacusState","clivisState","distrophaState","salicusState","scandicusState","pesSubpunctisState","torculusState","porrectusState","salicusFlexusState","scandicusFlexusState","bivirgaState","tristrophaState","prevNoteButOne","torculusResupinusState","episemaNoteIndex","episemaNote","previousNote","previousMora","episemaHadModifier","newNote","processInstructionForNote","instruction","sourceIndexOffset","cmd","above","attachmentPoint","gabcNotations","parseWords","gabcWords","parseWord","gabcWord","gabcHeight","charCodeAt","exsurgeHeight","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","elementName","setBoundsX","finalY","el","_arr2","_i2","_arr3","_i3"],"mappings":"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","file":"exsurge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t'use strict';\n\t\n\t// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n\t// import { Gabc } from './Exsurge.Gabc.js'\n\t//\n\t// // client side support\n\t//\n\t// if (typeof document !== 'undefined' && document.registerElement) {\n\t//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n\t//\n\t//   ChantVisualElementPrototype.createdCallback = function() {\n\t//     var ctxt = new ChantContext();\n\t//\n\t//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n\t//\n\t//     var useDropCap = true;\n\t//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n\t//     if (useDropCapAttr === 'false')\n\t//       useDropCap = false;\n\t//\n\t//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n\t//\n\t//     var annotationAttr = this.getAttribute(\"annotation\");\n\t//     if (annotationAttr) {\n\t//       // add an annotation\n\t//       score.annotation = new Annotation(ctxt, annotationAttr);\n\t//     }\n\t//\n\t//     var _element = this;\n\t//\n\t//     var width = 0;\n\t//     var doLayout = function() {\n\t//       var newWidth = _element.parentElement.clientWidth;\n\t//       if(width === newWidth) return;\n\t//       width = newWidth;\n\t//       // perform layout on the chant\n\t//       score.performLayout(ctxt, function() {\n\t//         score.layoutChantLines(ctxt, width, function() {\n\t//           // render the score to svg code\n\t//           _element.appendElement(score.createSvgNode(ctxt));\n\t//         });\n\t//       });\n\t//     }\n\t//     doLayout();\n\t//     if (window.addEventListener)\n\t//       window.addEventListener('resize',doLayout,false);\n\t//     else if (window.attachEvent)\n\t//       window.attachEvent('onresize',doLayout);\n\t//   }\n\t//\n\t//   ChantVisualElementPrototype.attachedCallback = function() {\n\t//\n\t//   }\n\t//\n\t//   // register the custom element\n\t//   // if(window.customElements && window.customElements.define) {\n\t//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n\t//   // } else {\n\t//     document.registerElement('chant-visual', {\n\t//       prototype: ChantVisualElementPrototype\n\t//     });\n\t//   // }\n\t// }\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tObject.keys(_ExsurgeCore).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeCore[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tObject.keys(_ExsurgeText).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeText[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tObject.keys(_ExsurgeGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGlyphs[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tObject.keys(_ExsurgeDrawing).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeDrawing[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tObject.keys(_ExsurgeChant).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChant[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(6);\n\t\n\tObject.keys(_ExsurgeChantChantLine).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantChantLine[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(9);\n\t\n\tObject.keys(_ExsurgeChantMarkings).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantMarkings[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tObject.keys(_ExsurgeChantSigns).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantSigns[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(7);\n\t\n\tObject.keys(_ExsurgeChantNeumes).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantNeumes[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGabc = __webpack_require__(10);\n\t\n\tObject.keys(_ExsurgeGabc).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGabc[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeTitles = __webpack_require__(11);\n\t\n\tObject.keys(_ExsurgeTitles).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeTitles[key];\n\t    }\n\t  });\n\t});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.DeviceIndependent = DeviceIndependent;\n\texports.Centimeters = Centimeters;\n\texports.Millimeters = Millimeters;\n\texports.Inches = Inches;\n\texports.ToCentimeters = ToCentimeters;\n\texports.ToMillimeters = ToMillimeters;\n\texports.ToInches = ToInches;\n\texports.generateRandomGuid = generateRandomGuid;\n\texports.getCssForProperties = getCssForProperties;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Units = exports.Units = {\n\t  // enums\n\t  DeviceIndepenedent: 0, // device independent units: 96/inch\n\t  Centimeters: 1,\n\t  Millimeters: 2,\n\t  Inches: 3,\n\t\n\t  // constants for device independent units (diu)\n\t  DIU_PER_INCH: 96,\n\t  DIU_PER_CENTIMETER: 96 / 2.54,\n\t\n\t  ToDeviceIndependent: function ToDeviceIndependent(n, inputUnits) {\n\t    switch (inputUnits) {\n\t      case Centimeters:\n\t        return n * Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n * Units.DIU_PER_CENTIMETER / 10;\n\t      case Inches:\n\t        return n * Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  FromDeviceIndependent: function FromDeviceIndependent(n, outputUnits) {\n\t    switch (outputUnits) {\n\t      case Centimeters:\n\t        return n / Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n / Units.DIU_PER_CENTIMETER * 10;\n\t      case Inches:\n\t        return n / Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  StringToUnitsType: function StringToUnitsType(s) {\n\t    switch (s.ToLower()) {\n\t      case \"in\":\n\t      case \"inches\":\n\t        return Units.Inches;\n\t\n\t      case \"cm\":\n\t      case \"centimeters\":\n\t        return Units.Centimeters;\n\t\n\t      case \"mm\":\n\t      case \"millimeters\":\n\t        return Units.Millimeters;\n\t\n\t      case \"di\":\n\t      case \"device-independent\":\n\t        return Units.DeviceIndepenedent;\n\t\n\t      default:\n\t        return Units.DeviceIndepenedent;\n\t    }\n\t  },\n\t\n\t  UnitsTypeToString: function UnitsTypeToString(units) {\n\t    switch (units) {\n\t      case Units.Inches:\n\t        return \"in\";\n\t      case Units.Centimeters:\n\t        return \"cm\";\n\t      case Units.Millimeters:\n\t        return \"mm\";\n\t      case Units.DeviceIndepenedent:\n\t        return \"device-independent\";\n\t      default:\n\t        return \"device-independent\";\n\t    }\n\t  }\n\t};\n\t\n\tfunction DeviceIndependent(n) {\n\t  return n;\n\t}\n\t\n\tfunction Centimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction Millimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction Inches(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\tfunction ToCentimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction ToMillimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction ToInches(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\t/*\n\t * Point\n\t */\n\t\n\tvar Point = exports.Point = function () {\n\t  function Point(x, y) {\n\t    _classCallCheck(this, Point);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : 0;\n\t    this.y = typeof y !== 'undefined' ? y : 0;\n\t  }\n\t\n\t  _createClass(Point, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Point(this.x, this.y);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(point) {\n\t      return this.x === point.x && this.y === point.y;\n\t    }\n\t  }]);\n\t\n\t  return Point;\n\t}();\n\t\n\t/*\n\t * Rect\n\t */\n\t\n\t\n\tvar Rect = exports.Rect = function () {\n\t  function Rect(x, y, width, height) {\n\t    _classCallCheck(this, Rect);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : Infinity;\n\t    this.y = typeof y !== 'undefined' ? y : Infinity;\n\t    this.width = typeof width !== 'undefined' ? width : -Infinity;\n\t    this.height = typeof height !== 'undefined' ? height : -Infinity;\n\t  }\n\t\n\t  _createClass(Rect, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Rect(this.x, this.y, this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"isEmpty\",\n\t    value: function isEmpty() {\n\t      return this.x === Infinity && this.y === Infinity && this.width === -Infinity && this.height === -Infinity;\n\t    }\n\t\n\t    // convenience method\n\t\n\t  }, {\n\t    key: \"right\",\n\t    value: function right() {\n\t      return this.x + this.width;\n\t    }\n\t  }, {\n\t    key: \"bottom\",\n\t    value: function bottom() {\n\t      return this.y + this.height;\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(rect) {\n\t      return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n\t    }\n\t\n\t    // other can be a Point or a Rect\n\t\n\t  }, {\n\t    key: \"contains\",\n\t    value: function contains(other) {\n\t      if (other instanceof Point) {\n\t        return other.x >= this.x && other.x <= this.x + this.width && other.y >= this.y && other.y <= this.y + this.height;\n\t      } else {\n\t        // better be instance of Rect\n\t        return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"union\",\n\t    value: function union(rect) {\n\t\n\t      var right = Math.max(this.x + this.width, rect.x + rect.width);\n\t      var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\t\n\t      this.x = Math.min(this.x, rect.x);\n\t      this.y = Math.min(this.y, rect.y);\n\t\n\t      this.width = right - this.x;\n\t      this.height = bottom - this.y;\n\t    }\n\t  }]);\n\t\n\t  return Rect;\n\t}();\n\t\n\t/**\n\t * Margins\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Margins = exports.Margins = function () {\n\t  function Margins(left, top, right, bottom) {\n\t    _classCallCheck(this, Margins);\n\t\n\t    this.left = typeof left !== 'undefined' ? left : 0;\n\t    this.top = typeof top !== 'undefined' ? top : 0;\n\t    this.right = typeof right !== 'undefined' ? right : 0;\n\t    this.bottom = typeof bottom !== 'undefined' ? bottom : 0;\n\t  }\n\t\n\t  _createClass(Margins, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Margins(this.left, this.top, this.right, this.bottom);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(margins) {\n\t      return this.left === margins.left && this.top === margins.top && this.right === margins.right && this.bottom === margins.bottom;\n\t    }\n\t  }]);\n\t\n\t  return Margins;\n\t}();\n\t\n\t/**\n\t * Size\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Size = exports.Size = function () {\n\t  function Size(width, height) {\n\t    _classCallCheck(this, Size);\n\t\n\t    this.width = typeof width !== 'undefined' ? width : 0;\n\t    this.height = typeof height !== 'undefined' ? height : 0;\n\t  }\n\t\n\t  _createClass(Size, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Size(this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(size) {\n\t      return this.width === size.width && this.height === size.height;\n\t    }\n\t  }]);\n\t\n\t  return Size;\n\t}();\n\t\n\t/*\n\t * Pitches, notes\n\t */\n\t\n\t\n\tvar Step = exports.Step = {\n\t  Do: 0,\n\t  Du: 1,\n\t  Re: 2,\n\t  Me: 3,\n\t  Mi: 4,\n\t  Fa: 5,\n\t  Fu: 6,\n\t  So: 7,\n\t  La: 9,\n\t  Te: 10,\n\t  Ti: 11\n\t};\n\t\n\t// this little array helps map step values to staff positions. The numeric values of steps\n\t// correspond to whole step increments (2) or half step increments (1). This gives us the ability\n\t// to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n\t// array maps the steps to an incremental position the steps take on the staff line. This works\n\t// so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n\t// for relatively easy mapping to staff line locations.\n\t//                         Do Du Re Me Mi Fa Fu So    La Te Ti\n\tvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\n\tvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\t\n\t\n\tvar Pitch = exports.Pitch = function () {\n\t  function Pitch(step, octave) {\n\t    _classCallCheck(this, Pitch);\n\t\n\t    if (typeof octave === 'undefined') {\n\t      octave = Math.floor(step / 12);\n\t      step = step % 12;\n\t    }\n\t    this.step = step;\n\t    this.octave = octave;\n\t  }\n\t\n\t  _createClass(Pitch, [{\n\t    key: \"toInt\",\n\t    value: function toInt() {\n\t      return this.octave * 12 + this.step;\n\t    }\n\t  }, {\n\t    key: \"transpose\",\n\t    value: function transpose(step) {\n\t      return new Pitch(this.toInt() + step);\n\t    }\n\t  }, {\n\t    key: \"isHigherThan\",\n\t    value: function isHigherThan(pitch) {\n\t      return this.toInt() > pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"isLowerThan\",\n\t    value: function isLowerThan(pitch) {\n\t      return this.toInt() < pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(pitch) {\n\t      return this.toInt() === pitch.toInt();\n\t    }\n\t  }], [{\n\t    key: \"stepToStaffOffset\",\n\t    value: function stepToStaffOffset(step) {\n\t      return __StepToStaffPosition[step];\n\t    }\n\t  }, {\n\t    key: \"staffOffsetToStep\",\n\t    value: function staffOffsetToStep(offset) {\n\t      while (offset < 0) {\n\t        offset = __StaffOffsetToStep.length + offset;\n\t      }return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n\t    }\n\t  }]);\n\t\n\t  return Pitch;\n\t}();\n\t\n\tfunction generateRandomGuid() {\n\t  function s4() {\n\t    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t  }\n\t  return s4() + s4();\n\t}\n\t\n\tfunction getCssForProperties(properties) {\n\t  return Object.keys(properties).map(function (key) {\n\t    return key + \": \" + properties[key] + \";\";\n\t  }).join('');\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.language = exports.Spanish = exports.Latin = exports.English = exports.Language = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar Exsurge = _interopRequireWildcard(_ExsurgeCore);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @class\n\t */\n\tvar Language = exports.Language = function () {\n\t  function Language(name) {\n\t    _classCallCheck(this, Language);\n\t\n\t    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n\t    this.centerNeume = false;\n\t  }\n\t\n\t  /**\n\t   * @param {String} text The string to parsed into words.\n\t   * @return {Word[]} the resulting parsed words from syllabification\n\t   */\n\t\n\t\n\t  _createClass(Language, [{\n\t    key: \"syllabify\",\n\t    value: function syllabify(text) {\n\t      var parsedWords = [];\n\t\n\t      if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\t\n\t      // Divide the text into words separated by whitespace\n\t      var words = text.split(/[\\s]+/);\n\t\n\t      for (var i = 0, end = words.length; i < end; i++) {\n\t        parsedWords.push(this.syllabifyWord(words[i]));\n\t      }return parsedWords;\n\t    }\n\t  }]);\n\t\n\t  return Language;\n\t}();\n\t\n\tvar English = exports.English = function (_Language) {\n\t  _inherits(English, _Language);\n\t\n\t  function English() {\n\t    _classCallCheck(this, English);\n\t\n\t    var _this = _possibleConstructorReturn(this, (English.__proto__ || Object.getPrototypeOf(English)).call(this, \"English\"));\n\t\n\t    _this.centerNeume = true;\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * @param {String} s the string to search\n\t   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t   */\n\t\n\t\n\t  _createClass(English, [{\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n\t      var match = regexLetter.exec(s.slice(startIndex));\n\t      if (match) return {\n\t        found: true,\n\t        startIndex: startIndex + match.index,\n\t        length: match[0].length\n\t      };\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return English;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Latin = exports.Latin = function (_Language2) {\n\t  _inherits(Latin, _Language2);\n\t\n\t  /**\n\t   * @constructs\n\t   */\n\t  function Latin() {\n\t    _classCallCheck(this, Latin);\n\t\n\t    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n\t    var _this2 = _possibleConstructorReturn(this, (Latin.__proto__ || Object.getPrototypeOf(Latin)).call(this, \"Latin\"));\n\t\n\t    _this2.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n\t    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n\t    _this2.possibleDiphthongs = _this2.diphthongs.concat([\"ei\", \"eu\", \"ui\", \"éi\", \"éu\", \"úi\"]);\n\t    _this2.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\t\n\t    // some words that are simply exceptions to standard syllabification rules!\n\t    var wordExceptions = new Object();\n\t\n\t    // ui combos pronounced as diphthongs\n\t    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n\t    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n\t    wordExceptions[\"huic\"] = [\"huic\"];\n\t    wordExceptions[\"cui\"] = [\"cui\"];\n\t    wordExceptions[\"hui\"] = [\"hui\"];\n\t\n\t    // eu combos pronounced as diphthongs\n\t    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n\t    wordExceptions[\"seu\"] = [\"seu\"];\n\t\n\t    _this2.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ä\", \"ë\", \"ï\", \"ö\", \"ü\", \"ā\", \"ē\", \"ī\", \"ō\", \"ū\", \"ă\", \"ĕ\", \"ĭ\", \"ŏ\", \"ŭ\", \"å\", \"e̊\", \"o̊\", \"ů\", \"æ\", \"œ\", \"ǽ\", // no accented œ in unicode?\n\t    \"y\", \"ý\", \"ÿ\"]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\t\n\t    _this2.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\t\n\t    _this2.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\t\n\t    _this2.liquidConsonants = [\"l\", \"r\"];\n\t    return _this2;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Latin, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"isVowelThatMightBeConsonant\",\n\t    value: function isVowelThatMightBeConsonant(c) {\n\t      for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++) {\n\t        if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    // substring should be a vowel and the character following\n\t\n\t  }, {\n\t    key: \"isVowelActingAsConsonant\",\n\t    value: function isVowelActingAsConsonant(substring) {\n\t      return this.isVowelThatMightBeConsonant(substring[0]) && this.isVowel(substring[1]);\n\t    }\n\t\n\t    /**\n\t     * f is not a mute consonant, but we lump it together for syllabification\n\t     * since it is syntactically treated the same way\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isMuteConsonantOrF\",\n\t    value: function isMuteConsonantOrF(c) {\n\t      for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++) {\n\t        if (this.muteConsonantsAndF[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is a liquid consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isLiquidConsonant\",\n\t    value: function isLiquidConsonant(c) {\n\t      for (var i = 0, end = this.liquidConsonants.length; i < end; i++) {\n\t        if (this.liquidConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isPossibleDiphthong\",\n\t    value: function isPossibleDiphthong(s) {\n\t      for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++) {\n\t        if (this.possibleDiphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n\t     *\n\t     * Divisions occur when:\n\t     *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n\t     *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n\t     *   3. After the first consonant when two or more consonants follow a vowel\n\t     *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n\t     *\n\t     * Exceptions:\n\t     *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n\t     *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n\t     *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n\t     *\n\t     * In addition to these rules, Wheelock's Latin provides this sound exception:\n\t     *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n\t     *      th, which should never be separated in syllabification:\n\t     *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n\t     *\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t      var haveCompleteSyllable = false;\n\t      var previousWasVowel = false;\n\t      var workingString = word.toLowerCase();\n\t      var startSyllable = 0;\n\t\n\t      var c, lookahead, haveLookahead;\n\t\n\t      // a helper function to create syllables\n\t      var makeSyllable = function makeSyllable(length) {\n\t        if (haveCompleteSyllable) {\n\t          syllables.push(word.substr(startSyllable, length));\n\t          startSyllable += length;\n\t        }\n\t\n\t        haveCompleteSyllable = false;\n\t      };\n\t\n\t      for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n\t        c = workingString[i];\n\t\n\t        // get our lookahead in case we need them...\n\t        lookahead = \"*\";\n\t        haveLookahead = i + 1 < wordLength;\n\t\n\t        if (haveLookahead) lookahead = workingString[i + 1];\n\t\n\t        var cIsVowel = this.isVowel(c);\n\t\n\t        // i is a special case for a vowel. when i is at the beginning\n\t        // of the word (Iesu) or i is between vowels (alleluia),\n\t        // then the i is treated as a consonant (y)\n\t        if (c === \"i\") {\n\t          if (i === 0 && haveLookahead && this.isVowel(lookahead)) cIsVowel = false;else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n\t            cIsVowel = false;\n\t          }\n\t        }\n\t\n\t        if (c === \"-\") {\n\t          // a hyphen forces a syllable break, which effectively resets\n\t          // the logic...\n\t\n\t          haveCompleteSyllable = true;\n\t          previousWasVowel = false;\n\t          makeSyllable(i - startSyllable);\n\t          startSyllable++;\n\t        } else if (cIsVowel) {\n\t          // once we get a vowel, we have a complete syllable\n\t          haveCompleteSyllable = true;\n\t\n\t          if (previousWasVowel && !this.isDiphthong(workingString[i - 1] + \"\" + c)) {\n\t            makeSyllable(i - startSyllable);\n\t            haveCompleteSyllable = true;\n\t          }\n\t\n\t          previousWasVowel = true;\n\t        } else if (haveLookahead) {\n\t          if (c === \"q\" && lookahead === \"u\" || lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\")) {\n\t            // handle wheelock's exceptions for qu, ch, ph and th\n\t            makeSyllable(i - startSyllable);\n\t            i++; // skip over the 'h' or 'u'\n\t          } else if (previousWasVowel && this.isVowel(lookahead)) {\n\t            // handle division rule 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (this.isMuteConsonantOrF(c) && this.isLiquidConsonant(lookahead)) {\n\t            // handle exception 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (haveCompleteSyllable) {\n\t            // handle division rule 3\n\t            makeSyllable(i + 1 - startSyllable);\n\t          }\n\t\n\t          previousWasVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var match = this.regexVowel.exec(s.slice(startIndex));\n\t      if (match) {\n\t        if (match[1]) {\n\t          // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n\t          match.index += match[1].length;\n\t        }\n\t        return {\n\t          found: true,\n\t          startIndex: startIndex + match.index,\n\t          length: match[2].length\n\t        };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Latin;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Spanish = exports.Spanish = function (_Language3) {\n\t  _inherits(Spanish, _Language3);\n\t\n\t  function Spanish() {\n\t    _classCallCheck(this, Spanish);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Spanish.__proto__ || Object.getPrototypeOf(Spanish)).call(this, \"Spanish\"));\n\t\n\t    _this3.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\t\n\t    _this3.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\t\n\t    _this3.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\t\n\t    _this3.diphthongs = [\"ai\", \"ei\", \"oi\", \"ui\", \"ia\", \"ie\", \"io\", \"iu\", \"au\", \"eu\", \"ou\", \"ua\", \"ue\", \"uo\", \"ái\", \"éi\", \"ói\", \"úi\", \"iá\", \"ié\", \"ió\", \"iú\", \"áu\", \"éu\", \"óu\", \"uá\", \"ué\", \"uó\", \"üe\", \"üi\"];\n\t\n\t    _this3.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n\t    return _this3;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Spanish, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isWeakVowel\",\n\t    value: function isWeakVowel(c) {\n\t      for (var i = 0, end = this.weakVowels.length; i < end; i++) {\n\t        if (this.weakVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isStrongVowel\",\n\t    value: function isStrongVowel(c) {\n\t      for (var i = 0, end = this.strongVowels.length; i < end; i++) {\n\t        if (this.strongVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"createSyllable\",\n\t    value: function createSyllable(text) {\n\t      /*\n\t      var accented = false;\n\t      var ellidesToNext = false;\n\t       if (text.length > 0) {\n\t           if (text[0] == '`') {\n\t              accented = true;\n\t              text = text.substr(1);\n\t          }\n\t           if (text[text.length - 1] == '_') {\n\t              ellidesToNext = true;\n\t              text = text.substr(0, text.length - 1);\n\t          }\n\t      }\n\t       var s = new Syllable(text);\n\t       s.isMusicalAccent = accented;\n\t      s.elidesToNext = ellidesToNext;*/\n\t\n\t      return text;\n\t    }\n\t\n\t    /**\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t\n\t      var haveCompleteSyllable = false;\n\t      var previousIsVowel = false;\n\t      var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n\t      var startSyllable = 0;\n\t\n\t      // fixme: first check for prefixes\n\t\n\t      for (var i = 0; i < word.length; i++) {\n\t        var c = word[i].toLowerCase();\n\t\n\t        if (this.isVowel(c)) {\n\t          // we have a complete syllable as soon as we have a vowel\n\t          haveCompleteSyllable = true;\n\t\n\t          var cIsStrongVowel = this.isStrongVowel(c);\n\t\n\t          if (previousIsVowel) {\n\t            // if we're at a strong vowel, then we finish out the last syllable\n\t            if (cIsStrongVowel) {\n\t              if (previousIsStrongVowel) {\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              }\n\t            }\n\t          }\n\t\n\t          previousIsVowel = true;\n\t          previousIsStrongVowel = cIsStrongVowel;\n\t        } else {\n\t          if (!haveCompleteSyllable) {\n\t            // do nothing since we don't have a complete syllable yet...\n\t          } else {\n\t            // handle explicit syllable breaks\n\t            if (word[i] === \"-\") {\n\t              // start new syllable\n\t              syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t              startSyllable = ++i;\n\t            } else {\n\t              var numberOfConsonants = 1,\n\t                  consonant2;\n\t\n\t              // count how many more consonants there are\n\t              for (var j = i + 1; j < word.length; j++) {\n\t                if (this.isVowel(word[j])) break;\n\t                numberOfConsonants++;\n\t              }\n\t\n\t              if (numberOfConsonants === 1) {\n\t                // start new syllable\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 2) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t                if (consonant2 === \"l\" || consonant2 === \"r\" || c === \"c\" && consonant2 === \"h\") {\n\t                  // split before the consonant pair\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                  startSyllable = i++;\n\t                } else {\n\t                  //split the consonants\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t                  startSyllable = i;\n\t                }\n\t              } else if (numberOfConsonants === 3) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t\n\t                // if second consonant is s, divide cc-c, otherwise divide c-cc\n\t                if (consonant2 === \"s\") {\n\t                  i += 2;\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                } else syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 4) {\n\t                // four always get split cc-cc\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable + 2)));\n\t                startSyllable = i + 2;\n\t                i += 3;\n\t              }\n\t            }\n\t\n\t            haveCompleteSyllable = false;\n\t          }\n\t\n\t          previousIsVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var i, end, index;\n\t      var workingString = s.toLowerCase();\n\t\n\t      // do we have a diphthongs?\n\t      for (i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        var d = this.diphthongs[i];\n\t        index = workingString.indexOf(d, startIndex);\n\t\n\t        if (index >= 0) {\n\t          // check the exceptions...\n\t          if (d[0] === \"u\" && index > 0) {\n\t            var tripthong = s.substr(index - 1, 3).toLowerCase();\n\t\n\t            for (var j = 0, endj = this.uDiphthongExceptions.length; i < endj; j++) {\n\t              if (tripthong === this.uDiphthongExceptions[j]) {\n\t                // search from after the u...\n\t                return this.findVowelSegment(s, index + 1);\n\t              }\n\t            }\n\t          }\n\t\n\t          return { found: true, startIndex: index, length: d.length };\n\t        }\n\t      }\n\t\n\t      // no diphthongs. Let's look for single vowels then...\n\t      for (i = 0, end = this.vowels.length; i < end; i++) {\n\t        index = workingString.indexOf(this.vowels[i], startIndex);\n\t\n\t        if (index >= 0) return { found: true, startIndex: index, length: 1 };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Spanish;\n\t}(Language);\n\t\n\tvar language = exports.language = {\n\t  english: new English(),\n\t  latin: new Latin(),\n\t  spanish: new Spanish()\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// generated based on the svg data\n\tvar Glyphs = exports.Glyphs = {\n\t  None: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0,\n\t      height: 0\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  AcuteAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0.803,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  GraveAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, //110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0, // -110.992,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Circle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 100\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 100\n\t    }\n\t  },\n\t  Semicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  ReversedSemicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  Stropha: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.657,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 48,\n\t      y: 73.438\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.59\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.053\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.89\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 270.082\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.052\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 200.365\n\t    },\n\t    align: \"left\"\n\t  },\n\t  DoClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 331.251\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 164.876\n\t    },\n\t    align: \"left\"\n\t  },\n\t  FaClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 193.752,\n\t      height: 333.595\n\t    },\n\t    origin: {\n\t      x: 0.001,\n\t      y: 157.001\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Flat: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.917,\n\t      height: 267.969\n\t    },\n\t    origin: {\n\t      x: 1.042,\n\t      y: 204.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Mora: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 48,\n\t      height: 48\n\t    },\n\t    origin: {\n\t      x: -24,\n\t      y: 24\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Natural: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 70.311,\n\t      height: 330.469\n\t    },\n\t    origin: {\n\t      x: 0.312,\n\t      y: 166.563\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Sharp: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 154.646,\n\t      height: 147.987\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 74.098\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusAsc: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 76\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusDes: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusLower: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 103.124\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 42\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusUpper: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 91.406,\n\t      height: 125.781\n\t    },\n\t    origin: {\n\t      x: 91.406,\n\t      y: 63.781\n\t    },\n\t    align: \"right\"\n\t  },\n\t  Porrectus1: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 302.344,\n\t      height: 215.627\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 52.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus2: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.343,\n\t      height: 328.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 68.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus3: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.344,\n\t      height: 427.345\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus4: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 420,\n\t      height: 525.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumCavum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }, {\n\t      type: \"negative\",\n\t      data: \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.78\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 105.546\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 53.164\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Quilisma: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 89.282\n\t    },\n\t    align: \"left\"\n\t  },\n\t  TerminatingAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 49.999,\n\t      height: 121.873\n\t    },\n\t    origin: {\n\t      x: 49.999,\n\t      y: 48.843\n\t    },\n\t    align: \"right\"\n\t  },\n\t  TerminatingDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 50,\n\t      height: 122.658\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 80.97\n\t    },\n\t    align: \"right\"\n\t  },\n\t  VerticalEpisemaAbove: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 60\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VerticalEpisemaBelow: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 326.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 253.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Virgula: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 98.014,\n\t      height: 175.221\n\t    },\n\t    origin: {\n\t      x: 1.074,\n\t      y: 88.86\n\t    },\n\t    align: \"left\"\n\t  }\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantNotationElement = exports.Annotations = exports.Annotation = exports.TextLeftRight = exports.Subtitle = exports.Title = exports.Supertitle = exports.TitleTextElement = exports.DropCap = exports.TranslationText = exports.AboveLinesText = exports.ChoralSign = exports.Lyric = exports.LyricArray = exports.LyricType = exports.TextElement = exports.TextSpan = exports.CurlyBraceVisualizer = exports.RoundBraceVisualizer = exports.GlyphVisualizer = exports.VirgaLineVisualizer = exports.NeumeLineVisualizer = exports.DividerLineVisualizer = exports.ChantLayoutElement = exports.ChantContext = exports.TextMeasuringStrategy = exports.QuickSvg = exports.GlyphCode = exports.DefaultTrailingSpace = exports.TextTypesByClass = exports.TextTypes = exports.MarkingPositionHint = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction getFontFilenameForProperties() {\n\t  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"{}\";\n\t\n\t  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n\t      bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n\t  return url.replace(\"{}\", \"\" + (italic || bold ? \"\" + bold + italic : \"Regular\"));\n\t}\n\t\n\t// load in the web font for special chant characters here:\n\t// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\t\n\tvar canAccessDOM = typeof document !== \"undefined\";\n\t\n\tvar __getNeumeFromSvgElem = function __getNeumeFromSvgElem(score, elem) {\n\t  var note = score.notes[elem.parentElement.querySelector(\"[element-index]\").getAttribute(\"element-index\")];\n\t  return note.neume || note;\n\t};\n\t\n\t// for positioning markings on notes\n\tvar MarkingPositionHint = exports.MarkingPositionHint = {\n\t  Default: 0,\n\t  Above: 1,\n\t  Below: 2\n\t};\n\t\n\t/**\n\t * List of types of text and their defaults relative to lyrics\n\t * @type Array\n\t */\n\tvar TextTypes = exports.TextTypes = {\n\t  supertitle: {\n\t    display: \"Supertitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 7 / 6;\n\t    }, // 14pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSupertitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.supertitle;\n\t    }\n\t  },\n\t  title: {\n\t    display: \"Title\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 3 / 2;\n\t    }, // 18pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.title;\n\t    }\n\t  },\n\t  subtitle: {\n\t    display: \"Subtitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    }, // 12pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSubtitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.subtitle;\n\t    }\n\t  },\n\t  leftRight: {\n\t    display: \"Left / Right Text\",\n\t    cssClass: \"textLeftRight\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTextLeft() || score.titles.hasTextRight();\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.titles[elem.extraClass];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return score.titles[elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"];\n\t    }\n\t  },\n\t  annotation: {\n\t    display: \"Annotation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 2 / 3;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.annotation && (!score.mergeAnnotationWithTextLeft || score.dropCap);\n\t    },\n\t    getFromScore: function getFromScore(score, _ref) {\n\t      var _ref$elementIndex = _ref.elementIndex,\n\t          elementIndex = _ref$elementIndex === undefined ? 0 : _ref$elementIndex;\n\t      return score.annotation && (score.annotation.annotations ? score.annotation.annotations[elementIndex] : score.annotation);\n\t    }\n\t  },\n\t  dropCap: {\n\t    display: \"Drop Cap\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 4;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.dropCap;\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.dropCap;\n\t    }\n\t  },\n\t  al: {\n\t    display: \"Above Staff\",\n\t    cssClass: \"aboveLinesText\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasAboveLinesText;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].alText[elem.alIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).alText[elem.getAttribute(\"al-index\") || 0];\n\t    }\n\t  },\n\t  choralSign: {\n\t    display: \"Choral Sign\",\n\t    size: function size(ctxt) {\n\t      return ctxt.staffInterval * 1.5;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return false;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notes[elem.note.elementIndex].choralSign;\n\t    }\n\t  },\n\t  lyric: {\n\t    display: \"Lyric\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasLyrics;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).lyrics[elem.getAttribute(\"lyric-index\") || 0];\n\t    }\n\t  },\n\t  translation: {\n\t    display: \"Translation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.75;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasTranslations;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].translationText[elem.translationIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).translationText[elem.getAttribute(\"translation-index\") || 0];\n\t    }\n\t  }\n\t};\n\tvar TextTypesByClass = exports.TextTypesByClass = {};\n\tObject.entries(TextTypes).forEach(function (_ref2) {\n\t  var _ref3 = _slicedToArray(_ref2, 2),\n\t      key = _ref3[0],\n\t      entry = _ref3[1];\n\t\n\t  var cssClass = entry.cssClass = entry.cssClass || key;\n\t  entry.key = key;\n\t  TextTypesByClass[cssClass] = entry;\n\t});\n\t\n\tvar DefaultTrailingSpace = exports.DefaultTrailingSpace = function DefaultTrailingSpace(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\n\t};\n\tDefaultTrailingSpace.isDefault = true;\n\t\n\tvar GlyphCode = exports.GlyphCode = {\n\t  None: \"None\",\n\t\n\t  AcuteAccent: \"AcuteAccent\",\n\t  GraveAccent: \"GraveAccent\",\n\t  Circle: \"Circle\",\n\t  Semicircle: \"Semicircle\",\n\t  ReversedSemicircle: \"ReversedSemicircle\",\n\t  Stropha: \"Stropha\",\n\t  StrophaLiquescent: \"StrophaLiquescent\",\n\t\n\t  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n\t  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\t\n\t  CustosDescLong: \"CustosDescLong\",\n\t  CustosDescShort: \"CustosDescShort\",\n\t  CustosLong: \"CustosLong\",\n\t  CustosShort: \"CustosShort\",\n\t\n\t  // clefs and other markings\n\t  DoClef: \"DoClef\",\n\t  FaClef: \"FaClef\",\n\t  Flat: \"Flat\",\n\t  Mora: \"Mora\",\n\t  Natural: \"Natural\",\n\t  OriscusAsc: \"OriscusAsc\",\n\t  OriscusDes: \"OriscusDes\",\n\t  OriscusLiquescent: \"OriscusLiquescent\",\n\t\n\t  PodatusLower: \"PodatusLower\",\n\t  PodatusUpper: \"PodatusUpper\",\n\t\n\t  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n\t  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n\t  Porrectus3: \"Porrectus3\",\n\t  Porrectus4: \"Porrectus4\",\n\t\n\t  PunctumCavum: \"PunctumCavum\",\n\t  PunctumQuadratum: \"PunctumQuadratum\",\n\t  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n\t  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n\t  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n\t  PunctumInclinatum: \"PunctumInclinatum\",\n\t  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n\t  Quilisma: \"Quilisma\",\n\t\n\t  Sharp: \"Sharp\",\n\t  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n\t  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n\t  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n\t  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n\t  VirgaLong: \"VirgaLong\",\n\t  VirgaShort: \"VirgaShort\",\n\t  Virgula: \"Virgula\",\n\t\n\t  UpperBrace: \"UpperBrace\"\n\t}; // GlyphCode\n\t\n\tvar QuickSvg = exports.QuickSvg = {\n\t  // namespaces\n\t  ns: \"http://www.w3.org/2000/svg\",\n\t  xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t  xlink: \"http://www.w3.org/1999/xlink\",\n\t\n\t  hasDOMAccess: function hasDOMAccess() {\n\t    return canAccessDOM;\n\t  },\n\t\n\t  // create the root level svg object\n\t  svg: function svg(width, height) {\n\t    var node = document.createElementNS(this.ns, \"svg\");\n\t\n\t    node.setAttribute(\"xmlns\", this.ns);\n\t    node.setAttribute(\"version\", \"1.1\");\n\t    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    // create the defs element\n\t    var defs = document.createElementNS(this.ns, \"defs\");\n\t    node.appendChild(defs);\n\t\n\t    node.defs = defs;\n\t\n\t    node.clearNotations = function () {\n\t      // clear out all children except defs\n\t      node.removeChild(defs);\n\t\n\t      while (node.hasChildNodes()) {\n\t        node.removeChild(node.lastChild);\n\t      }node.appendChild(defs);\n\t    };\n\t\n\t    return node;\n\t  },\n\t\n\t  rect: function rect(width, height) {\n\t    var node = document.createElementNS(this.ns, \"rect\");\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    return node;\n\t  },\n\t\n\t  line: function line(x1, y1, x2, y2) {\n\t    var node = document.createElementNS(this.ns, \"line\");\n\t\n\t    node.setAttribute(\"x1\", x1);\n\t    node.setAttribute(\"y1\", y1);\n\t    node.setAttribute(\"x2\", x2);\n\t    node.setAttribute(\"y2\", y2);\n\t\n\t    return node;\n\t  },\n\t\n\t  g: function g() {\n\t    var node = document.createElementNS(this.ns, \"g\");\n\t\n\t    return node;\n\t  },\n\t\n\t  text: function text() {\n\t    var node = document.createElementNS(this.ns, \"text\");\n\t\n\t    return node;\n\t  },\n\t\n\t  tspan: function tspan(str) {\n\t    var node = document.createElementNS(this.ns, \"tspan\");\n\t    node.textContent = str;\n\t\n\t    return node;\n\t  },\n\t\n\t  // nodeRef should be the id of the object in defs (without the #)\n\t  use: function use(nodeRef) {\n\t    var node = document.createElementNS(this.ns, \"use\");\n\t    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\t\n\t    return node;\n\t  },\n\t\n\t  svgFragmentForGlyph: function svgFragmentForGlyph(glyph) {\n\t    var svgSrc = \"\";\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n\t        d: path.data || undefined,\n\t        fill: path.type === \"negative\" ? \"#fff\" : undefined\n\t      });\n\t    }\n\t    return svgSrc;\n\t  },\n\t\n\t  nodesForGlyph: function nodesForGlyph(glyph) {\n\t    var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createNode\";\n\t\n\t    var nodes = [];\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      var props = {};\n\t      if (path.data) props.d = path.data;\n\t      if (path.type === \"negative\") props.fill = \"#fff\";\n\t      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n\t    }\n\t    return nodes;\n\t  },\n\t\n\t  createNode: function createNode(name, attributes, children) {\n\t    var node = document.createElementNS(this.ns, name);\n\t    if (attributes && attributes.source) {\n\t      node.source = attributes.source;\n\t      delete attributes.source;\n\t    }\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") {\n\t        var val = attributes[attr];\n\t        var match = attr.match(/^([^:]+):([^:]+)$/);\n\t        if (match) {\n\t          node.setAttributeNS(this[match[1]], match[2], val);\n\t        } else {\n\t          node.setAttribute(attr, val);\n\t        }\n\t      }\n\t    }\n\t    if (children) {\n\t      if (typeof children === \"string\") {\n\t        node.textContent = children;\n\t      } else if (children.constructor === [].constructor) {\n\t        for (var i = 0; i < children.length; ++i) {\n\t          node.appendChild(children[i]);\n\t        }\n\t      } else {\n\t        node.appendChild(children);\n\t      }\n\t    }\n\t    return node;\n\t  },\n\t\n\t  createSvgTree: function createSvgTree(name, props) {\n\t    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      children[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    if (\"class\" in props) {\n\t      props.className = props.class;\n\t      delete props.class;\n\t    }\n\t    if (children.length === 1 && children[0] instanceof Array) {\n\t      children = children[0];\n\t    }\n\t    var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var key = _step.value;\n\t\n\t          if (/[-:][a-z]/.test(key)) {\n\t            if (/^\\w+-index$/.test(key)) continue;\n\t            var camelCase = key.replace(/[-:]([a-z])/g, function (whole, letter) {\n\t              return letter.toUpperCase();\n\t            });\n\t            obj[camelCase] = obj[key];\n\t            delete obj[key];\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    };\n\t    convertKeysToCamelCase(props);\n\t    if (props.style) convertKeysToCamelCase(props.style);\n\t    var source = props.source;\n\t    if (source && source.sourceGabc) {\n\t      props[\"source-gabc\"] = source.sourceGabc;\n\t    }\n\t    return { name: name, props: props, children: children };\n\t  },\n\t\n\t\n\t  createFragment: function createFragment(name, attributes, child) {\n\t    if (child === undefined || child === null) child = \"\";\n\t\n\t    var fragment = \"<\" + name + \" \";\n\t\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") fragment += attr + '=\"' + attributes[attr] + '\" ';\n\t    }\n\t\n\t    fragment += \">\" + child + \"</\" + name + \">\";\n\t\n\t    return fragment;\n\t  },\n\t\n\t  parseFragment: function parseFragment(fragment) {\n\t    // create temporary holder\n\t    var well = document.createElement(\"svg\");\n\t\n\t    // act as a setter if svg is given\n\t    if (fragment) {\n\t      var container = this.g();\n\t\n\t      // dump raw svg\n\t      // do this to allow the browser to automatically create svg nodes?\n\t      well.innerHTML = \"<svg>\" + fragment.replace(/\\n/, \"\").replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\t\n\t      // transplant nodes\n\t      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n\t        container.appendChild(well.firstChild.firstChild);\n\t      }return container;\n\t    }\n\t  },\n\t\n\t  translate: function translate(node, x, y) {\n\t    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\t    return node;\n\t  },\n\t\n\t  scale: function scale(node, sx, sy) {\n\t    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n\t    return node;\n\t  }\n\t};\n\t\n\tvar TextMeasuringStrategy = exports.TextMeasuringStrategy = {\n\t  // shapes\n\t  Svg: 0,\n\t  Canvas: 1,\n\t  OpenTypeJS: 2\n\t};\n\t\n\t/*\n\t * ChantContext\n\t */\n\t\n\tvar ChantContext = exports.ChantContext = function () {\n\t  function ChantContext() {\n\t    var textMeasuringStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : QuickSvg.hasDOMAccess() ? TextMeasuringStrategy.Canvas : TextMeasuringStrategy.OpenTypeJS;\n\t\n\t    _classCallCheck(this, ChantContext);\n\t\n\t    this.textMeasuringStrategy = textMeasuringStrategy;\n\t    this.defs = {};\n\t    this.makeDefs = [];\n\t    if (QuickSvg.hasDOMAccess()) {\n\t      this.defsNode = QuickSvg.createNode(\"defs\");\n\t    }\n\t\n\t    // font styles\n\t    this.textStyles = {};\n\t    this.textColor = \"#000\";\n\t    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\t\n\t    this.rubricColor = \"#d00\";\n\t    this.specialCharProperties = {\n\t      \"font-family\": \"'Exsurge Characters'\",\n\t      fill: this.rubricColor\n\t    };\n\t    this.textBeforeSpecialChar = \"\";\n\t    this.textAfterSpecialChar = \".\";\n\t    this.specialCharText = function (char) {\n\t      return char;\n\t    };\n\t\n\t    this.fontStyleDictionary = {\n\t      b: { \"font-weight\": \"bold\" },\n\t      i: { \"font-style\": \"italic\" },\n\t      u: { \"text-decoration\": \"underline\" },\n\t      ul: { \"text-decoration\": \"underline\" },\n\t      c: { fill: this.rubricColor },\n\t      sc: {\n\t        \"font-variant\": \"small-caps\",\n\t        \"font-variant-caps\": \"small-caps\",\n\t        \"font-feature-settings\": \"'smcp'\",\n\t        \"-webkit-font-feature-settings\": \"'smcp'\"\n\t      }\n\t    };\n\t\n\t    this.markupSymbolDictionary = {\n\t      \"*\": \"b\",\n\t      \"_\": \"i\",\n\t      \"^\": \"c\",\n\t      \"%\": \"sc\"\n\t    };\n\t\n\t    this.textStyles.al.prefix = \"<i>\";\n\t\n\t    this.textStyles.translation.prefix = \"<i>\";\n\t\n\t    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\t\n\t    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\t\n\t    this.minLedgerSeparation = 2; // multiple of staffInterval\n\t    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n\t    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n\t    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\t\n\t    // everything depends on the scale of the punctum\n\t    this.glyphPunctumWidth = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.width;\n\t    this.glyphPunctumHeight = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.height;\n\t\n\t    // max space to add between notations when justifying, in multiples of this.staffInterval\n\t    this.maxExtraSpaceInStaffIntervals = 0.5;\n\t\n\t    // for keeping track of the clef\n\t    this.activeClef = null;\n\t\n\t    this.neumeLineColor = \"#000\";\n\t    this.staffLineColor = \"#000\";\n\t    this.dividerLineColor = \"#000\";\n\t\n\t    this.defaultLanguage = _ExsurgeText.language.latin;\n\t\n\t    // calculate the pixel ratio for drawing to a canvas\n\t    this.pixelRatio = window.devicePixelRatio || 1.0;\n\t\n\t    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\t\n\t    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n\t      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n\t      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n\t      document.body.insertBefore(this.svgTextMeasurer, document.body.firstChild);\n\t    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t      this.makeCanvasIfNeeded();\n\t    }\n\t\n\t    // for connecting neume syllables...\n\t    this.syllableConnector = \"-\";\n\t\n\t    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n\t    this.scaleDefs = true;\n\t\n\t    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n\t    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n\t    // on the text metrics, right? 1 punctum ~ x height size?\n\t    this.setGlyphScaling(1.0 / 16.0);\n\t\n\t    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n\t    this.interSyllabicMultiplier = 2.5;\n\t\n\t    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n\t    this.accidentalSpaceMultiplier = 2;\n\t\n\t    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n\t    this.interVerbalMultiplier = 1;\n\t\n\t    this.drawGuides = false;\n\t    this.drawDebuggingBounds = true;\n\t\n\t    // we keep track of where we are in processing notations, so that\n\t    // we can maintain the context for notations to know about.\n\t    //\n\t    // these are only gauranteed to be valid during the performLayout phase!\n\t    this.activeNotations = null;\n\t    this.currNotationIndex = -1;\n\t\n\t    // chant notation elements are normally separated by a minimum fixed amount of space\n\t    // on the staff line. It can happen, however, that two text elements are almost close\n\t    // enough to merge, only to be separated much more by the required hyphen (or other\n\t    // connecting string).\n\t    //\n\t    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n\t    // elements, thus bringing the chant notation elements a bit closer than otherwise\n\t    // would be normally allowed.\n\t    //\n\t    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n\t    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n\t    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n\t    this.condensingTolerance = 0.3;\n\t\n\t    // if auto color is true, then exsurge tries to automatically colorize\n\t    // some elements of the chant (directives become rubric color, etc.)\n\t    this.autoColor = true;\n\t\n\t    this.useExtraTextOnly = true;\n\t\n\t    this.insertFontsInDoc();\n\t  }\n\t\n\t  _createClass(ChantContext, [{\n\t    key: \"getFontForProperties\",\n\t    value: function getFontForProperties() {\n\t      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t      var fontFamily = arguments[1];\n\t\n\t      var key = getFontFilenameForProperties(properties),\n\t          keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n\t      return this.fontDictionary && (this.fontDictionary[keyWithFontFamily] || this.fontDictionary[fontFamily] || this.fontDictionary.Regular);\n\t    }\n\t  }, {\n\t    key: \"setFont\",\n\t    value: function setFont(font) {\n\t      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n\t      var baseStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t      var opentypeFontDictionary = arguments[3];\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = Object.entries(TextTypes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var _step2$value = _slicedToArray(_step2.value, 2),\n\t              key = _step2$value[0],\n\t              textType = _step2$value[1];\n\t\n\t          var textStyle = this.textStyles[key] = this.textStyles[key] || {};\n\t          textStyle.size = textType.defaultSize ? textType.defaultSize(size, this) : textType.size(this);\n\t          textStyle.font = font;\n\t          textStyle.color = this.textColor || \"#000\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.baseTextStyle = baseStyle;\n\t\n\t      if (opentypeFontDictionary) {\n\t        this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n\t        this.fontDictionary = opentypeFontDictionary;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setRubricColor\",\n\t    value: function setRubricColor(color) {\n\t      this.rubricColor = color;\n\t      this.specialCharProperties.fill = color;\n\t      this.fontStyleDictionary.c.fill = color;\n\t    }\n\t  }, {\n\t    key: \"setScaleDefs\",\n\t    value: function setScaleDefs(scaleDefs) {\n\t      scaleDefs = !!scaleDefs;\n\t      if (this.scaleDefs !== scaleDefs) {\n\t        this.scaleDefs = scaleDefs;\n\t        this.setGlyphScaling(this.glyphScaling);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"createStyleCss\",\n\t    value: function createStyleCss() {\n\t      var style = \"\";\n\t      var _iteratorNormalCompletion3 = true;\n\t      var _didIteratorError3 = false;\n\t      var _iteratorError3 = undefined;\n\t\n\t      try {\n\t        for (var _iterator3 = Object.entries(TextTypes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t          var _step3$value = _slicedToArray(_step3.value, 2),\n\t              key = _step3$value[0],\n\t              textType = _step3$value[1];\n\t\n\t          var cssClass = textType.cssClass,\n\t              _textStyles$key = this.textStyles[key],\n\t              color = _textStyles$key.color,\n\t              font = _textStyles$key.font,\n\t              size = _textStyles$key.size;\n\t\n\t          style += \"svg.Exsurge .\" + cssClass + \"{fill:\" + color + \";font-family:\" + font + \";font-size:\" + size + \"px;font-kerning:normal}\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t            _iterator3.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError3) {\n\t            throw _iteratorError3;\n\t          }\n\t        }\n\t      }\n\t\n\t      return style;\n\t    }\n\t  }, {\n\t    key: \"createStyleNode\",\n\t    value: function createStyleNode() {\n\t      var node = QuickSvg.createNode(\"style\", {});\n\t      node.textContent = this.createStyleCss(this);\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createStyleTree\",\n\t    value: function createStyleTree() {\n\t      return { name: \"style\", props: {}, children: [this.createStyleCss(this)] };\n\t    }\n\t  }, {\n\t    key: \"createStyle\",\n\t    value: function createStyle() {\n\t      return \"<style>\" + this.createStyleCss(this) + \"</style>\";\n\t    }\n\t  }, {\n\t    key: \"updateHyphenWidth\",\n\t    value: function updateHyphenWidth() {\n\t      // measure the size of a hyphen for the lyrics\n\t      var hyphen = new Lyric(this, this.syllableConnector, LyricType.SingleSyllable);\n\t      var multiplier = this.minLyricWordSpacing / (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n\t      this.hyphenWidth = hyphen.bounds.width;\n\t\n\t      this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n\t    }\n\t  }, {\n\t    key: \"setStaffHeight\",\n\t    value: function setStaffHeight(staffHeight) {\n\t      this.setGlyphScaling(staffHeight / 600);\n\t    }\n\t  }, {\n\t    key: \"setGlyphScaling\",\n\t    value: function setGlyphScaling(glyphScaling) {\n\t      this.glyphScaling = glyphScaling;\n\t\n\t      this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\t\n\t      // setup the line weights for the various elements.\n\t      this.staffLineWeight = Math.ceil(5 * this.staffInterval / 8) / 5;\n\t      this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n\t      this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n\t      this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\t\n\t      this.intraNeumeSpacing = this.staffInterval / 2.0;\n\t\n\t      while (this.defsNode && this.defsNode.firstChild) {\n\t        this.defsNode.removeChild(this.defsNode.firstChild);\n\t      }for (var i = 0; i < this.makeDefs.length; ++i) {\n\t        this.makeDefs[i]();\n\t      }\n\t\n\t      this.updateHyphenWidth();\n\t    }\n\t  }, {\n\t    key: \"calculateHeightFromStaffPosition\",\n\t    value: function calculateHeightFromStaffPosition(staffPosition) {\n\t      return -staffPosition * this.staffInterval;\n\t    }\n\t  }, {\n\t    key: \"insertFontsInDoc\",\n\t    value: function insertFontsInDoc() {\n\t      if (!canAccessDOM) return;\n\t\n\t      var styleElement = document.getElementById(\"exsurge-fonts\");\n\t\n\t      if (styleElement === null) {\n\t        // create it since it doesn't exist yet.\n\t        styleElement = document.createElement(\"style\");\n\t        styleElement.id = \"exsurge-fonts\";\n\t\n\t        // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\t\n\t        document.head.appendChild(styleElement);\n\t      }\n\t    }\n\t\n\t    // returns the next neume starting at this.currNotationIndex, or null\n\t    // if there isn't a neume after this one...\n\t\n\t  }, {\n\t    key: \"findNextNeume\",\n\t    value: function findNextNeume() {\n\t      if (typeof this.currNotationIndex === \"undefined\") throw \"findNextNeume() called without a valid currNotationIndex set\";\n\t\n\t      for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t\n\t        if (notation.isNeume && !notation.hasNoWidth) return notation;\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }, {\n\t    key: \"makeCanvasIfNeeded\",\n\t    value: function makeCanvasIfNeeded() {\n\t      if (!this.canvas) {\n\t        this.canvas = document.createElement(\"canvas\");\n\t        this.canvasCtxt = this.canvas.getContext(\"2d\");\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setCanvasSize\",\n\t    value: function setCanvasSize(width, height) {\n\t      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\t\n\t      this.makeCanvasIfNeeded();\n\t\n\t      this.canvas.style.width = width * scale + \"px\";\n\t      this.canvas.style.height = height * scale + \"px\";\n\t      scale *= this.pixelRatio;\n\t      this.canvas.width = width * scale;\n\t      this.canvas.height = height * scale;\n\t\n\t      this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n\t    }\n\t  }]);\n\t\n\t  return ChantContext;\n\t}();\n\t\n\t/*\n\t * ChantLayoutElement\n\t */\n\t\n\t\n\tvar ChantLayoutElement = exports.ChantLayoutElement = function () {\n\t  function ChantLayoutElement() {\n\t    _classCallCheck(this, ChantLayoutElement);\n\t\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t    this.origin = new _ExsurgeCore.Point(0, 0);\n\t\n\t    this.selected = false;\n\t    this.highlighted = false;\n\t  }\n\t\n\t  // draws the element on an html5 canvas\n\t\n\t\n\t  _createClass(ChantLayoutElement, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      throw \"ChantLayout Elements must implement draw(ctxt)\";\n\t    }\n\t\n\t    // returns svg element\n\t\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n\t    }\n\t\n\t    // returns svg code for the element, used for printing support\n\t\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n\t    }\n\t  }]);\n\t\n\t  return ChantLayoutElement;\n\t}();\n\t\n\tvar DividerLineVisualizer = exports.DividerLineVisualizer = function (_ChantLayoutElement) {\n\t  _inherits(DividerLineVisualizer, _ChantLayoutElement);\n\t\n\t  function DividerLineVisualizer(ctxt, staffPosition0, staffPosition1, divider) {\n\t    _classCallCheck(this, DividerLineVisualizer);\n\t\n\t    var _this = _possibleConstructorReturn(this, (DividerLineVisualizer.__proto__ || Object.getPrototypeOf(DividerLineVisualizer)).call(this));\n\t\n\t    _this.divider = divider;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    if (y0 > y1) {\n\t      var temp = y0;\n\t      y0 = y1;\n\t      y1 = temp;\n\t    }\n\t\n\t    _this.bounds.x = 0;\n\t    _this.bounds.y = y0;\n\t    _this.bounds.width = ctxt.dividerLineWeight;\n\t    _this.bounds.height = y1 - y0;\n\t\n\t    _this.origin.x = _this.bounds.width / 2;\n\t    _this.origin.y = y0;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(DividerLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.dividerLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      var props = {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.dividerLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.dividerLineColor,\n\t        class: \"dividerLine\"\n\t      };\n\t      if (this.divider) {\n\t        if (this.divider.selected) props.class += \" selected\";\n\t        props[\"source-index\"] = this.divider.sourceIndex;\n\t        props[\"element-index\"] = this.divider.elementIndex;\n\t        props.source = this.divider;\n\t      }\n\t      return props;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return DividerLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar NeumeLineVisualizer = exports.NeumeLineVisualizer = function (_ChantLayoutElement2) {\n\t  _inherits(NeumeLineVisualizer, _ChantLayoutElement2);\n\t\n\t  function NeumeLineVisualizer(ctxt, note0, note1, hanging) {\n\t    _classCallCheck(this, NeumeLineVisualizer);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (NeumeLineVisualizer.__proto__ || Object.getPrototypeOf(NeumeLineVisualizer)).call(this));\n\t\n\t    var staffPosition0 = note0.staffPosition;\n\t    var staffPosition1 = note1.staffPosition;\n\t\n\t    // note0 should be the upper one for our calculations here\n\t    if (staffPosition0 < staffPosition1) {\n\t      var temp = staffPosition0;\n\t      staffPosition0 = staffPosition1;\n\t      staffPosition1 = temp;\n\t    }\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = 0;\n\t\n\t    if (hanging) {\n\t      // if the difference between the notes is only one, and the upper\n\t      // note is on a line, and the lower note is within the four staff lines,\n\t      // then our hanging line goes past the lower note by a whole\n\t      // staff interval\n\t      if (staffPosition0 - staffPosition1 === 1 && Math.abs(staffPosition0) % 2 === 1 && staffPosition1 > -3) staffPosition1--;\n\t\n\t      y1 += ctxt.glyphPunctumHeight * ctxt.glyphScaling / 2.2;\n\t    }\n\t\n\t    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    _this2.bounds.x = 0;\n\t    _this2.bounds.y = y0;\n\t    _this2.bounds.width = ctxt.neumeLineWeight;\n\t    _this2.bounds.height = y1 - y0;\n\t\n\t    _this2.origin.x = 0;\n\t    _this2.origin.y = 0;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(NeumeLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return NeumeLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar VirgaLineVisualizer = exports.VirgaLineVisualizer = function (_ChantLayoutElement3) {\n\t  _inherits(VirgaLineVisualizer, _ChantLayoutElement3);\n\t\n\t  function VirgaLineVisualizer(ctxt, note) {\n\t    _classCallCheck(this, VirgaLineVisualizer);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (VirgaLineVisualizer.__proto__ || Object.getPrototypeOf(VirgaLineVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n\t    var y1;\n\t\n\t    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;else y1 = y0 + ctxt.staffInterval * 2.7;\n\t\n\t    _this3.bounds.x = 0;\n\t    _this3.bounds.y = y0;\n\t    _this3.bounds.width = ctxt.neumeLineWeight;\n\t    _this3.bounds.height = y1 - y0;\n\t\n\t    _this3.origin.x = 0;\n\t    _this3.origin.y = 0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(VirgaLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return VirgaLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar GlyphVisualizer = exports.GlyphVisualizer = function (_ChantLayoutElement4) {\n\t  _inherits(GlyphVisualizer, _ChantLayoutElement4);\n\t\n\t  function GlyphVisualizer(ctxt, glyphCode) {\n\t    _classCallCheck(this, GlyphVisualizer);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (GlyphVisualizer.__proto__ || Object.getPrototypeOf(GlyphVisualizer)).call(this));\n\t\n\t    _this4.glyph = null;\n\t\n\t    _this4.setGlyph(ctxt, glyphCode);\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(GlyphVisualizer, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      var _this5 = this;\n\t\n\t      if (this.glyphCode !== glyphCode) {\n\t        if (typeof glyphCode === \"undefined\" || glyphCode === null || glyphCode === \"\") this.glyphCode = GlyphCode.None;else this.glyphCode = glyphCode;\n\t\n\t        this.glyph = _ExsurgeGlyphs.Glyphs[this.glyphCode];\n\t\n\t        // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n\t        if (!ctxt.defs.hasOwnProperty(this.glyphCode)) {\n\t          var getDefProps = function getDefProps() {\n\t            var options = {\n\t              id: _this5.glyphCode,\n\t              class: \"glyph\"\n\t            };\n\t            if (ctxt.scaleDefs === true) {\n\t              options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t            }\n\t            return options;\n\t          };\n\t          var makeDef = function makeDef() {\n\t            var options = getDefProps();\n\t            // create the ref\n\t            ctxt.defs[_this5.glyphCode] = QuickSvg.createFragment(\"g\", options, QuickSvg.svgFragmentForGlyph(_this5.glyph));\n\t\n\t            if (ctxt.defsNode) ctxt.defsNode.appendChild(QuickSvg.createNode(\"g\", options, QuickSvg.nodesForGlyph(_this5.glyph)));\n\t          };\n\t          makeDef.makeSvgTree = function () {\n\t            return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", getDefProps()].concat(_toConsumableArray(QuickSvg.nodesForGlyph(_this5.glyph, \"createSvgTree\"))));\n\t          };\n\t          makeDef();\n\t          ctxt.makeDefs.push(makeDef);\n\t        }\n\t\n\t        this.align = this.glyph.align;\n\t      }\n\t\n\t      this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n\t      this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = -this.origin.y;\n\t      this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n\t      this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n\t    }\n\t  }, {\n\t    key: \"setStaffPosition\",\n\t    value: function setStaffPosition(ctxt, staffPosition) {\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      var x = this.bounds.x + this.origin.x;\n\t      var y = this.bounds.y + this.origin.y;\n\t      canvasCtxt.translate(x, y);\n\t      canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\t\n\t      for (var i = 0; i < this.glyph.paths.length; i++) {\n\t        var path = this.glyph.paths[i];\n\t        canvasCtxt.fillStyle = path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n\t        canvasCtxt.fill(new Path2D(path.data));\n\t      }\n\t\n\t      canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n\t      canvasCtxt.translate(-x, -y);\n\t    }\n\t  }, {\n\t    key: \"getSvgAttributes\",\n\t    value: function getSvgAttributes(ctxt, source) {\n\t      var className = \"\";\n\t      if (/^Porrectus\\d$/.test(this.glyphCode)) {\n\t        var notes = source.neume.notes,\n\t            noteIndex = notes.indexOf(source),\n\t            nextNote = notes[noteIndex + 1];\n\t        className = source.selected ? nextNote.selected ? \"selected\" : \"selectedA\" : nextNote.selected ? \"selectedB\" : \"\";\n\t      } else {\n\t        var isSelected = source && (source.selected || source.model && source.model.selected);\n\t        className = isSelected ? \"selected\" : \"\";\n\t      }\n\t      var result = {\n\t        \"xlink:href\": \"#\" + this.glyphCode,\n\t        class: className\n\t      };\n\t      if (source) {\n\t        result[\"source-index\"] = source.sourceIndex;\n\t        result[\"element-index\"] = source.elementIndex;\n\t      }\n\t      if (ctxt.scaleDefs === true) {\n\t        result.x = this.bounds.x + this.origin.x;\n\t        result.y = this.bounds.y + this.origin.y;\n\t      } else {\n\t        result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n\t        result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n\t        result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      attributes.source = source;\n\t      return QuickSvg.createNode(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      if (source) attributes.source = source;\n\t      return QuickSvg.createSvgTree(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt, source) {\n\t      return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n\t    }\n\t  }]);\n\t\n\t  return GlyphVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar RoundBraceVisualizer = exports.RoundBraceVisualizer = function (_ChantLayoutElement5) {\n\t  _inherits(RoundBraceVisualizer, _ChantLayoutElement5);\n\t\n\t  function RoundBraceVisualizer(ctxt, x1, x2, y, isAbove) {\n\t    _classCallCheck(this, RoundBraceVisualizer);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (RoundBraceVisualizer.__proto__ || Object.getPrototypeOf(RoundBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this6.isAbove = isAbove;\n\t    _this6.braceHeight = 3 * ctxt.staffInterval / 2;\n\t\n\t    _this6.bounds = new _ExsurgeCore.Rect(x1, isAbove ? y - _this6.braceHeight : y, x2 - x1, _this6.braceHeight);\n\t\n\t    _this6.origin.x = 0;\n\t    _this6.origin.y = 0;\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(RoundBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, dx, dy;\n\t\n\t      dx = width / 6;\n\t      dy = this.bounds.height;\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        dy = -dy;\n\t      } else {\n\t        y = this.bounds.y;\n\t      }\n\t\n\t      //Calculate Control Points of path,\n\t      var cx1 = x1 + dx;\n\t      var cy = y + dy;\n\t      var cx2 = x2 - dx;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" C \" + cx1.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + cx2.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + x2.toFixed(dp) + \" \" + y.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return RoundBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar CurlyBraceVisualizer = exports.CurlyBraceVisualizer = function (_ChantLayoutElement6) {\n\t  _inherits(CurlyBraceVisualizer, _ChantLayoutElement6);\n\t\n\t  function CurlyBraceVisualizer(ctxt, x1, x2, y) {\n\t    var isAbove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\t    var addAcuteAccent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\t\n\t    _classCallCheck(this, CurlyBraceVisualizer);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (CurlyBraceVisualizer.__proto__ || Object.getPrototypeOf(CurlyBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this7.isAbove = isAbove;\n\t    _this7.braceHeight = ctxt.staffInterval / 2;\n\t\n\t    // y is the actual vertical start of the brace (left hand side)\n\t    // thus for a brace over notes, bounds.y is the bottom of brace,\n\t    // but for a brace under the notes, y is simply the y passed in.\n\t    if (isAbove) y -= _this7.braceHeight;\n\t\n\t    var bounds = new _ExsurgeCore.Rect(x1, y, x2 - x1, _this7.braceHeight);\n\t\n\t    if (addAcuteAccent && isAbove) {\n\t      _this7.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n\t      _this7.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n\t      _this7.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\t\n\t      bounds.union(_this7.accent.bounds);\n\t    }\n\t\n\t    _this7.bounds = bounds;\n\t\n\t    _this7.origin.x = 0;\n\t    _this7.origin.y = 0;\n\t    return _this7;\n\t  }\n\t\n\t  _createClass(CurlyBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // code below inspired by: https://gist.github.com/alexhornbake\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\t\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, h;\n\t\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        h = -this.braceHeight;\n\t      } else {\n\t        y = this.bounds.y;\n\t        h = this.braceHeight;\n\t      }\n\t\n\t      // calculate Control Points of path\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * width;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * width;\n\t      var ty1 = y + h;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * width;\n\t      var qy4 = y + (1 - q) * h;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x1.toFixed(dp) + \" \" + qy1.toFixed(dp) + \" \" + qx2.toFixed(dp) + \" \" + qy2.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp) + \" M \" + x2.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x2.toFixed(dp) + \" \" + qy3.toFixed(dp) + \" \" + qx4.toFixed(dp) + \" \" + qy4.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return CurlyBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar TextSpan = exports.TextSpan = function () {\n\t  function TextSpan(text, properties, activeTags) {\n\t    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\t\n\t    _classCallCheck(this, TextSpan);\n\t\n\t    if (typeof properties === \"undefined\" || properties === null) properties = {};\n\t\n\t    this.text = text;\n\t    this.properties = properties;\n\t    this.activeTags = activeTags || [];\n\t    this.index = index;\n\t  }\n\t\n\t  _createClass(TextSpan, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new TextSpan(this.text, this.properties, this.activeTags, this.index);\n\t    }\n\t  }]);\n\t\n\t  return TextSpan;\n\t}();\n\t\n\tfunction MarkupStackFrame(tagName, startIndex) {\n\t  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t  this.tagName = tagName;\n\t  this.startIndex = startIndex;\n\t  this.properties = properties;\n\t}\n\t\n\tMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex) {\n\t  return new MarkupStackFrame(tagName, startIndex, ctxt.fontStyleDictionary[tagName]);\n\t};\n\t\n\t// for escaping html strings before they go into the svgs\n\t// adapted from http://stackoverflow.com/a/12034334/5720160\n\tvar __subsForTspans = {\n\t  \"&\": \"&amp;\",\n\t  \"<\": \"&lt;\",\n\t  \">\": \"&gt;\"\n\t};\n\t\n\tvar TextElement = exports.TextElement = function (_ChantLayoutElement7) {\n\t  _inherits(TextElement, _ChantLayoutElement7);\n\t\n\t  function TextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TextElement);\n\t\n\t    // set these to some sane values for now...\n\t    var _this8 = _possibleConstructorReturn(this, (TextElement.__proto__ || Object.getPrototypeOf(TextElement)).call(this));\n\t\n\t    _this8.bounds.x = 0;\n\t    _this8.bounds.y = 0;\n\t    _this8.bounds.width = 0;\n\t    _this8.bounds.height = 0;\n\t    _this8.origin.x = 0;\n\t    _this8.origin.y = 0;\n\t\n\t    _this8.fontFamily = fontFamily;\n\t    _this8.fontSize = fontSize;\n\t    _this8.textAnchor = textAnchor;\n\t    _this8.sourceIndex = sourceIndex;\n\t    _this8.sourceGabc = sourceGabc;\n\t    _this8.dominantBaseline = \"baseline\"; // default placement\n\t\n\t    _this8.generateSpansFromText(ctxt, text);\n\t\n\t    _this8.recalculateMetrics(ctxt);\n\t    return _this8;\n\t  }\n\t\n\t  _createClass(TextElement, [{\n\t    key: \"getFromScore\",\n\t    value: function getFromScore(score) {\n\t      return this.textType.getFromScore(score, this);\n\t    }\n\t  }, {\n\t    key: \"generateSpansFromText\",\n\t    value: function generateSpansFromText(ctxt, text) {\n\t      var _this9 = this;\n\t\n\t      text = text.replace(/\\s+/g, \" \");\n\t      this.text = \"\";\n\t      this.spans = [];\n\t\n\t      // save ourselves a lot of grief for a very common text:\n\t      if (text === \"*\" || text === \"†\") {\n\t        this.spans.push(new TextSpan(text));\n\t        return;\n\t      }\n\t\n\t      var markupStack = [];\n\t      var spanStartIndex = 0;\n\t      var newLineInNextSpan = 0;\n\t\n\t      var filterFrames = function filterFrames(frame, symbol) {\n\t        return frame.Symbol === symbol;\n\t      };\n\t\n\t      var closeSpan = function closeSpan(spanText, index, extraProperties) {\n\t        if (spanText === \"\" && !_this9.dropCap) return;\n\t\n\t        _this9.text += spanText;\n\t\n\t        var properties = {};\n\t        for (var i = 0; i < markupStack.length; i++) {\n\t          Object.assign(properties, markupStack[i].properties);\n\t        }if (extraProperties) Object.assign(properties, extraProperties);\n\t        if (newLineInNextSpan) {\n\t          properties.newLine = newLineInNextSpan;\n\t          newLineInNextSpan = 0;\n\t        }\n\t\n\t        _this9.spans.push(new TextSpan(spanText, properties, markupStack.map(function (frame) {\n\t          return frame.tagName;\n\t        }), index));\n\t      };\n\t\n\t      var markupRegex = /(<br\\/?>)|<sp>([arv])\\/<\\/sp>|([arv])\\/\\.|(?:([*_^%])|<(\\/)?([bciu]|ul|sc)>)(?=(?:(.+?)(?:\\4|<\\/\\6>))?)/gi;\n\t\n\t      var match = null;\n\t      var openedAsterisk = false;\n\t      var closeCurrentSpan = function closeCurrentSpan() {\n\t        return closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n\t      };\n\t      while (match = markupRegex.exec(text)) {\n\t        var _match = match,\n\t            _match2 = _slicedToArray(_match, 8),\n\t            newLine = _match2[1],\n\t            specialChar = _match2[2],\n\t            specialChar2 = _match2[3],\n\t            markupSymbol = _match2[4],\n\t            closingTag = _match2[5],\n\t            tagName = _match2[6],\n\t            enclosedText = _match2[7];\n\t\n\t        specialChar = specialChar || specialChar2;\n\t        // non-matching symbols first\n\t        if (newLine) {\n\t          // close the current span, if any:\n\t          if (match.index > spanStartIndex) {\n\t            closeCurrentSpan();\n\t          }\n\t          // add the newline span:\n\t          newLineInNextSpan++;\n\t        } else if (specialChar) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.textBeforeSpecialChar + ctxt.specialCharText(specialChar) + ctxt.textAfterSpecialChar, match.index, ctxt.specialCharProperties);\n\t        } else {\n\t          // otherwise we're dealing with matching markup delimeters\n\t          if (markupSymbol === \"*\") {\n\t            // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n\t            if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n\t              openedAsterisk = true;\n\t            } else if (openedAsterisk) {\n\t              openedAsterisk = false;\n\t            } else {\n\t              // actually use the asterisk, since it doesn't have a matching closing asterisk\n\t              continue;\n\t            }\n\t          }\n\t          if (markupSymbol) {\n\t            tagName = ctxt.markupSymbolDictionary[markupSymbol];\n\t            if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t              closingTag = true;\n\t            }\n\t          }\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t            if (closingTag) {\n\t              // group close\n\t              closeCurrentSpan();\n\t              markupStack.pop();\n\t            }\n\t          } else if (markupStack.filter(filterFrames).length > 0) {\n\t            // trying to open a recursive group (or forgot to close a previous group)\n\t            // in either case, we just unwind to the previous stack frame\n\t            spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n\t            markupStack.pop();\n\t            continue;\n\t          } else {\n\t            closeCurrentSpan();\n\t            if (closingTag) {\n\t              // out of order group close:\n\t              var index = markupStack.findIndex(function (frame) {\n\t                return frame.tagName === tagName;\n\t              });\n\t              if (index >= 0) {\n\t                markupStack.splice(index, 1);\n\t              }\n\t            } else {\n\t              // group open\n\t              markupStack.push(MarkupStackFrame.createStackFrame(ctxt, tagName, match.index));\n\t            }\n\t          }\n\t        }\n\t\n\t        // advance the start index past the current markup\n\t        spanStartIndex = match.index + match[0].length;\n\t      }\n\t\n\t      // if we finished matches, and there is still some text left,\n\t      // or if we haven't generated any spans yet, create one final run\n\t      if (spanStartIndex < text.length || this.spans.length === 0) closeSpan(text.slice(spanStartIndex), spanStartIndex);\n\t    }\n\t  }, {\n\t    key: \"getCanvasFontForProperties\",\n\t    value: function getCanvasFontForProperties(ctxt) {\n\t      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var font = \"\";\n\t      if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n\t      if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n\t      if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n\t      var fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n\t      if (/%$/.test(properties[\"font-size\"])) {\n\t        fontSize *= this.fontSize(ctxt) / 100;\n\t      }\n\t      font += fontSize * (this.resize || 1) + \"px \";\n\t      font += properties[\"font-family\"] || this.fontFamily(ctxt);\n\t      return font;\n\t    }\n\t  }, {\n\t    key: \"measureSubstringBBox\",\n\t    value: function measureSubstringBBox(ctxt, length) {\n\t      return this.measureSubstring(ctxt, length, true);\n\t    }\n\t\n\t    // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n\t\n\t  }, {\n\t    key: \"measureSubstring\",\n\t    value: function measureSubstring(ctxt, length) {\n\t      var returnBBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      if (length === 0) return 0;\n\t      if (!length) length = Infinity;\n\t      if (length < 0) {\n\t        var lines = -length;\n\t        length = Infinity;\n\t      }\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      var width = 0;\n\t      var widths = [];\n\t      var newLineSpans = [this.spans[0]];\n\t      var subStringLength = 0;\n\t      var numLines = 1;\n\t      var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n\t      var bbox = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i],\n\t            myText = span.text.slice(0, length - subStringLength);\n\t        if (span.properties.newLine) {\n\t          numLines += parseInt(span.properties.newLine) || 1;\n\t          if (!lines && this.rightAligned === true && length === Infinity) {\n\t            newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t            newLineSpans.push(span);\n\t          } else if (--lines === 0) break;\n\t          widths.push(width);\n\t          width = 0;\n\t        }\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t          canvasCtxt.font = this.getCanvasFontForProperties(ctxt, span.properties);\n\t          var metrics = canvasCtxt.measureText(myText, width, fontSize * (numLines - 1));\n\t          if (\"actualBoundingBoxAscent\" in metrics) {\n\t            var left = metrics.actualBoundingBoxLeft;\n\t            bbox.union(new _ExsurgeCore.Rect(width - left, fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent, metrics.width + left, metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent));\n\t            if (this instanceof DropCap) {\n\t              width += Math.max(0, left);\n\t            }\n\t          } else {\n\t            bbox.union(new _ExsurgeCore.Rect(width, fontSize * (numLines - 2), metrics.width, fontSize));\n\t          }\n\t          width += metrics.width;\n\t        } else if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS && ctxt.fontDictionary) {\n\t          // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n\t          var font = ctxt.getFontForProperties(span.properties, span.properties[\"font-family\"] || this.fontFamily(ctxt));\n\t          var options = { features: { liga: true } };\n\t          if (span.properties[\"font-variant\"] === \"small-caps\") {\n\t            options.features.smcp = true;\n\t          }\n\t          var spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n\t          if (/%$/.test(span.properties[\"font-size\"])) {\n\t            spanFontSize *= fontSize / 100;\n\t          }\n\t          var subBbox = font.getPath(myText, width, fontSize * (numLines - 1), spanFontSize, options).getBoundingBox();\n\t          var subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\t\n\t          bbox.union(new _ExsurgeCore.Rect(width + subBbox.x1, subBbox.y1, subWidth - subBbox.x1, subBbox.y2 - subBbox.y1));\n\t          width += subWidth;\n\t          if (this instanceof DropCap) {\n\t            width -= subBbox.x1;\n\t          }\n\t        }\n\t        subStringLength += myText.length;\n\t        if (subStringLength === length) break;\n\t      }\n\t      if (!lines && width && newLineSpans.length && this.rightAligned === true && length === Infinity) {\n\t        newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t      }\n\t      width = Math.max.apply(Math, [width].concat(widths));\n\t      if (returnBBox === true) {\n\t        var height = bbox.height;\n\t        var y = bbox.y,\n\t            x = bbox.x;\n\t        return { width: width, height: height, x: x, y: y };\n\t      } else {\n\t        return width;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      if (resetNewLines) {\n\t        delete this.maxWidth;\n\t        delete this.firstLineMaxWidth;\n\t        delete this.rightAligned;\n\t        delete this.resize;\n\t        delete this.numLines;\n\t        // replace newlines with spaces\n\t        this.spans.forEach(function (span) {\n\t          delete span.properties.xOffset;\n\t          if (span.properties.newLine === true) {\n\t            delete span.properties.newLine;\n\t            span.text = \" \" + span.text;\n\t          }\n\t        });\n\t      }\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = 0;\n\t\n\t      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t        while (ctxt.svgTextMeasurer.firstChild) {\n\t          ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n\t        }ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n\t        ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\t\n\t        var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n\t        this.bounds.width = bbox.width;\n\t        this.bounds.height = bbox.height;\n\t        this.origin.y = -bbox.y; // offset to baseline from top\n\t        this.origin.x = -bbox.x;\n\t      } else {\n\t        var _bbox = this.measureSubstringBBox(ctxt);\n\t        this.bounds.width = _bbox.width;\n\t        this.bounds.height = _bbox.height;\n\t        this.origin.y = -_bbox.y;\n\t        this.origin.x = -_bbox.x;\n\t      }\n\t      this.numLines = this.spans.reduce(function (result, span) {\n\t        return result + (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0);\n\t      }, 1);\n\t    }\n\t  }, {\n\t    key: \"setMaxWidth\",\n\t    value: function setMaxWidth(ctxt, maxWidth) {\n\t      var firstLineMaxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxWidth;\n\t\n\t      if (this.spans.filter(function (s) {\n\t        return s.properties.newLine === true;\n\t      }).length) {\n\t        // first get rid of any new lines set from a previous maxWidth\n\t        this.recalculateMetrics(ctxt);\n\t      }\n\t      if (this.bounds.width > maxWidth) {\n\t        this.maxWidth = maxWidth;\n\t        var percentage = maxWidth / this.bounds.width;\n\t        if (this instanceof Lyric && percentage >= 0.85) {\n\t          this.resize = percentage;\n\t        } else {\n\t          if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n\t          this.firstLineMaxWidth = firstLineMaxWidth;\n\t          var lastWidth = 0,\n\t              lastMatch = null,\n\t              regex = /\\s+|$/g,\n\t              max = firstLineMaxWidth,\n\t              match;\n\t          while ((match = regex.exec(this.text)) && (!lastMatch || match.index > lastMatch.index)) {\n\t            var width = this.measureSubstring(ctxt, match.index);\n\t            if (width > max && lastMatch) {\n\t              var _spans;\n\t\n\t              var spanIndex = 0,\n\t                  length = 0;\n\t              while (length < lastMatch.index && spanIndex < this.spans.length) {\n\t                var span = this.spans[spanIndex++];\n\t                length += span.text.length + (span.properties.newLine ? 1 : 0);\n\t              }\n\t              if (length > lastMatch.index) {\n\t                var _span = this.spans[--spanIndex];\n\t                length -= _span.text.length;\n\t              }\n\t              var splitSpan = this.spans[spanIndex],\n\t                  textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n\t                  textRight = splitSpan.text.slice(lastMatch.index + lastMatch[0].length - length),\n\t                  newSpans = [];\n\t              this.rightAligned = max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n\t              if (textLeft) newSpans.push(new TextSpan(textLeft, splitSpan.properties, splitSpan.activeTags));\n\t              if (textRight) {\n\t                newSpans.push(new TextSpan(textRight, Object.assign({}, splitSpan.properties, { newLine: true }), splitSpan.activeTags));\n\t              } else if (this.spans[spanIndex + 1]) {\n\t                this.spans[spanIndex + 1].properties.newLine = true;\n\t              }\n\t              (_spans = this.spans).splice.apply(_spans, [spanIndex, 1].concat(newSpans));\n\t              this.needsLayout = true;\n\t              max = maxWidth;\n\t              if (match.index === this.text.length || this.measureSubstring(ctxt) <= maxWidth) break;\n\t              width = 0;\n\t              match = lastMatch = null;\n\t            }\n\t            lastWidth = width;\n\t            lastMatch = match;\n\t          }\n\t        }\n\t        this.recalculateMetrics(ctxt, false);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.textType && this.textType.cssClass || \"\";\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      return ctxt.baseTextStyle || {};\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";else canvasCtxt.textAlign = \"start\";\n\t\n\t      var translateWidth = 0,\n\t          translateHeight = 0;\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var xOffset = span.properties.xOffset || 0;\n\t        if (span.properties.newLine) {\n\t          count = parseInt(span.properties.newLine) || 1;\n\t          canvasCtxt.translate(translateWidth + xOffset, this.fontSize(ctxt) * count);\n\t          translateWidth = -xOffset;\n\t          translateHeight -= this.fontSize(ctxt);\n\t        } else if (xOffset) {\n\t          canvasCtxt.translate(translateWidth + xOffset, 0);\n\t          translateWidth = -xOffset;\n\t        }\n\t        var properties = Object.assign({}, this.getExtraStyleProperties(ctxt), span.properties);\n\t        canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n\t        canvasCtxt.fillStyle = properties.fill || \"#000\";\n\t        canvasCtxt.fillText(span.text, this.bounds.x, this.bounds.y, span.properties.textLength || undefined);\n\t        var metrics = canvasCtxt.measureText(span.text, this.bounds.x, this.bounds.y);\n\t        translateWidth -= metrics.width;\n\t        canvasCtxt.translate(metrics.width, 0);\n\t      }\n\t      canvasCtxt.translate(translateWidth, translateHeight);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        \"source-index\": this.sourceIndex,\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        class: this.getCssClasses().trim(),\n\t        \"text-anchor\": this.textAnchor\n\t        //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n\t      };\n\t    }\n\t  }, {\n\t    key: \"getSpanOptions\",\n\t    value: function getSpanOptions(span, ctxt) {\n\t      var useStyleObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      var options = {\n\t        \"source-index\": span.index,\n\t        style: useStyleObject ? Object.assign({}, span.properties) : (0, _ExsurgeCore.getCssForProperties)(span.properties)\n\t      };\n\t\n\t      if (span.properties.newLine) {\n\t        var xOffset = span.properties.xOffset || 0;\n\t        options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n\t        options.x = this.bounds.x + xOffset;\n\t      } else if (span.properties.xOffset) {\n\t        options.x = this.bounds.x + span.properties.xOffset;\n\t      }\n\t      if (span.properties.textLength) {\n\t        options.textLength = span.properties.textLength;\n\t        options.lengthAdjust = \"spacingAndGlyphs\";\n\t        options.y = this.bounds.y;\n\t      }\n\t      if (this.resize) {\n\t        options[\"font-size\"] = span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n\t      }\n\t      // if (ctxt.setFontFamilyAttributes) {\n\t      //   options[\"font-family\"] =\n\t      //     span.properties[\"font-family\"] ||\n\t      //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n\t      //   let properties = Object.assign({}, span.properties);\n\t      //   delete properties[\"font-weight\"];\n\t      //   delete properties[\"font-style\"];\n\t      //   options[\"style\"] = getCssForProperties(properties);\n\t      // } else {\n\t      //   options[\"style\"] = getCssForProperties(span.properties);\n\t      // }\n\t\n\t      return options;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options = this.getSpanOptions(span, ctxt);\n\t\n\t        spans.push(QuickSvg.createNode(\"tspan\", _options, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(this.getExtraStyleProperties(ctxt));\n\t      options.source = this;\n\t\n\t      return this.svgNode = QuickSvg.createNode(\"text\", options, spans);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options2 = this.getSpanOptions(span, ctxt, true);\n\t\n\t        spans.push(QuickSvg.createSvgTree(\"tspan\", _options2, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = this.getExtraStyleProperties(ctxt);\n\t      options.source = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"text\", options].concat(spans));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var spans = \"\";\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options3 = this.getSpanOptions(span, ctxt);\n\t\n\t        spans += QuickSvg.createFragment(\"tspan\", _options3, TextElement.escapeForTspan(span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(this.getExtraStyleProperties(ctxt));\n\t      if (ctxt.setFontFamilyAttributes) {\n\t        options[\"font-size\"] = this.fontSize(ctxt);\n\t      }\n\t\n\t      return QuickSvg.createFragment(\"text\", options, spans);\n\t    }\n\t  }], [{\n\t    key: \"escapeForTspan\",\n\t    value: function escapeForTspan(string) {\n\t      return String(string).replace(/[&<>]/g, function (s) {\n\t        return __subsForTspans[s];\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return TextElement;\n\t}(ChantLayoutElement);\n\t\n\tvar LyricType = exports.LyricType = {\n\t  SingleSyllable: 0,\n\t  BeginningSyllable: 1,\n\t  MiddleSyllable: 2,\n\t  EndingSyllable: 3,\n\t\n\t  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n\t};\n\t\n\tvar LyricArray = exports.LyricArray = {\n\t  getLeft: function getLeft(lyricArray) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MAX_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      if (lyricArray[i]) x = Math.min(x, lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x);\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  getRight: function getRight(lyricArray, presumeConnectorNeeded) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MIN_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      var l = lyricArray[i];\n\t      if (l) x = Math.max(x, l.notation.bounds.x + l.bounds.x + l.bounds.width + (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector ? l.getConnectorWidth() : 0));\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  hasOnlyOneLyric: function hasOnlyOneLyric(lyricArray) {\n\t    return lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    }).length === 1;\n\t  },\n\t\n\t  indexOfLyric: function indexOfLyric(lyricArray) {\n\t    return lyricArray.indexOf(lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    })[0]);\n\t  },\n\t\n\t  mergeIn: function mergeIn(lyricArray, newLyrics) {\n\t    for (var i = 0; i < newLyrics.length; ++i) {\n\t      if (newLyrics[i].originalText || !lyricArray[i]) lyricArray[i] = newLyrics[i];\n\t    }\n\t  },\n\t\n\t  mergeInArray: function mergeInArray(lyricArray, notations) {\n\t    for (var i = 0; i < notations.length; ++i) {\n\t      this.mergeIn(lyricArray, notations[i].lyrics);\n\t    }\n\t  },\n\t\n\t  setNotation: function setNotation(lyricArray, notation) {\n\t    notation.lyrics = lyricArray;\n\t    for (var i = 0; i < lyricArray.length; ++i) {\n\t      lyricArray[i].notation = notation;\n\t    }\n\t  }\n\t};\n\t\n\tvar Lyric = exports.Lyric = function (_TextElement) {\n\t  _inherits(Lyric, _TextElement);\n\t\n\t  function Lyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t    _classCallCheck(this, Lyric);\n\t\n\t    var _this10 = _possibleConstructorReturn(this, (Lyric.__proto__ || Object.getPrototypeOf(Lyric)).call(this, ctxt, (ctxt.textStyles.lyric.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.lyric.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.lyric.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this10.textType = TextTypes.lyric;\n\t\n\t    // save the original text in case we need to later use the lyric\n\t    // in a dropcap...\n\t    _this10.originalText = text;\n\t\n\t    _this10.notation = notation;\n\t    _this10.notations = notations;\n\t\n\t    if (typeof lyricType === \"undefined\" || lyricType === null || lyricType === \"\") _this10.lyricType = LyricType.SingleSyllable;else _this10.lyricType = lyricType;\n\t\n\t    // Lyrics keep track of how to center them on notation elements.\n\t    // centerTextIndex is the index in this.text where the centering starts,\n\t    // centerLength is how many characters comprise the center point.\n\t    // performLayout will do the processing\n\t    _this10.centerStartIndex = -1;\n\t    _this10.centerLength = text.length;\n\t\n\t    _this10.needsConnector = false;\n\t\n\t    // Lyrics can have their own language defined, which affects the alignment\n\t    // of the text with the notation element\n\t    _this10.language = null;\n\t\n\t    if (_this10.allowsConnector) _this10.connectorSpan = new TextSpan(ctxt.syllableConnector);\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(Lyric, [{\n\t    key: \"allowsConnector\",\n\t    value: function allowsConnector() {\n\t      return this.lyricType === LyricType.BeginningSyllable || this.lyricType === LyricType.MiddleSyllable;\n\t    }\n\t  }, {\n\t    key: \"setForceConnector\",\n\t    value: function setForceConnector(force) {\n\t      this.forceConnector = force && this.allowsConnector();\n\t    }\n\t  }, {\n\t    key: \"setNeedsConnector\",\n\t    value: function setNeedsConnector(needs, width) {\n\t      if (needs === true || this.forceConnector) {\n\t        this.needsConnector = true;\n\t        if (typeof width !== \"undefined\") {\n\t          this.setConnectorWidth(width);\n\t        } else {\n\t          this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t        }\n\t\n\t        if (this.spans.length > 0 && this.spans[this.spans.length - 1] !== this.connectorSpan) this.spans.push(this.connectorSpan);\n\t      } else {\n\t        this.connectorWidth = 0;\n\t        this.needsConnector = false;\n\t        this.bounds.width = this.widthWithoutConnector;\n\t\n\t        var span = this.spans.pop();\n\t        if (span && span !== this.connectorSpan) this.spans.push(span);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setConnectorWidth\",\n\t    value: function setConnectorWidth(width) {\n\t      this.connectorWidth = width;\n\t      this.connectorSpan.properties = Object.assign({}, this.connectorSpan.properties, { textLength: width });\n\t      if (this.needsConnector) this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t    }\n\t  }, {\n\t    key: \"getConnectorWidth\",\n\t    value: function getConnectorWidth() {\n\t      return this.connectorWidth || this.defaultConnectorWidth;\n\t    }\n\t  }, {\n\t    key: \"getLeft\",\n\t    value: function getLeft() {\n\t      return this.notation.bounds.x + this.bounds.x;\n\t    }\n\t  }, {\n\t    key: \"getRight\",\n\t    value: function getRight() {\n\t      return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      this.setNeedsConnector();\n\t\n\t      _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"recalculateMetrics\", this).call(this, ctxt, resetNewLines);\n\t\n\t      this.widthWithoutConnector = this.bounds.width;\n\t\n\t      this.connectorWidth = 0;\n\t      this.defaultConnectorWidth = ctxt.hyphenWidth;\n\t\n\t      var activeLanguage = this.language || ctxt.defaultLanguage;\n\t\n\t      // calculate the point where the text lines up to the staff notation\n\t      // and offset the rect that much. By default we just center the text,\n\t      // but the logic below allows for smarter lyric alignment based\n\t      // on manual override or language control.\n\t      var offset = this.widthWithoutConnector / 2,\n\t          x1,\n\t          x2,\n\t          vowelSegmentWidth = this.widthWithoutConnector;\n\t\n\t      // some simple checks for sanity, and disable manual centering if the numbers are bad\n\t      if (this.centerStartIndex >= 0 && (this.centerStartIndex >= this.text.length || this.centerLength < 0 || this.centerStartIndex + this.centerLength > this.text.length)) this.centerStartIndex = -1;\n\t\n\t      if (this.text.length === 0) {\n\t        // if we have no text to work with, then there's nothing to do!\n\t        // Unless it's a drop cap, in which case we center the connector:\n\t        if (this.dropCap && this.originalText) {\n\t          offset = ctxt.hyphenWidth / 2;\n\t          vowelSegmentWidth = ctxt.hyphenWidth;\n\t        }\n\t      } else if (this.centerStartIndex >= 0) {\n\t        // if we have manually overriden the centering logic for this lyric,\n\t        // then always use that.\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t          // svgTextMeasurer still has the current lyric in it...\n\t          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex);\n\t          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex + this.centerLength);\n\t        } else {\n\t          x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n\t          x2 = this.measureSubstring(ctxt, this.centerStartIndex + this.centerLength);\n\t        }\n\t        offset = (x1 + x2) / 2;\n\t        vowelSegmentWidth = x2 - x1;\n\t      } else {\n\t        // if it's a directive with no manual centering override, then\n\t        // just center the text.\n\t        if (this.lyricType !== LyricType.Directive) {\n\t          // only consider text content after the last space (if any)\n\t          var startIndex = this.text.lastIndexOf(\" \") + 1;\n\t\n\t          // unless there are no text characters following the space:\n\t          if (startIndex > 0 && !this.text.slice(startIndex).match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)) {\n\t            startIndex = 0;\n\t          }\n\t\n\t          // Non-directive elements are lined up to the chant notation based on vowel segments,\n\t          var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\t\n\t          if (result.found !== true) {\n\t            var match = this.text.slice(startIndex).match(/[a-z]+/i);\n\t            if (match) {\n\t              result.startIndex = startIndex + match.index;\n\t              result.length = match[0].length;\n\t            } else {\n\t              result.startIndex = startIndex;\n\t              result.length = this.text.length - startIndex;\n\t            }\n\t          }\n\t          if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t            // svgTextMeasurer still has the current lyric in it...\n\t            x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex);\n\t            x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex + result.length);\n\t          } else {\n\t            x1 = this.measureSubstring(ctxt, result.startIndex);\n\t            x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n\t          }\n\t          offset = (x1 + x2) / 2;\n\t          vowelSegmentWidth = x2 - x1;\n\t        }\n\t      }\n\t\n\t      this.vowelSegmentWidth = vowelSegmentWidth;\n\t\n\t      this.bounds.x = -offset;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = offset;\n\t    }\n\t  }, {\n\t    key: \"generateDropCap\",\n\t    value: function generateDropCap(ctxt) {\n\t      if (this.dropCap) return this.dropCap;\n\t      var dropCapSpan = this.spans[0].clone();\n\t      dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n\t      var dropCapLowerCase = dropCapSpan.text.toLowerCase();\n\t      // disallow any characters that do not change from .toUpperCase():\n\t      if (dropCapSpan.text === dropCapLowerCase) return null;\n\t\n\t      if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0) dropCapSpan.text = dropCapLowerCase;\n\t\n\t      var dropCap = this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex);\n\t      dropCap.spans = [dropCapSpan];\n\t      var dropCapSourceGabcLength = this.sourceGabc.match(/^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/)[0].length;\n\t      dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n\t      this.sourceIndex += dropCap.sourceGabc.length;\n\t      this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\t\n\t      this.spans[0].text = this.spans[0].text.slice(1);\n\t      this.text = this.text.slice(1);\n\t      this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\t\n\t      return dropCap;\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\t\n\t      return classes + _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      var props = _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getExtraStyleProperties\", this).call(this, ctxt);\n\t\n\t      if (this.lyricType === LyricType.Directive && ctxt.autoColor === true) props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\t\n\t      return props;\n\t    }\n\t  }]);\n\t\n\t  return Lyric;\n\t}(TextElement);\n\t\n\tvar ChoralSign = exports.ChoralSign = function (_TextElement2) {\n\t  _inherits(ChoralSign, _TextElement2);\n\t\n\t  function ChoralSign(ctxt, text, note, sourceIndex) {\n\t    _classCallCheck(this, ChoralSign);\n\t\n\t    var _this11 = _possibleConstructorReturn(this, (ChoralSign.__proto__ || Object.getPrototypeOf(ChoralSign)).call(this, ctxt, (ctxt.textStyles.choralSign.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.choralSign.font;\n\t    }, TextTypes.choralSign.size, \"start\", sourceIndex, text));\n\t\n\t    _this11.positionHint = MarkingPositionHint.Default;\n\t    _this11.note = note;\n\t    _this11.textType = TextTypes.choralSign;\n\t    return _this11;\n\t  }\n\t\n\t  _createClass(ChoralSign, [{\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      _get(ChoralSign.prototype.__proto__ || Object.getPrototypeOf(ChoralSign.prototype), \"recalculateMetrics\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.recalculateMetrics(ctxt);\n\t      this.bounds.x = this.note.bounds.x + Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\t\n\t      var offset = void 0,\n\t          staffPosition = void 0;\n\t      if (this.positionHint === MarkingPositionHint.Below) {\n\t        offset = -1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n\t      } else {\n\t        offset = 1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n\t      }\n\t      // if (staffPosition % 2 === 0) staffPosition += offset;\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n\t    }\n\t  }]);\n\t\n\t  return ChoralSign;\n\t}(TextElement);\n\t\n\tvar AboveLinesText = exports.AboveLinesText = function (_TextElement3) {\n\t  _inherits(AboveLinesText, _TextElement3);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function AboveLinesText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, AboveLinesText);\n\t\n\t    var _this12 = _possibleConstructorReturn(this, (AboveLinesText.__proto__ || Object.getPrototypeOf(AboveLinesText)).call(this, ctxt, (ctxt.textStyles.al.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.al.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.al.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this12.notation = notation;\n\t    _this12.textType = TextTypes.al;\n\t\n\t    _this12.padding = ctxt.staffInterval / 2;\n\t    return _this12;\n\t  }\n\t\n\t  return AboveLinesText;\n\t}(TextElement);\n\t\n\tvar TranslationText = exports.TranslationText = function (_TextElement4) {\n\t  _inherits(TranslationText, _TextElement4);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function TranslationText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, TranslationText);\n\t\n\t    var gabcSource = text;\n\t    var anchor = \"start\";\n\t    if (text === \"/\") {\n\t      text = \"\";\n\t      anchor = \"end\";\n\t    } else {\n\t      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n\t    }\n\t\n\t    var _this13 = _possibleConstructorReturn(this, (TranslationText.__proto__ || Object.getPrototypeOf(TranslationText)).call(this, ctxt, text, function (ctxt) {\n\t      return ctxt.textStyles.translation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.translation.size;\n\t    }, anchor, sourceIndex, gabcSource));\n\t\n\t    _this13.notation = notation;\n\t    _this13.textType = TextTypes.translation;\n\t\n\t    _this13.padding = ctxt.staffInterval / 2;\n\t    return _this13;\n\t  }\n\t\n\t  return TranslationText;\n\t}(TextElement);\n\t\n\tvar DropCap = exports.DropCap = function (_TextElement5) {\n\t  _inherits(DropCap, _TextElement5);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function DropCap(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, DropCap);\n\t\n\t    var _this14 = _possibleConstructorReturn(this, (DropCap.__proto__ || Object.getPrototypeOf(DropCap)).call(this, ctxt, (ctxt.textStyles.dropCap.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this14.textType = TextTypes.dropCap;\n\t\n\t    _this14.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n\t    return _this14;\n\t  }\n\t\n\t  return DropCap;\n\t}(TextElement);\n\t\n\tvar TitleTextElement = exports.TitleTextElement = function (_TextElement6) {\n\t  _inherits(TitleTextElement, _TextElement6);\n\t\n\t  function TitleTextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TitleTextElement);\n\t\n\t    return _possibleConstructorReturn(this, (TitleTextElement.__proto__ || Object.getPrototypeOf(TitleTextElement)).call(this, ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc));\n\t  }\n\t\n\t  return TitleTextElement;\n\t}(TextElement);\n\t\n\tvar Supertitle = exports.Supertitle = function (_TitleTextElement) {\n\t  _inherits(Supertitle, _TitleTextElement);\n\t\n\t  function Supertitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Supertitle);\n\t\n\t    var _this16 = _possibleConstructorReturn(this, (Supertitle.__proto__ || Object.getPrototypeOf(Supertitle)).call(this, ctxt, (ctxt.textStyles.supertitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this16.textType = TextTypes.supertitle;\n\t\n\t    _this16.padding = function (ctxt) {\n\t      return ctxt.textStyles.supertitle.size / 3;\n\t    };\n\t    return _this16;\n\t  }\n\t\n\t  return Supertitle;\n\t}(TitleTextElement);\n\t\n\tvar Title = exports.Title = function (_TitleTextElement2) {\n\t  _inherits(Title, _TitleTextElement2);\n\t\n\t  function Title(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Title);\n\t\n\t    var _this17 = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, ctxt, (ctxt.textStyles.title.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.title.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.title.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this17.textType = TextTypes.title;\n\t\n\t    _this17.padding = function (ctxt) {\n\t      return ctxt.textStyles.title.size / 3;\n\t    };\n\t    return _this17;\n\t  }\n\t\n\t  return Title;\n\t}(TitleTextElement);\n\t\n\tvar Subtitle = exports.Subtitle = function (_TitleTextElement3) {\n\t  _inherits(Subtitle, _TitleTextElement3);\n\t\n\t  function Subtitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Subtitle);\n\t\n\t    var _this18 = _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).call(this, ctxt, (ctxt.textStyles.subtitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this18.textType = TextTypes.subtitle;\n\t\n\t    _this18.padding = function (ctxt) {\n\t      return ctxt.textStyles.subtitle.size / 3;\n\t    };\n\t    return _this18;\n\t  }\n\t\n\t  return Subtitle;\n\t}(TitleTextElement);\n\t\n\tvar TextLeftRight = exports.TextLeftRight = function (_TitleTextElement4) {\n\t  _inherits(TextLeftRight, _TitleTextElement4);\n\t\n\t  function TextLeftRight(ctxt, text, type, sourceIndex) {\n\t    _classCallCheck(this, TextLeftRight);\n\t\n\t    var _this19 = _possibleConstructorReturn(this, (TextLeftRight.__proto__ || Object.getPrototypeOf(TextLeftRight)).call(this, ctxt, (ctxt.textStyles.leftRight.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.size;\n\t    }, type === \"textLeft\" ? \"start\" : \"end\", sourceIndex, text));\n\t\n\t    _this19.textType = TextTypes.leftRight;\n\t    _this19.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n\t    _this19.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n\t    _this19.padding = function (ctxt) {\n\t      return ctxt.textStyles.leftRight.size / 5;\n\t    };\n\t    return _this19;\n\t  }\n\t\n\t  _createClass(TextLeftRight, [{\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.extraClass + \" \" + _get(TextLeftRight.prototype.__proto__ || Object.getPrototypeOf(TextLeftRight.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return TextLeftRight;\n\t}(TitleTextElement);\n\t\n\tvar Annotation = exports.Annotation = function (_TextElement7) {\n\t  _inherits(Annotation, _TextElement7);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotation(ctxt, text) {\n\t    _classCallCheck(this, Annotation);\n\t\n\t    var _this20 = _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call(this, ctxt, (ctxt.textStyles.annotation.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.annotation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.annotation.size;\n\t    }, \"middle\"));\n\t\n\t    _this20.textType = TextTypes.annotation;\n\t    _this20.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n\t    _this20.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n\t    return _this20;\n\t  }\n\t\n\t  return Annotation;\n\t}(TextElement);\n\t\n\tvar Annotations = exports.Annotations = function (_ChantLayoutElement8) {\n\t  _inherits(Annotations, _ChantLayoutElement8);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotations(ctxt) {\n\t    _classCallCheck(this, Annotations);\n\t\n\t    var _this21 = _possibleConstructorReturn(this, (Annotations.__proto__ || Object.getPrototypeOf(Annotations)).call(this));\n\t\n\t    for (var _len2 = arguments.length, texts = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t      texts[_key2 - 1] = arguments[_key2];\n\t    }\n\t\n\t    _this21.annotations = texts.map(function (text) {\n\t      return new Annotation(ctxt, text);\n\t    });\n\t    _this21.padding = Math.max.apply(null, _this21.annotations.map(function (annotation) {\n\t      return annotation.padding;\n\t    }));\n\t    return _this21;\n\t  }\n\t\n\t  _createClass(Annotations, [{\n\t    key: \"updateBounds\",\n\t    value: function updateBounds(multiplier) {\n\t      if (!multiplier) multiplier = 1;\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.bounds.x += this.bounds.x * multiplier;\n\t        annotation.bounds.y += this.bounds.y * multiplier;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.recalculateMetrics(ctxt);\n\t        this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n\t        annotation.bounds.y += this.bounds.height;\n\t        this.bounds.height += annotation.bounds.height;\n\t        this.origin.y = this.origin.y || annotation.origin.y;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.updateBounds();\n\t      this.annotations.forEach(function (annotation) {\n\t        annotation.draw(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgNode(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgTree(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return { children: result };\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgFragment(ctxt);\n\t      }).join(\"\");\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Annotations;\n\t}(ChantLayoutElement);\n\t\n\tvar ChantNotationElement = exports.ChantNotationElement = function (_ChantLayoutElement9) {\n\t  _inherits(ChantNotationElement, _ChantLayoutElement9);\n\t\n\t  function ChantNotationElement() {\n\t    _classCallCheck(this, ChantNotationElement);\n\t\n\t    //double\n\t    var _this22 = _possibleConstructorReturn(this, (ChantNotationElement.__proto__ || Object.getPrototypeOf(ChantNotationElement)).call(this));\n\t\n\t    _this22.leadingSpace = 0.0;\n\t    _this22.trailingSpace = DefaultTrailingSpace;\n\t    _this22.keepWithNext = false;\n\t    _this22.needsLayout = true;\n\t\n\t    _this22.lyrics = [];\n\t\n\t    _this22.score = null; // the ChantScore\n\t    _this22.line = null; // the ChantLine\n\t\n\t    _this22.visualizers = [];\n\t    return _this22;\n\t  }\n\t\n\t  _createClass(ChantNotationElement, [{\n\t    key: \"hasLyrics\",\n\t    value: function hasLyrics() {\n\t      return this.lyrics.length !== 0;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsLeft\",\n\t    value: function getAllLyricsLeft() {\n\t      if (this.lyrics.length === 0) return this.bounds.right();\n\t\n\t      var x = Number.MAX_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsRight\",\n\t    value: function getAllLyricsRight() {\n\t      if (this.lyrics.length === 0) return this.bounds.x;\n\t\n\t      var x = Number.MIN_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t\n\t    // used by subclasses while building up the chant notations.\n\t\n\t  }, {\n\t    key: \"addVisualizer\",\n\t    value: function addVisualizer(chantLayoutElement) {\n\t      if (!chantLayoutElement.ignoreBounds) {\n\t        if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t      }\n\t\n\t      this.visualizers.push(chantLayoutElement);\n\t    }\n\t\n\t    // same as addVisualizer, except the element is unshifted to the front\n\t    // of the visualizer array rather than the end. This way, some\n\t    // visualizers can be placed behind the others...ledger lines for example.\n\t\n\t  }, {\n\t    key: \"prependVisualizer\",\n\t    value: function prependVisualizer(chantLayoutElement) {\n\t      if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t\n\t      this.visualizers.unshift(chantLayoutElement);\n\t    }\n\t\n\t    // chant notation elements are given an opportunity to perform their layout via this function.\n\t    // subclasses should call this function first in overrides of this function.\n\t    // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n\t    // all valid and prepared for higher level layout.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      if (typeof this.trailingSpace === \"function\") this.calculatedTrailingSpace = this.trailingSpace(ctxt);else this.calculatedTrailingSpace = this.trailingSpace;\n\t\n\t      // reset the bounds and the staff notations before doing a layout\n\t      this.visualizers = [];\n\t      this.bounds = new _ExsurgeCore.Rect(Infinity, Infinity, -Infinity, -Infinity);\n\t\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].recalculateMetrics(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].recalculateMetrics(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].recalculateMetrics(ctxt);\n\t      }\n\t    }\n\t\n\t    // some subclasses have internal dependencies on other notations (for example,\n\t    // a custos can depend on a later neume which it uses to set its height).\n\t    // subclasses can override this function so that when the notations are\n\t    // altered, the subclass can correctly invalidate (and later restore) its own\n\t    // depedencies\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t\n\t    // a helper function for subclasses to call after they are done performing layout...\n\t\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this23 = this;\n\t\n\t      this.bounds.x = 0;\n\t\n\t      var language = this.lyrics[0] && this.lyrics[0].language || ctxt.defaultLanguage;\n\t      // center the neume itself over the syllable, or just the first punctum\n\t      // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n\t      var calculateLyricX = language.centerNeume ? function (lyric) {\n\t        return lyric.bounds.x = _this23.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth ? _this23.bounds.width / 2 - lyric.origin.x : _this23.origin.x - lyric.origin.x;\n\t      } : function (lyric) {\n\t        return lyric.bounds.x = _this23.origin.x - lyric.origin.x;\n\t      };\n\t      this.lyrics.forEach(calculateLyricX);\n\t\n\t      this.needsLayout = false;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, 0);\n\t\n\t      for (var i = 0; i < this.visualizers.length; i++) {\n\t        this.visualizers[i].draw(ctxt);\n\t      }for (i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].draw(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].draw(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, 0);\n\t    }\n\t  }, {\n\t    key: \"getInnerSvgNodes\",\n\t    value: function getInnerSvgNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var inner = [];\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner.push(this.lyrics[i][functionName](ctxt));\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner.push(this.translationText[i][functionName](ctxt));\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner.push(this.alText[i][functionName](ctxt));\n\t      }if (this.visualizers.length) {\n\t        var visualizers = [];\n\t        for (var i = 0; i < this.visualizers.length; i++) {\n\t          visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\t        }if (functionName === \"createSvgTree\") {\n\t          inner.push(QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", { class: \"Notations\" }].concat(visualizers)));\n\t        } else {\n\t          inner.push(QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers));\n\t        }\n\t      }\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        // this.constructor.name will not be the same after being mangled by UglifyJS\n\t        class: \"ChantNotationElement \" + this.constructor.name,\n\t        transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createNode(\"g\", svgProps, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", svgProps].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var inner = \"\";\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner += this.lyrics[i].createSvgFragment(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner += this.translationText[i].createSvgFragment(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner += this.alText[i].createSvgFragment(ctxt);\n\t      }for (var i = 0; i < this.visualizers.length; i++) {\n\t        inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\t      }return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n\t    }\n\t  }]);\n\t\n\t  return ChantNotationElement;\n\t}(ChantLayoutElement);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantDocument = exports.ChantScore = exports.ChantMapping = exports.ChantLineBreak = exports.TextOnly = exports.FaClef = exports.DoClef = exports.Clef = exports.Note = exports.NoteShapeModifiers = exports.NoteShape = exports.LiquescentType = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar Exsurge = _interopRequireWildcard(_ExsurgeCore);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(6);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar _ExsurgeGabc = __webpack_require__(10);\n\t\n\tvar _ExsurgeTitles = __webpack_require__(11);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar LiquescentType = exports.LiquescentType = {\n\t  None: 0,\n\t\n\t  // flags that can be combined, though of course it\n\t  // it doesn't make sense to combine some!\n\t  Large: 1 << 0,\n\t  Small: 1 << 1,\n\t  Ascending: 1 << 2,\n\t  Descending: 1 << 3,\n\t  InitioDebilis: 1 << 4,\n\t\n\t  // handy liquescent types\n\t  LargeAscending: 1 << 0 | 1 << 2,\n\t  LargeDescending: 1 << 0 | 1 << 3,\n\t  SmallAscending: 1 << 1 | 1 << 2,\n\t  SmallDescending: 1 << 1 | 1 << 3\n\t};\n\t\n\tvar NoteShape = exports.NoteShape = {\n\t  // shapes\n\t  Default: 0,\n\t  Virga: 1,\n\t  Inclinatum: 2,\n\t  Quilisma: 3,\n\t  Stropha: 4,\n\t  Oriscus: 5\n\t};\n\t\n\tvar NoteShapeModifiers = exports.NoteShapeModifiers = {\n\t  // flags which modify the shape\n\t  // not all of them apply to every shape of course\n\t  None: 0,\n\t  Ascending: 1 << 0,\n\t  Descending: 1 << 1,\n\t  Cavum: 1 << 2,\n\t  Stemmed: 1 << 3\n\t};\n\t\n\t/**\n\t * @class\n\t */\n\t\n\tvar Note = exports.Note = function (_ChantLayoutElement) {\n\t  _inherits(Note, _ChantLayoutElement);\n\t\n\t  /**\n\t   * @para {Pitch} pitch\n\t   */\n\t  function Note(pitch) {\n\t    _classCallCheck(this, Note);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));\n\t\n\t    if (typeof pitch !== \"undefined\") _this.pitch = pitch;else _this.pitch = null;\n\t\n\t    _this.glyphVisualizer = null;\n\t\n\t    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n\t    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n\t    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n\t    _this.staffPosition = 0;\n\t    _this.liquescent = LiquescentType.None;\n\t    _this.shape = NoteShape.Default;\n\t    _this.shapeModifiers = NoteShapeModifiers.None;\n\t\n\t    // notes keep track of the neume they belong to in order to facilitate layout\n\t    // this.neume gets set when a note is added to a neume via Neume.addNote()\n\t    _this.neume = null;\n\t\n\t    // various markings that can exist on a note, organized by type\n\t    // for faster access and simpler code logic\n\t    _this.episemata = [];\n\t    _this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\t\n\t    // these are set on the note when they are needed, otherwise, they're undefined\n\t    // this.ictus\n\t    // this.accuteAccent\n\t    // this.braceStart\n\t    // this.braceEnd\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Note, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);else this.glyphVisualizer = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t\n\t      this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      // assign glyphvisualizer metrics to this note\n\t      this.bounds.x = this.glyphVisualizer.bounds.x;\n\t      this.bounds.y = this.glyphVisualizer.bounds.y;\n\t      this.bounds.width = this.glyphVisualizer.bounds.width;\n\t      this.bounds.height = this.glyphVisualizer.bounds.height;\n\t\n\t      this.origin.x = this.glyphVisualizer.origin.x;\n\t      this.origin.y = this.glyphVisualizer.origin.y;\n\t    }\n\t\n\t    // a utility function for modifiers\n\t\n\t  }, {\n\t    key: \"shapeModifierMatches\",\n\t    value: function shapeModifierMatches(shapeModifier) {\n\t      if (shapeModifier === NoteShapeModifiers.None) return this.shapeModifier === NoteShapeModifiers.None;else return this.shapeModifier & shapeModifier !== 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t\n\t      this.glyphVisualizer.draw(ctxt);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n\t      return this.svgNode;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgTree(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgFragment(ctxt, this);\n\t    }\n\t  }]);\n\t\n\t  return Note;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\tvar Clef = exports.Clef = function (_ChantNotationElement) {\n\t  _inherits(Clef, _ChantNotationElement);\n\t\n\t  function Clef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, Clef);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Clef.__proto__ || Object.getPrototypeOf(Clef)).call(this));\n\t\n\t    _this2.isClef = true;\n\t    _this2.staffPosition = staffPosition;\n\t    _this2.octave = octave;\n\t    _this2.defaultAccidental = defaultAccidental;\n\t    _this2.activeAccidental = defaultAccidental;\n\t    _this2.keepWithNext = true;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(Clef, [{\n\t    key: \"resetAccidentals\",\n\t    value: function resetAccidentals() {\n\t      this.activeAccidental = this.defaultAccidental;\n\t    }\n\t  }, {\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {}\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      ctxt.activeClef = this;\n\t\n\t      if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      // if we have a default accidental, then add a glyph for it now\n\t      if (this.defaultAccidental) {\n\t        var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n\t        accidentalGlyph.bounds.x += this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n\t        this.addVisualizer(accidentalGlyph);\n\t      }\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      if (this.model) return this.model.clone();\n\t      var clone = new this.constructor(this.staffPosition, this.octave, this.defaultAccidental);\n\t      clone.sourceGabc = this.sourceGabc;\n\t      clone.sourceIndex = this.sourceIndex;\n\t      clone.elementIndex = this.elementIndex;\n\t      clone.model = this;\n\t      return clone;\n\t    }\n\t  }], [{\n\t    key: \"default\",\n\t    value: function _default() {\n\t      return __defaultDoClef;\n\t    }\n\t  }]);\n\t\n\t  return Clef;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar DoClef = exports.DoClef = function (_Clef) {\n\t  _inherits(DoClef, _Clef);\n\t\n\t  function DoClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, DoClef);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (DoClef.__proto__ || Object.getPrototypeOf(DoClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this3.leadingSpace = 0.0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(DoClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Do);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition;\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoClef.prototype.__proto__ || Object.getPrototypeOf(DoClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.DoClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoClef;\n\t}(Clef);\n\t\n\tvar __defaultDoClef = new DoClef(3, 2);\n\t\n\tvar FaClef = exports.FaClef = function (_Clef2) {\n\t  _inherits(FaClef, _Clef2);\n\t\n\t  function FaClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, FaClef);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (FaClef.__proto__ || Object.getPrototypeOf(FaClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this4.octave = octave;\n\t\n\t    _this4.leadingSpace = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(FaClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Fa);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FaClef.prototype.__proto__ || Object.getPrototypeOf(FaClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.FaClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FaClef;\n\t}(Clef);\n\t\n\t/*\n\t * TextOnly\n\t */\n\t\n\t\n\tvar TextOnly = exports.TextOnly = function (_ChantNotationElement2) {\n\t  _inherits(TextOnly, _ChantNotationElement2);\n\t\n\t  function TextOnly(sourceIndex, sourceLength) {\n\t    _classCallCheck(this, TextOnly);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TextOnly.__proto__ || Object.getPrototypeOf(TextOnly)).call(this));\n\t\n\t    _this5.sourceIndex = sourceIndex;\n\t    _this5.sourceLength = sourceLength;\n\t    _this5.sourceGabc = \"\";\n\t    _this5.trailingSpace = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(TextOnly, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TextOnly.prototype.__proto__ || Object.getPrototypeOf(TextOnly.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // add an empty glyph as a placeholder\n\t      this.addVisualizer(new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.None));\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TextOnly;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar ChantLineBreak = exports.ChantLineBreak = function (_ChantNotationElement3) {\n\t  _inherits(ChantLineBreak, _ChantNotationElement3);\n\t\n\t  function ChantLineBreak(justify) {\n\t    _classCallCheck(this, ChantLineBreak);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (ChantLineBreak.__proto__ || Object.getPrototypeOf(ChantLineBreak)).call(this));\n\t\n\t    _this6.calculatedTrailingSpace = _this6.trailingSpace = 0;\n\t    _this6.justify = justify;\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(ChantLineBreak, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // reset the bounds before doing a layout\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      var lb = new ChantLineBreak();\n\t      lb.justify = this.justify;\n\t\n\t      return lb;\n\t    }\n\t  }]);\n\t\n\t  return ChantLineBreak;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t// a chant mapping is a lightweight format independent way of\n\t// tracking how a chant language (e.g., gabc) has been\n\t// mapped to exsurge notations.\n\t\n\t\n\tvar ChantMapping =\n\t// source can be any object type. in the case of gabc, source is a text\n\t// string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n\t// notations is an array of ChantNotationElements\n\texports.ChantMapping = function ChantMapping(source, notations, sourceIndex) {\n\t  _classCallCheck(this, ChantMapping);\n\t\n\t  this.source = source;\n\t  this.notations = notations;\n\t  this.sourceIndex = sourceIndex;\n\t};\n\t\n\tvar __connectorSpan = new _ExsurgeDrawing.TextSpan(\" • \"),\n\t    __mergeAnnotationWithTextLeft = function __mergeAnnotationWithTextLeft() {\n\t  for (var _len = arguments.length, annotationSpans = Array(_len), _key = 0; _key < _len; _key++) {\n\t    annotationSpans[_key] = arguments[_key];\n\t  }\n\t\n\t  return annotationSpans.reduce(function (result, spans) {\n\t    if (result && result.length) {\n\t      if (spans && spans.length) return result.concat(__connectorSpan, spans);else return result;\n\t    } else if (spans && spans.length) {\n\t      return spans;\n\t    }\n\t    return [];\n\t  });\n\t};\n\t\n\t/*\n\t * Score, document\n\t */\n\t\n\tvar ChantScore = exports.ChantScore = function () {\n\t  // mappings is an array of ChantMappings.\n\t  function ChantScore(ctxt) {\n\t    var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t    var useDropCap = arguments[2];\n\t\n\t    _classCallCheck(this, ChantScore);\n\t\n\t    this.mappings = mappings;\n\t\n\t    this.lines = [];\n\t    this.notes = [];\n\t    if (ctxt) this.titles = new _ExsurgeTitles.Titles(ctxt, this);\n\t\n\t    this.startingClef = null;\n\t\n\t    this.useDropCap = useDropCap;\n\t    this.dropCap = null;\n\t\n\t    this.annotation = null;\n\t\n\t    this.compiled = false;\n\t\n\t    this.autoColoring = true;\n\t    this.needsLayout = true;\n\t\n\t    // valid after chant lines are created...\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t\n\t    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\t\n\t    if (ctxt) this.updateNotations(ctxt);\n\t  }\n\t\n\t  /**\n\t   * Make a copy of the score, only including the specified lines\n\t   * @param  {number} startLine starting index\n\t   * @param  {number} endLine   ending index\n\t   * @return {ChantScore}           the partial score\n\t   */\n\t\n\t\n\t  _createClass(ChantScore, [{\n\t    key: \"copyLines\",\n\t    value: function copyLines(startLine, endLine) {\n\t      var result = new ChantScore();\n\t      result.lines = this.lines.slice(startLine, endLine);\n\t      result.bounds = this.bounds.clone();\n\t      var lastLine = result.lines.slice(-1)[0];\n\t      result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n\t      if (startLine === 0) {\n\t        result.titles = this.titles;\n\t        result.dropCap = this.dropCap;\n\t        result.annotation = this.annotation;\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"updateSelection\",\n\t    value: function updateSelection(selection) {\n\t      this.selection = selection;\n\t      var elementSelection = selection && selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var insertion = elementSelection.insertion;\n\t      if (!insertion && selectedIndices.length === 1 && this.notes[selectedIndices[0]] instanceof TextOnly) {\n\t        // if there is only one selection, and its a text only, it should display as an insertion cursor:\n\t        insertion = { afterElementIndex: selectedIndices[0] };\n\t      }\n\t      // update the selected elements so that they can be given a .selected class when rendered\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var element = this.notes[i];\n\t        element.selected = selectedIndices.includes(i);\n\t      }\n\t      (this.startingClef.model || this.startingClef).selected = selectedIndices.includes(-1);\n\t      for (var _i = 0; _i < this.lines.length; ++_i) {\n\t        this.lines[_i].insertionCursor = null;\n\t      }\n\t      // update the insertion cursor, so it can be drawn on the correct system\n\t      this.insertionElement = null;\n\t      var insertionLine = null;\n\t      if (insertion) {\n\t        if (typeof insertion.chantLine === \"number\") {\n\t          insertionLine = this.lines[insertion.chantLine];\n\t          this.insertionElement = insertionLine.startingClef;\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        } else if (typeof insertion.afterElementIndex === \"number\") {\n\t          this.insertionElement = this.notes[insertion.afterElementIndex];\n\t          if (!this.insertionElement) {\n\t            insertionLine = this.lines[0];\n\t            this.insertionElement = insertionLine.startingClef;\n\t          } else if (this.insertionElement.neume) {\n\t            this.insertionElement = this.insertionElement.neume;\n\t          }\n\t          if (!insertionLine) {\n\t            insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n\t          }\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateNotations\",\n\t    value: function updateNotations(ctxt) {\n\t      var i, j, mapping, notation;\n\t\n\t      // flatten all mappings into one array for N(0) access to notations\n\t      this.notations = [];\n\t      this.notes = [];\n\t      this.hasLyrics = false;\n\t      this.hasAboveLinesText = false;\n\t      this.hasTranslations = false;\n\t      var elementSelection = this.selection && this.selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t\n\t      // find the starting clef...\n\t      // start with a default clef in case the notations don't provide one.\n\t      this.startingClef = null;\n\t\n\t      for (i = 0; i < this.mappings.length; i++) {\n\t        mapping = this.mappings[i];\n\t        for (j = 0; j < mapping.notations.length; j++) {\n\t          notation = mapping.notations[j];\n\t          notation.score = this;\n\t          notation.mapping = mapping;\n\t\n\t          if (!this.startingClef) {\n\t            if (notation.isNeume) {\n\t              this.startingClef = Clef.default();\n\t            } else if (notation.isClef) {\n\t              this.startingClef = notation;\n\t              continue;\n\t            }\n\t          }\n\t\n\t          notation.notationIndex = this.notations.push(notation) - 1;\n\t          if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n\t          if (!this.hasAboveLinesText && notation.alText) this.hasAboveLinesText = true;\n\t          if (!this.hasTranslations && notation.translationText) this.hasTranslations = true;\n\t\n\t          // Update this.notes and find element indices:\n\t          var elements = notation.notes || [notation];\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var element = _step.value;\n\t\n\t              var elementIndex = element.elementIndex = this.notes.push(element) - 1;\n\t              element.selected = selectedIndices.includes(elementIndex);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we've reached this far and we *still* don't have a clef, then there aren't even\n\t      // any neumes in the score. still, set the default clef just for good measure\n\t      if (!this.startingClef) this.startingClef = Clef.default();\n\t      this.startingClef.elementIndex = -1;\n\t\n\t      // update drop cap\n\t      if (this.useDropCap) this.recreateDropCap(ctxt);else this.dropCap = null;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }, {\n\t    key: \"recreateDropCap\",\n\t    value: function recreateDropCap(ctxt) {\n\t      this.dropCap = null;\n\t\n\t      // find the first notation with lyrics to use\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        if (this.notations[i].hasLyrics() && this.notations[i].lyrics[0] !== null && this.notations[i].lyrics[0].spans && this.notations[i].lyrics[0].spans.length) {\n\t          var notation = this.notations[i],\n\t              lyrics = notation.lyrics[0];\n\t          if (this.useDropCap) {\n\t            this.dropCap = lyrics.generateDropCap(ctxt);\n\t          } else {\n\t            lyrics.dropCap = null;\n\t            lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n\t          }\n\t          notation.needsLayout = true;\n\t          return;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shared layout initialization method for performLayout() and performLayoutAsync()\n\t     * @param  {ChantContext} ctxt\n\t     */\n\t\n\t  }, {\n\t    key: \"initializeLayout\",\n\t    value: function initializeLayout(ctxt) {\n\t      // setup the context\n\t      ctxt.activeClef = this.startingClef;\n\t      ctxt.notations = this.notations;\n\t      ctxt.currNotationIndex = 0;\n\t\n\t      if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\t\n\t      if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n\t    }\n\t\n\t    // this is the the synchronous version of performLayout that\n\t    // process everything without yielding to any other workers/threads.\n\t    // good for server side processing or very small chant pieces.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt, force) {\n\t      if (!force && this.needsLayout === false) return; // nothing to do here!\n\t\n\t      ctxt.updateHyphenWidth();\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t        if (force || notation.needsLayout) {\n\t          ctxt.currNotationIndex = i;\n\t          notation.performLayout(ctxt);\n\t        }\n\t      }\n\t\n\t      this.needsLayout = false;\n\t    }\n\t\n\t    // for web applications, probably performLayoutAsync would be more\n\t    // apppropriate that the above performLayout, since it will process\n\t    // the notations without locking up the UI thread.\n\t\n\t  }, {\n\t    key: \"performLayoutAsync\",\n\t    value: function performLayoutAsync(ctxt, finishedCallback) {\n\t      var _this7 = this;\n\t\n\t      if (this.needsLayout === false) {\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return; // nothing to do here!\n\t      }\n\t\n\t      if (ctxt.onFontLoaded) {\n\t        ctxt.onFontLoaded.push(function () {\n\t          return _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        });\n\t        return;\n\t      }\n\t\n\t      // check for sane value of hyphen width:\n\t      ctxt.updateHyphenWidth();\n\t      if (!ctxt.hyphenWidth || ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6) {\n\t        setTimeout(function () {\n\t          _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        }, 100);\n\t        return;\n\t      }\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      setTimeout(function () {\n\t        return _this7.layoutElementsAsync(ctxt, 0, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutElementsAsync\",\n\t    value: function layoutElementsAsync(ctxt, index, finishedCallback) {\n\t      var _this8 = this;\n\t\n\t      if (index >= this.notations.length) {\n\t        this.needsLayout = false;\n\t\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return;\n\t      }\n\t\n\t      if (index === 0) ctxt.activeClef = this.startingClef;\n\t\n\t      var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n\t      do {\n\t        var notation = this.notations[index];\n\t        if (notation.needsLayout) {\n\t          ctxt.currNotationIndex = index;\n\t          notation.performLayout(ctxt);\n\t        }\n\t\n\t        index++;\n\t      } while (index < this.notations.length && new Date().getTime() < timeout);\n\t\n\t      // schedule the next block of processing\n\t      setTimeout(function () {\n\t        return _this8.layoutElementsAsync(ctxt, index, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutChantLines\",\n\t    value: function layoutChantLines(ctxt, width, finishedCallback) {\n\t      this.lines = [];\n\t\n\t      if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n\t        var annotation = this.annotation,\n\t            annotationSpans = annotation.annotations ? annotation.annotations.map(function (annotation) {\n\t          return annotation.spans;\n\t        }) : [annotation.spans];\n\t        this.overrideTextLeft = new _ExsurgeDrawing.TextLeftRight(ctxt, \"\", \"textLeft\");\n\t        this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft.apply(this, _toConsumableArray(annotationSpans).concat([this.titles.textLeft && this.titles.textLeft.spans]));\n\t      } else {\n\t        this.overrideTextLeft = null;\n\t      }\n\t\n\t      var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n\t      var currIndex = 0;\n\t\n\t      ctxt.activeClef = this.startingClef;\n\t\n\t      var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\t\n\t      do {\n\t        var line = new _ExsurgeChantChantLine.ChantLine(this);\n\t\n\t        line.buildFromChantNotationIndex(ctxt, currIndex, width);\n\t        currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n\t        line.performLayout(ctxt);\n\t        line.elementIndex = this.lines.length;\n\t        this.lines.push(line);\n\t\n\t        line.bounds.y = -line.bounds.y + y;\n\t        y += line.bounds.height + spaceBetweenSystems;\n\t      } while (currIndex < this.notations.length);\n\t\n\t      var lastLine = this.lines[this.lines.length - 1];\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t      this.bounds.width = lastLine.bounds.width;\n\t      this.bounds.height = y - spaceBetweenSystems;\n\t\n\t      this.pages = [this];\n\t\n\t      if (this.selection) {\n\t        this.updateSelection(this.selection);\n\t      }\n\t\n\t      if (finishedCallback) finishedCallback(this);\n\t    }\n\t  }, {\n\t    key: \"paginate\",\n\t    value: function paginate(height) {\n\t      if (!height) return;\n\t      this.pages = [];\n\t      var pageHeightOffset = 0,\n\t          startLineIndex = 0;\n\t      for (var i = 1; i < this.lines.length; ++i) {\n\t        var line = this.lines[i];\n\t        var pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\t\n\t        if (pageHeight > height) {\n\t          // this line will be the first on the new page\n\t          this.pages.push(this.copyLines(startLineIndex, i));\n\t          startLineIndex = i;\n\t          pageHeightOffset = line.bounds.y - line.origin.y;\n\t          line.bounds.y = line.origin.y;\n\t        } else {\n\t          // not a new page yet...update the bounds:\n\t          line.bounds.y -= pageHeightOffset;\n\t        }\n\t      }\n\t      this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      if (this.titles) this.titles.draw(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        this.lines[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, zoom) {\n\t      var width = typeof zoom === \"number\" ? zoom * this.bounds.width : zoom ? undefined : this.bounds.width,\n\t          height = zoom ? undefined : this.bounds.height;\n\t\n\t      return {\n\t        xmlns: \"http://www.w3.org/2000/svg\",\n\t        version: \"1.1\",\n\t        class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n\t        width: width,\n\t        height: height,\n\t        viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      // create defs section\n\t      var node = [ctxt.defsNode.cloneNode(true)];\n\t      node[0].appendChild(ctxt.createStyleNode());\n\t\n\t      if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgNode(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, node);\n\t\n\t      node = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, zoom) {\n\t      // create defs section\n\t      var node = [_ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"defs\", {}].concat(_toConsumableArray(ctxt.makeDefs.map(function (makeDef) {\n\t        return makeDef.makeSvgTree();\n\t      })), [ctxt.createStyleTree()]))];\n\t\n\t      if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgTree(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {}].concat(_toConsumableArray(node)));\n\t      var svgProps = this.getSvgProps(ctxt, zoom);\n\t      svgProps.source = this;\n\t      node = _ExsurgeDrawing.QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvg\",\n\t    value: function createSvg(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n\t      }fragment += ctxt.createStyle();\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragment);\n\t\n\t      if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        fragment += this.lines[i].createSvgFragment(ctxt);\n\t      }fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, fragment);\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\t\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"createSvgNodeForEachLine\",\n\t    value: function createSvgNodeForEachLine(ctxt) {\n\t      var node = [];\n\t\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = [ctxt.defsNode.cloneNode(true), this.lines[i].createSvgNode(ctxt, top)];\n\t        lineFragment[0].appendChild(ctxt.createStyleNode());\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height,\n\t          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n\t        }, lineFragment);\n\t        node.push(lineFragment);\n\t        top += height;\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgForEachLine\",\n\t    value: function createSvgForEachLine(ctxt) {\n\t      var fragment = \"\",\n\t          fragmentDefs = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n\t      }fragmentDefs += ctxt.createStyle();\n\t\n\t      fragmentDefs = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height\n\t        }, lineFragment);\n\t        fragment += lineFragment;\n\t        top += height;\n\t      }\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data, ctxt) {\n\t      this.autoColoring = data[\"auto-coloring\"];\n\t\n\t      if (data.annotation !== null && data.annotation !== \"\") {\n\t        // create the annotation\n\t        this.annotation = new _ExsurgeDrawing.Annotation(ctxt, data.annotation);\n\t      } else this.annotation = null;\n\t\n\t      var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\t\n\t      _ExsurgeGabc.Gabc.parseChantNotations(data.notations, this, createDropCap);\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      data[\"type\"] = \"score\";\n\t      data[\"auto-coloring\"] = true;\n\t\n\t      if (this.annotation !== null) data.annotation = this.annotation.unsanitizedText;else data.annotation = \"\";\n\t\n\t      return data;\n\t    }\n\t  }]);\n\t\n\t  return ChantScore;\n\t}();\n\t\n\tvar ChantDocument = exports.ChantDocument = function () {\n\t  function ChantDocument() {\n\t    _classCallCheck(this, ChantDocument);\n\t\n\t    var defaults = {\n\t      layout: {\n\t        units: \"mm\",\n\t        \"default-font\": {\n\t          \"font-family\": \"Crimson\",\n\t          \"font-size\": 14\n\t        },\n\t        page: {\n\t          width: 8.5,\n\t          height: 11,\n\t          \"margin-left\": 0,\n\t          \"margin-top\": 0,\n\t          \"margin-right\": 0,\n\t          \"margin-bottom\": 0\n\t        }\n\t      },\n\t      scores: []\n\t    };\n\t\n\t    // default layout\n\t    this.copyLayout(this, defaults);\n\t\n\t    this.scores = defaults.scores;\n\t  }\n\t\n\t  _createClass(ChantDocument, [{\n\t    key: \"copyLayout\",\n\t    value: function copyLayout(to, from) {\n\t      to.layout = {\n\t        units: from.layout.units,\n\t        \"default-font\": {\n\t          \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n\t          \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n\t        },\n\t        page: {\n\t          width: from.layout.page.width,\n\t          height: from.layout.page.height,\n\t          \"margin-left\": from.layout.page[\"margin-left\"],\n\t          \"margin-top\": from.layout.page[\"margin-top\"],\n\t          \"margin-right\": from.layout.page[\"margin-right\"],\n\t          \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data) {\n\t      this.copyLayout(this, data);\n\t\n\t      this.scores = [];\n\t\n\t      // read in the scores\n\t      for (var i = 0; i < data.scores.length; i++) {\n\t        var score = new ChantScore();\n\t\n\t        score.unserializeFromJson(data.scores[i]);\n\t        this.scores.push(score);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      this.copyLayout(data, this);\n\t\n\t      data.scores = [];\n\t\n\t      // save scores...\n\t      for (var i = 0; i < this.scores.length; i++) {\n\t        data.scores.push(this.scores[i].serializeToJson());\n\t      }return data;\n\t    }\n\t  }]);\n\n\t  return ChantDocument;\n\t}();\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantLine = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar Exsurge = _interopRequireWildcard(_ExsurgeCore);\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(7);\n\t\n\tvar Neumes = _interopRequireWildcard(_ExsurgeChantNeumes);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(9);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// a chant line represents one staff line on the page. ChantLines are created by the score\n\t// and laid out by the page\n\tvar ChantLine = exports.ChantLine = function (_ChantLayoutElement) {\n\t  _inherits(ChantLine, _ChantLayoutElement);\n\t\n\t  function ChantLine(score) {\n\t    _classCallCheck(this, ChantLine);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ChantLine.__proto__ || Object.getPrototypeOf(ChantLine)).call(this));\n\t\n\t    _this.score = score;\n\t\n\t    _this.notationsStartIndex = 0;\n\t    _this.numNotationsOnLine = 0;\n\t    _this.notationBounds = null; // Rect\n\t\n\t    _this.staffLeft = 0;\n\t    _this.staffRight = 0;\n\t\n\t    _this.startingClef = null; // necessary for the layout process\n\t    _this.custos = null;\n\t\n\t    _this.justify = true;\n\t\n\t    // these are markings that exist at the chant line level rather than at the neume level.\n\t    _this.ledgerLines = [];\n\t    _this.braces = [];\n\t\n\t    _this.nextLine = null;\n\t    _this.previousLine = null; // for layout assistance\n\t\n\t    _this.lyricLineHeight = 0; // height of each text line\n\t    _this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n\t    _this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\t\n\t    // fixme: make these configurable values from the score\n\t    _this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n\t    _this.spaceBetweenTextTracks = 0; // spacing between each text track\n\t\n\t    _this.lastLyrics = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ChantLine, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // start off with a rectangle that holds at least the four staff lines\n\t      this.notationBounds = new _ExsurgeCore.Rect(this.staffLeft, -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval, this.staffRight - this.staffLeft, (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval);\n\t\n\t      // run through all the elements of the line and calculate the bounds of the notations,\n\t      // as well as the bounds of each text track we will use\n\t      var i;\n\t      var notations = this.score.notations;\n\t      var lastNeumeIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var notation = null;\n\t\n\t      this.notationBounds.union(this.startingClef.bounds);\n\t\n\t      // reset the lyric line offsets before we [re]calculate them now\n\t      this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n\t      this.lyricLineBaseline = 0;\n\t      this.numLyricLines = 0;\n\t\n\t      this.altLineHeight = 0;\n\t      this.altLineBaseline = 0;\n\t      this.numAltLines = 0;\n\t\n\t      this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n\t      this.translationLineBaseline = 0;\n\t      this.numTranslationLines = 0;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t\n\t        this.notationBounds.union(notation.bounds);\n\t\n\t        // keep track of lyric line offsets\n\t        if (notation.lyrics.length && notation.lyrics[0].text) {\n\t          // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n\t          //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n\t          if (notation.lyrics[0].origin.y > this.lyricLineBaseline) this.lyricLineBaseline = notation.lyrics[0].origin.y;\n\t          if (notation.lyrics.length > this.numLyricLines) this.numLyricLines = notation.lyrics.length;\n\t        }\n\t\n\t        if (notation.alText && this.numAltLines < notation.alText.length) {\n\t          if (notation.alText[0].bounds.height > this.altLineHeight) this.altLineHeight = notation.alText[0].bounds.height;\n\t          if (notation.alText[0].origin.y > this.altLineBaseline) this.altLineBaseline = notation.alText[0].origin.y;\n\t          if (notation.alText.length > this.numAltLines) this.numAltLines = notation.alText.length;\n\t        }\n\t\n\t        if (notation.translationText && notation.translationText[0] && notation.translationText[0].text) {\n\t          // if (\n\t          //   notation.translationText[0].bounds.height > this.translationLineHeight\n\t          // )\n\t          //   this.translationLineHeight =\n\t          //     notation.translationText[0].bounds.height;\n\t          if (notation.translationText[0].origin.y > this.translationLineBaseline) this.translationLineBaseline = notation.translationText[0].origin.y;\n\t          if (notation.translationText.length > this.numTranslationLines) this.numTranslationLines = notation.translationText.length;\n\t        }\n\t      }\n\t\n\t      if (this.custos) this.notationBounds.union(this.custos.bounds);\n\t\n\t      // add any braces to the notationBounds as well\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        this.notationBounds.union(this.braces[i].bounds);\n\t      } // finalize the lyrics placement\n\t      var notationBoundsOffset = this.notationBounds.bottom() + ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n\t      this.lyricLineBaseline += notationBoundsOffset;\n\t      this.translationLineBaseline += notationBoundsOffset;\n\t      this.altLineBaseline += this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t        var offset = 0;\n\t        for (var j = 0; j < notation.lyrics.length; j++) {\n\t          notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t\n\t        if (notation.translationText) {\n\t          for (j = 0; j < notation.translationText.length; j++) {\n\t            notation.translationText[j].bounds.y = offset + this.translationLineBaseline;\n\t            offset += this.translationLineHeight;\n\t          }\n\t        }\n\t\n\t        if (notation.alText) {\n\t          offset = 0;\n\t          for (j = 0; j < notation.alText.length; j++) {\n\t            notation.alText[j].bounds.y = offset + this.altLineBaseline;\n\t            offset -= ctxt.textStyles.al.size * 1.1;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.extraTextOnlyHeight = 0;\n\t      // handle placement of extra TextOnly elements:\n\t      if (ctxt.useExtraTextOnly) {\n\t        var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t        if (this.extraTextOnlyIndex === null) {\n\t          // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n\t          var lastNotation = notations[lastNeumeIndex - 1] || {};\n\t          if (lastNotation.constructor === _ExsurgeChant.ChantLineBreak) lastNotation = notations[lastNeumeIndex - 2];\n\t          if (lastNotation.constructor === _ExsurgeChant.TextOnly && lastNotation.lyrics.length === 1 && lastNotation.lyrics[0].bounds.height > this.lyricLineHeight) {\n\t            this.extraTextOnlyHeight = this.lyricLineHeight;\n\t          }\n\t        } else {\n\t          var lastLyrics = null;\n\t          var xOffset = 0;\n\t          offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n\t          offset += this.numTranslationLines * this.translationLineHeight;\n\t          var extraLines = 0;\n\t          for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n\t            notation = notations[i];\n\t            if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n\t            lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n\t            if (lastLyrics.lineWidth) {\n\t              xOffset = this.staffRight - lastLyrics.lineWidth;\n\t              offset += this.lyricLineHeight;\n\t              extraLines++;\n\t            }\n\t            extraLines += lastLyrics.numLines - 1;\n\t            lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n\t            notation.bounds.x += xOffset;\n\t          }\n\t          this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n\t        }\n\t      }\n\t\n\t      if (this.startingClef.hasLyrics()) {\n\t        offset = 0;\n\t        for (j = 0; j < this.startingClef.lyrics.length; j++) {\n\t          this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t      }\n\t\n\t      // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.annotation !== null) {\n\t          // annotations use dominant-baseline to align text to the top\n\t          this.score.annotation.bounds.x = this.staffLeft / 2;\n\t          this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n\t          if (this.score.dropCap !== null) {\n\t            var lowestPossibleAnnotationY = this.lyricLineBaseline - this.score.annotation.bounds.height - ctxt.staffInterval * ctxt.textStyles.annotation.padding - this.score.dropCap.origin.y;\n\t            // if the annotation would overlap with the drop cap, move the annotation higher.\n\t            // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n\t            if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n\t              this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n\t            } else {\n\t              this.score.annotation.bounds.y = (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n\t            }\n\t            if (this.score.annotation.bounds.y < this.notationBounds.y) {\n\t              this.notationBounds.y = this.score.annotation.bounds.y;\n\t              this.notationBounds.height += this.notationBounds.y - this.score.annotation.bounds.y;\n\t            }\n\t          }\n\t          this.score.annotation.bounds.y += this.score.annotation.origin.y;\n\t        }\n\t\n\t        if (this.score.dropCap !== null) {\n\t          // drop caps and annotations are drawn from their center, so aligning them\n\t          // horizontally is as easy as this.staffLeft / 2\n\t          this.score.dropCap.bounds.x = this.staffLeft / 2;\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline - this.score.dropCap.origin.y;\n\t          this.notationBounds.union(this.score.dropCap.bounds);\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline;\n\t        }\n\t      }\n\t\n\t      if (this.numLyricLines > 0) {\n\t        // add up the lyric line heights to get the total height of the chant line\n\t        var lyricAndTextRect = new _ExsurgeCore.Rect(0, notationBoundsOffset, 0, this.lyricLineHeight * this.numLyricLines + this.extraTextOnlyHeight + this.translationLineHeight * this.numTranslationLines);\n\t        this.notationBounds.union(lyricAndTextRect);\n\t      }\n\t      if (this.numAltLines > 0) {\n\t        var altLineTextRect = new _ExsurgeCore.Rect(0, this.notationBounds.y - this.altLineHeight - 0.5 * ctxt.staffInterval - ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1), 0, ctxt.textStyles.al.size * 1.1 * this.numAltLines);\n\t        this.notationBounds.union(altLineTextRect);\n\t      }\n\t      // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n\t      this.notationBounds.union(new _ExsurgeCore.Rect(0, 0, 0, (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) * ctxt.staffInterval));\n\t      var totalHeight = this.notationBounds.height;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = this.notationBounds.y;\n\t      this.bounds.width = this.notationBounds.right();\n\t      this.bounds.height = totalHeight;\n\t\n\t      // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n\t      this.origin = new _ExsurgeCore.Point(this.staffLeft, -this.notationBounds.y);\n\t    }\n\t\n\t    // TODO: remove if not necsessary\n\t\n\t  }, {\n\t    key: \"layoutInsertionCursor\",\n\t    value: function layoutInsertionCursor(ctxt) {\n\t      if (this.insertionCursor) {\n\t        // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n\t        this.insertionCursor.performLayout(ctxt);\n\t        this.insertionCursor.bounds.x = this.score.insertionElement.bounds.right() + (this.score.insertionElement.trailingSpace && this.score.insertionElement.calculatedTrailingSpace || 0) / 2 - this.insertionCursor.origin.x;\n\t      }\n\t      return this.insertionCursor;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      // draw the staff lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight,\n\t          y;\n\t      canvasCtxt.lineWidth = ctxt.staffLineWeight;\n\t      canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\t\n\t      for (i = -3; i <= 3; i += 2) {\n\t        y = ctxt.staffInterval * i;\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(x1, y);\n\t        canvasCtxt.lineTo(x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        this.insertionCursor.draw(ctxt);\n\t      }\n\t\n\t      // draw the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(ledgerLine.x1, y);\n\t        canvasCtxt.lineTo(ledgerLine.x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      // fixme: draw the braces\n\t\n\t      // draw the dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          this.score.annotation.draw(ctxt);\n\t      }\n\t\n\t      // draw the notations\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        notations[i].draw(ctxt);\n\t      }this.startingClef.draw(ctxt);\n\t\n\t      if (this.custos) this.custos.draw(ctxt);\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t      var functionNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { quickSvg: \"createNode\", elements: \"createSvgNode\" };\n\t\n\t      var inner = [];\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      if (ctxt.editable) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"rect\", {\n\t          key: \"insertion\",\n\t          x: x1,\n\t          y: ctxt.staffInterval * -3,\n\t          width: x2 - x1,\n\t          height: ctxt.staffInterval * 6,\n\t          fill: \"none\"\n\t        }));\n\t      }\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          key: i,\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        }));\n\t      }\n\t\n\t      inner = [_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)];\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner.push(this.insertionCursor[functionNames.elements](ctxt));\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        }));\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner.push(this.braces[i][functionNames.elements](ctxt));\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner = inner.concat(this.score.annotation[functionNames.elements](ctxt));\n\t      }\n\t\n\t      inner.push(this.startingClef[functionNames.elements](ctxt));\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner.push(notations[i][functionNames.elements](ctxt));\n\t      }if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createNode\",\n\t        elements: \"createSvgNode\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex,\n\t        source: this\n\t      }, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createSvgTree\",\n\t        elements: \"createSvgTree\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = \"\";\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        });\n\t      }\n\t\n\t      inner = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner += this.insertionCursor.createSvgFragment(ctxt);\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        });\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner += this.braces[i].createSvgFragment(ctxt);\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner += this.score.dropCap.createSvgFragment(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner += this.score.annotation.createSvgFragment(ctxt);\n\t      }\n\t\n\t      inner += this.startingClef.createSvgFragment(ctxt);\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner += notations[i].createSvgFragment(ctxt);\n\t      }if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }, inner);\n\t    }\n\t\n\t    // code below based on code by: https://gist.github.com/alexhornbake\n\t    //\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path string ready to insert into svg doc\n\t\n\t  }, {\n\t    key: \"generateCurlyBraceDrawable\",\n\t    value: function generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n\t      var h;\n\t\n\t      if (isAbove) h = -ctxt.staffInterval / 2;else h = ctxt.staffInterval / 2;\n\t\n\t      // and q factor, .5 is normal, higher q = more expressive bracket\n\t      var q = 0.6;\n\t\n\t      var len = x2 - x1;\n\t\n\t      //Calculate Control Points of path,\n\t      var qx1 = x1;\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * len;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * len;\n\t      var ty1 = y + h;\n\t      var qx3 = x2;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * len;\n\t      var qy4 = y + (1 - q) * h;\n\t      var d = \"M \" + x1 + \" \" + y + \" Q \" + qx1 + \" \" + qy1 + \" \" + qx2 + \" \" + qy2 + \" T \" + tx1 + \" \" + ty1 + \" M \" + x2 + \" \" + y + \" Q \" + qx3 + \" \" + qy3 + \" \" + qx4 + \" \" + qy4 + \" T \" + tx1 + \" \" + ty1;\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"path\", {\n\t        d: d,\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n\t        fill: \"none\"\n\t      });\n\t    }\n\t  }, {\n\t    key: \"buildFromChantNotationIndex\",\n\t    value: function buildFromChantNotationIndex(ctxt, newElementStart, width) {\n\t      // todo: reset / clear the children we have in case they have data\n\t      var notations = this.score.notations,\n\t          beginningLyrics = null,\n\t          prev = null,\n\t          prevNeume = null,\n\t          prevLyrics = [];\n\t      var condensableSpaces = [];\n\t      this.notationsStartIndex = newElementStart;\n\t      this.numNotationsOnLine = 0;\n\t\n\t      this.staffLeft = 0;\n\t      this.paddingLeft = 0;\n\t\n\t      this.extraTextOnlyIndex = null;\n\t      this.extraTextOnlyLyricIndex = 0;\n\t\n\t      if (width > 0) this.staffRight = width;else this.staffRight = Infinity; // no limit to staff size\n\t\n\t      // If this is the first chant line, then we have to make room for a\n\t      // drop cap and/or annotation, if present\n\t      if (this.notationsStartIndex === 0) {\n\t        var padding = 0;\n\t\n\t        if (this.score.dropCap !== null) padding = this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)) padding = Math.max(padding, this.score.annotation.bounds.width + this.score.annotation.padding * 2);\n\t\n\t        this.staffLeft += padding;\n\t        if (this.score.dropCap !== null) this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n\t      } else {\n\t        prev = notations[newElementStart - 1];\n\t        if (prev.constructor === _ExsurgeChantSigns.DoubleBar && prev.hasLyrics() && (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))) {\n\t          beginningLyrics = prev.lyrics.map(function (lyric) {\n\t            var newLyric = new _ExsurgeDrawing.Lyric(ctxt, lyric.originalText, lyric.lyricType, lyric.notation, lyric.notations, lyric.sourceIndex);\n\t            newLyric.elidesToNext = lyric.elidesToNext;\n\t            // Hide the original lyric by setting its bounds.y to an extremely high number.\n\t            // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n\t            lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n\t            return newLyric;\n\t          });\n\t          var minX = beginningLyrics.map(function (l) {\n\t            return l.bounds.x;\n\t          }).reduce(function (a, b) {\n\t            return a < b ? a : b;\n\t          });\n\t          beginningLyrics.forEach(function (l) {\n\t            l.bounds.x -= minX;\n\t          });\n\t        }\n\t      }\n\t\n\t      // set up the clef...\n\t      // if the first notation on the line is a starting clef, then we treat it a little differently...\n\t      // the clef becomes this line's starting clef and we skip over the clef in the notations array\n\t      if (notations.length && notations[newElementStart].isClef) {\n\t        ctxt.activeClef = notations[newElementStart];\n\t        newElementStart++;\n\t        this.notationsStartIndex++;\n\t      }\n\t\n\t      // make a copy for this line to use at the beginning\n\t      this.startingClef = ctxt.activeClef.clone();\n\t      this.startingClef.performLayout(ctxt);\n\t      this.startingClef.bounds.x = this.staffLeft;\n\t\n\t      var curr = this.startingClef;\n\t\n\t      if (beginningLyrics) {\n\t        _ExsurgeDrawing.LyricArray.setNotation(beginningLyrics, curr);\n\t      }\n\t\n\t      // estimate how much space we have available to us\n\t      var rightNotationBoundary = this.staffRight - _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n\t      var lastTranslationTextWithEndNeume = null;\n\t\n\t      // iterate through the notations, fittng what we can on this line\n\t      var i,\n\t          j,\n\t          lastNotationIndex = notations.length - 1;\n\t\n\t      if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t      // if we already have a start brace on the context, we must be continuing it from the previous system.\n\t      if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n\t        ctxt.lastStartBrace.note = this.startingClef;\n\t      }\n\t      var lastLyricsBeforeTextOnly;\n\t      var textOnlyStartIndex;\n\t\n\t      for (i = newElementStart; i <= lastNotationIndex; i++) {\n\t        prev = curr;\n\t        if (curr.constructor !== _ExsurgeChant.TextOnly) prevNeume = curr;\n\t\n\t        curr = notations[i];\n\t\n\t        var actualRightBoundary;\n\t        if (i === lastNotationIndex || curr.constructor === _ExsurgeChantSigns.Custos || prev.constructor === _ExsurgeChantSigns.Custos && curr.isDivider || curr.constructor === _ExsurgeChant.ChantLineBreak && prevNeume.constructor === _ExsurgeChantSigns.Custos) {\n\t          // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n\t          // right boundary.\n\t          // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n\t          // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n\t          // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n\t          actualRightBoundary = this.staffRight;\n\t        } else if (i === lastNotationIndex - 1) {\n\t          // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n\t          // between the final notation and a custos:\n\t          actualRightBoundary = Math.max(rightNotationBoundary, this.staffRight - notations[lastNotationIndex].bounds.width);\n\t        } else {\n\t          // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n\t          actualRightBoundary = rightNotationBoundary;\n\t        }\n\t\n\t        // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n\t        // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n\t        var forceBreak = !curr.isDivider && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && !(curr.constructor === _ExsurgeChant.TextOnly && curr.hasLyrics() && /^[*†]$/.test(curr.lyrics[0].text)) && lastNotationIndex - i > 1 && !prevNeume.keepWithNext && prevNeume.bounds.right() >= rightNotationBoundary;\n\t\n\t        // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n\t        forceBreak = forceBreak || this.extraTextOnlyIndex !== null && curr.constructor !== _ExsurgeChant.TextOnly && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && curr.hasLyrics();\n\t\n\t        if (curr instanceof _ExsurgeChant.TextOnly && prev === prevNeume) {\n\t          lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n\t          textOnlyStartIndex = i;\n\t        }\n\t        if (curr instanceof _ExsurgeChant.TextOnly && notations[textOnlyStartIndex] && !notations[textOnlyStartIndex].hasLyrics()) {\n\t          // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n\t          // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n\t          // that does have lyrics, we will use it instead\n\t          textOnlyStartIndex = i;\n\t        }\n\t\n\t        if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n\t          curr.lyrics[0].recalculateMetrics(ctxt);\n\t        }\n\t\n\t        // try to fit the curr element on this line.\n\t        // if it doesn't fit, we finish up here.\n\t        var fitsOnLine = !forceBreak && this.positionNotationElement(ctxt, this.lastLyrics, prevNeume, curr, actualRightBoundary, this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n\t        );\n\t        var candidateForExtraTextOnlyLine = ctxt.useExtraTextOnly && curr.constructor === _ExsurgeChant.TextOnly && _ExsurgeDrawing.LyricArray.hasOnlyOneLyric(curr.lyrics) && (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n\t        var extraTextOnlyLyricIndex;\n\t        if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n\t          // check to make sure there is enough text to put on the text only line:\n\t          extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t          if (textOnlyStartIndex === i) {\n\t            var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n\t            if (currentLyric.length <= 1) {\n\t              var nextNotation = notations[i + 1];\n\t              candidateForExtraTextOnlyLine = nextNotation && nextNotation.constructor === _ExsurgeChant.TextOnly && nextNotation.lyrics[extraTextOnlyLyricIndex] && nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n\t            }\n\t          }\n\t        }\n\t        if (candidateForExtraTextOnlyLine) {\n\t          // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n\t          // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n\t          // line of lyrics associated with them.\n\t          var firstOnLine;\n\t          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t          if (this.extraTextOnlyIndex === null && notations[textOnlyStartIndex].lyrics.length) {\n\t            if (textOnlyStartIndex === this.notationsStartIndex || !ctxt.startExtraTextOnlyFromFirst) {\n\t              textOnlyStartIndex = i;\n\t              var lastNotationWithLyrics = notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return notation.hasLyrics();\n\t              });\n\t              lastLyricsBeforeTextOnly = lastNotationWithLyrics && lastNotationWithLyrics.lyrics.slice() || [];\n\t            }\n\t            // go back to the first in this string of consecutive TextOnly elements.\n\t            this.extraTextOnlyIndex = textOnlyStartIndex;\n\t            extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t            this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n\t            this.lastLyrics = [];\n\t            i = textOnlyStartIndex - 1;\n\t            this.numNotationsOnLine = textOnlyStartIndex - this.notationsStartIndex;\n\t            continue;\n\t          }\n\t          delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n\t          if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n\t            curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n\t            var lastLyricRight = ctxt.startExtraTextOnlyFromFirst ? _ExsurgeDrawing.LyricArray.getRight(this.lastLyrics) + (ctxt.minLyricWordSpacing || 0) : 0;\n\t            curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(ctxt, this.staffRight, this.staffRight - lastLyricRight);\n\t            firstOnLine = curr;\n\t          }\n\t          if (firstOnLine) firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[extraTextOnlyLyricIndex].getRight();\n\t        } else if (fitsOnLine === false) {\n\t          // first check for elements that cannot begin a system: dividers and custodes\n\t          while (this.numNotationsOnLine > 1 && (curr.isDivider || curr.constructor === _ExsurgeChantSigns.Custos)) {\n\t            curr = notations[--i];\n\t            this.numNotationsOnLine--;\n\t          }\n\t\n\t          if (lastTranslationTextWithEndNeume) {}\n\t          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n\t          // TODO?: need to go back to before the last translation text start:\n\t\n\t\n\t          // check if the prev elements want to be kept with this one\n\t          for (j = i - 1; j > this.notationsStartIndex; j--) {\n\t            var cne = notations[j];\n\t            curr = notations[j + 1];\n\t\n\t            // curr is the first notation on the next line\n\t            // cne is the last notation on this line\n\t\n\t            if (cne.firstWithNoWidth) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // don't let a line break occur in the middle of a translation\n\t            if (lastTranslationTextWithEndNeume) {\n\t              this.numNotationsOnLine--;\n\t              if (cne === lastTranslationTextWithEndNeume) {\n\t                lastTranslationTextWithEndNeume = null;\n\t              }\n\t              continue;\n\t            }\n\t\n\t            // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n\t            if (curr && curr.notes && (curr.notes[0].shape === _ExsurgeChant.NoteShape.Quilisma || curr.notes[0].shape === _ExsurgeChant.NoteShape.Inclinatum)) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n\t            // whether there would be too much space introduced between\n\t            if (cne.keepWithNext === true) {\n\t              if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine) this.maxNumNotationsOnLine = this.numNotationsOnLine;\n\t              this.numNotationsOnLine--;\n\t            } else break;\n\t          }\n\t\n\t          // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n\t          if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\t\n\t          // determine the neumes we can space apart, if we do end up justifying\n\t          curr = this.findNeumesToJustify(prevLyrics);\n\t\n\t          this.lastLyrics = prevLyrics;\n\t          if (this.maxNumNotationsOnLine) {\n\t            // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n\t            // Check how much space we would have without the extra notations\n\t            var extraSpace = this.getWhitespaceOnRight(ctxt);\n\t            if (extraSpace / this.toJustify.length > ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals) {\n\t              _ExsurgeDrawing.LyricArray.mergeInArray(prevLyrics, notations.slice(this.notationsStartIndex + this.numNotationsOnLine, this.notationsStartIndex + this.maxNumNotationsOnLine));\n\t              this.numNotationsOnLine = this.maxNumNotationsOnLine;\n\t              delete this.maxNumNotationsOnLine;\n\t            }\n\t          }\n\t\n\t          // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n\t          var next = this.score.notations[this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex];\n\t          if (next && next.hasLyrics() && (next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable || next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable)) {\n\t            this.toJustify.push(this.custos);\n\t          }\n\t\n\t          if (j >= 1 && notations[j].isDivider && notations[j - 1].constructor === _ExsurgeChantSigns.Custos) {\n\t            // reverse the order: put the divider first, and end the line with the custos.\n\t            prevLyrics = [];\n\t            for (i = j - 2; i >= this.notationsStartIndex; i--) {\n\t              if (notations[i].hasLyrics()) {\n\t                _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n\t                break;\n\t              }\n\t            }\n\t            // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            this.positionNotationElement(ctxt, prevLyrics, notations[j - 2], notations[j], this.staffRight, condensableSpaces);\n\t            this.custos = notations[j - 1];\n\t            this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t          }\n\t\n\t          // we are at the end of the line!\n\t          break;\n\t        }\n\t\n\t        if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t        if (lastTranslationTextWithEndNeume && curr === lastTranslationTextWithEndNeume.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = null;\n\t        } else if (curr.translationText && curr.translationText.length && curr.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = curr;\n\t        }\n\t\n\t        curr.line = this;\n\t        this.numNotationsOnLine++;\n\t\n\t        if (curr.isClef) ctxt.activeClef = curr;\n\t\n\t        // line breaks are a special case indicating to stop processing here\n\t        if (curr.constructor === _ExsurgeChant.ChantLineBreak && width > 0) {\n\t          this.justify = curr.justify || this.extraTextOnlyIndex !== null || this.getWhitespaceOnRight(ctxt) < 0;\n\t          if (this.justify) this.findNeumesToJustify(prevLyrics);\n\t          break;\n\t        }\n\t\n\t        if (curr.constructor === _ExsurgeChantSigns.Custos) {\n\t          this.custos = curr;\n\t        } else if (curr.isNeume) {\n\t          this.custos = null;\n\t        }\n\t      }\n\t\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n\t      var last = notations[lastIndex] || {};\n\t      while (lastIndex > 0 && (last.constructor === _ExsurgeChant.ChantLineBreak || last.constructor === _ExsurgeChantSigns.Custos || last.constructor === _ExsurgeChant.TextOnly)) {\n\t        last = notations[--lastIndex];\n\t      }\n\t      var isLastLine = this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n\t      if (this.justify && this.extraTextOnlyIndex !== null || width > 0 && isLastLine) {\n\t        // this is the last chant line, or it has extra TextOnly elements at the end\n\t        if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n\t        this.justify = (!isLastLine || last.isDivider) && this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <= ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n\t      }\n\t\n\t      if (!this.custos) {\n\t        // create the automatic custos at the end of the line if there are neumes left in the notations\n\t        for (i = this.notationsStartIndex + this.numNotationsOnLine; i < notations.length; i++) {\n\t          var notation = notations[i];\n\t\n\t          if (notation.isNeume) {\n\t            this.custos = new _ExsurgeChantSigns.Custos(true);\n\t            ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n\t            this.custos.performLayout(ctxt);\n\t\n\t            if (this.justify) {\n\t              // Put the custos at the very end of the line\n\t              this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t            } else {\n\t              this.custos.bounds.x = prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n\t            }\n\t            // nothing more to see here...\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.lastLyricsBeforeTextOnly) {\n\t        this.lastLyrics = this.lastLyricsBeforeTextOnly;\n\t        delete this.lastLyricsBeforeTextOnly;\n\t      }\n\t\n\t      // find the final lyric and mark it as connecting if needed.\n\t      if (width > 0) {\n\t        var whitespace = this.getWhitespaceOnRight();\n\t        var rightEdge = this.staffRight;\n\t        if (whitespace < 0) {\n\t          rightEdge -= whitespace;\n\t        }\n\t      }\n\t      i = 0;\n\t      while (this.lastLyrics && this.lastLyrics[i]) {\n\t        var lyrics = this.lastLyrics[i];\n\t        if (lyrics.allowsConnector()) {\n\t          lyrics.setNeedsConnector(true, 0);\n\t          if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t            whitespace = rightEdge - lyrics.getRight();\n\t            // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n\t            if (whitespace < 0) {\n\t              var minHyphenWidth = Math.max(ctxt.hyphenWidth + whitespace, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t        }\n\t        ++i;\n\t      }\n\t\n\t      // if the provided width is less than zero, then set the width of the line\n\t      // based on the last notation\n\t      if (width <= 0) {\n\t        this.staffRight = notations[this.notationsStartIndex + this.numNotationsOnLine - 1].bounds.right();\n\t        this.justify = false;\n\t      }\n\t\n\t      // Justify the line if we need to\n\t      this.justifyElements(ctxt, this.justify, condensableSpaces);\n\t\n\t      this.centerDividers();\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"centerDividers\",\n\t    value: function centerDividers() {\n\t      var lastIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex,\n\t          curr;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        curr = this.score.notations[i];\n\t\n\t        if (curr && curr.isDivider) {\n\t          var j = 1;\n\t          var prev = this.score.notations[i - 1];\n\t          var next = i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n\t          if (prev === next && next === this.custos) {\n\t            prev = this.score.notations[i - 2];\n\t          }\n\t          if (prev && next) {\n\t            //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n\t            var oldBoundsX = curr.bounds.x;\n\t            var leftPoint = prev instanceof _ExsurgeChant.TextOnly && prev.hasLyrics() ? prev.lyrics[0].getRight() : prev.bounds.right(),\n\t                rightPoint = next instanceof _ExsurgeChant.TextOnly && next.hasLyrics() ? next.lyrics[0].getLeft() : next.bounds.x;\n\t            curr.bounds.x = (leftPoint + rightPoint - curr.bounds.width) / 2;\n\t            if (curr.hasLyrics()) {\n\t              var offset = oldBoundsX - curr.bounds.x;\n\t              for (j = curr.lyrics.length - 1; j >= 0; j--) {\n\t                curr.lyrics[j].bounds.x += offset;\n\t                curr.lyrics[j].needsLayout = true;\n\t              }\n\t            }\n\t          } else if (i === lastIndex - 1 && this.justify && (curr.constructor === _ExsurgeChantSigns.DoubleBar || curr.constructor === _ExsurgeChantSigns.FullBar)) {\n\t            curr.bounds.x = this.staffRight - curr.bounds.width;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"findNeumesToJustify\",\n\t    value: function findNeumesToJustify(prevLyrics) {\n\t      this.toJustify = [];\n\t      var prev,\n\t          curr = null,\n\t          next = null,\n\t          nextOrCurr = null,\n\t          lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = nextOrCurr;\n\t        curr = this.score.notations[i];\n\t        next = curr.isAccidental && this.score.notations[++i];\n\t        nextOrCurr = next || curr;\n\t        var hasLyrics = nextOrCurr.hasLyrics();\n\t\n\t        if (!curr || !prev) continue;\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) continue;\n\t\n\t        if (prev !== null) {\n\t          _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, prev.lyrics);\n\t          if (prev.keepWithNext === true) continue;\n\t        }\n\t\n\t        if (!curr.isDivider && prevLyrics.length && prevLyrics[0].allowsConnector() && hasLyrics) continue;\n\t\n\t        if (nextOrCurr.constructor === _ExsurgeChant.ChantLineBreak) continue;\n\t\n\t        if (nextOrCurr === this.custos && !hasLyrics) continue;\n\t\n\t        if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\t\n\t        // otherwise, we can add space before this element\n\t        this.toJustify.push(curr);\n\t      }\n\t      if (nextOrCurr !== null) _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n\t      return nextOrCurr;\n\t    }\n\t  }, {\n\t    key: \"getWhitespaceOnRight\",\n\t    value: function getWhitespaceOnRight(ctxt) {\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var last = notations[lastIndex - 1];\n\t      if (this.extraTextOnlyIndex !== null && last.constructor === _ExsurgeChant.TextOnly) {\n\t        lastIndex = this.extraTextOnlyIndex;\n\t        last = notations[lastIndex - 1];\n\t      }\n\t      var lastRightNeume = last ? last.bounds.right() + last.calculatedTrailingSpace : 0;\n\t      var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n\t      var lastRightLyric = lastLyrics.length ? _ExsurgeDrawing.LyricArray.getRight(lastLyrics) : 0;\n\t\n\t      if (this.custos) {\n\t        lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n\t        if (this.custos.hasLyrics()) {\n\t          lastRightLyric = _ExsurgeDrawing.LyricArray.getRight(this.custos.lyrics);\n\t        }\n\t      } else if (ctxt && lastIndex < notations.length) {\n\t        lastRightNeume += _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n\t      }\n\t      return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n\t    }\n\t  }, {\n\t    key: \"justifyElements\",\n\t    value: function justifyElements(ctxt, doJustify, condensableSpaces) {\n\t      var i;\n\t      var toJustify = this.toJustify || [];\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n\t      // move the custos over.\n\t      // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n\t      var lastNotation = notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n\t      var extraSpaceBeforeCustos = this.staffRight < Infinity && this.custos && lastNotation.keepWithNext && this.custos.bounds.x - lastNotation.bounds.right() - lastNotation.calculatedTrailingSpace;\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n\t        i = 0;\n\t        while (this.lastLyrics && this.lastLyrics[i]) {\n\t          var lyrics = this.lastLyrics[i];\n\t          if (lyrics.allowsConnector()) {\n\t            var connectorWidth = lyrics.getConnectorWidth();\n\t            if (ctxt.minLyricWordSpacing < connectorWidth) {\n\t              var minHyphenWidth = Math.max(connectorWidth - extraSpaceBeforeCustos, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t          ++i;\n\t        }\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t\n\t      // first step of justification is to determine how much space we have to use up\n\t      var extraSpace = this.getWhitespaceOnRight();\n\t\n\t      if (Math.abs(extraSpace) < 0.5 || extraSpace > 0 && (doJustify && toJustify.length === 0 || !doJustify)) return;\n\t\n\t      this.condensableSpaces = condensableSpaces;\n\t\n\t      var curr, prev;\n\t      var offset = 0;\n\t      var increment = extraSpace / toJustify.length;\n\t      var multiplier = 0;\n\t      var toJustifyIndex = 0;\n\t      if (extraSpace < 0) {\n\t        toJustify = condensableSpaces.filter(function (s) {\n\t          return s.condensable > 0;\n\t        });\n\t        multiplier = extraSpace / condensableSpaces.sum;\n\t        increment = 0;\n\t      }\n\t      var nextToJustify = toJustify[toJustifyIndex++];\n\t      var incrementOffsetAtNextChance = false;\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = curr;\n\t        curr = notations[i];\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) {\n\t          continue;\n\t        }\n\t\n\t        if (!multiplier && curr === this.custos) {\n\t          if (curr.hasLyrics()) {\n\t            curr.bounds.x = Math.min(curr.bounds.x + (this.staffRight - _ExsurgeDrawing.LyricArray.getRight(curr.lyrics)), this.staffRight - curr.bounds.width);\n\t            offset += increment;\n\t          } else {\n\t            curr.bounds.x = Math.min(curr.bounds.x + offset, this.staffRight - curr.bounds.width);\n\t          }\n\t          continue;\n\t        }\n\t\n\t        if (multiplier) {\n\t          if (nextToJustify && nextToJustify.notation === curr) {\n\t            offset += multiplier * nextToJustify.condensable;\n\t            nextToJustify = toJustify[toJustifyIndex++];\n\t          }\n\t        } else if (nextToJustify === curr) {\n\t          if (prev.hasNoWidth) {\n\t            incrementOffsetAtNextChance = true;\n\t          } else {\n\t            offset += increment;\n\t          }\n\t          nextToJustify = toJustify[toJustifyIndex++];\n\t        } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n\t          incrementOffsetAtNextChance = false;\n\t          offset += increment;\n\t        }\n\t\n\t        curr.bounds.x += offset;\n\t      }\n\t\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"handleEndBrace\",\n\t    value: function handleEndBrace(ctxt, note, i) {\n\t      var startBrace = ctxt.lastStartBrace;\n\t      if (!startBrace) return;\n\t      // calculate the y value of the brace by iterating over all notations\n\t      // under/over the brace.\n\t      var y;\n\t      var k = startBrace.notationIndex;\n\t      var notations = this.score.notations;\n\t      var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n\t      var startNote = startBrace.note;\n\t\n\t      if (startBrace.isAbove) {\n\t        y = Math.min.apply(Math, [ctxt.calculateHeightFromStaffPosition(4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.y - dy;\n\t        }))));\n\t      } else {\n\t        y = Math.max.apply(Math, [ctxt.calculateHeightFromStaffPosition(-4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.bottom() + dy;\n\t        }))));\n\t      }\n\t\n\t      var addAcuteAccent = false;\n\t\n\t      if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.RoundBrace) {\n\t        this.braces.push(new _ExsurgeDrawing.RoundBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove));\n\t      } else {\n\t        if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.AccentedCurlyBrace) addAcuteAccent = true;\n\t\n\t        this.braces.push(new _ExsurgeDrawing.CurlyBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove, addAcuteAccent));\n\t      }\n\t\n\t      delete ctxt.lastStartBrace;\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this2 = this;\n\t\n\t      this.ledgerLines = []; // clear any existing ledger lines\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // an element needs to have a staffPosition property, as well as the standard\n\t      // bounds property. so it could be a note, or it could be a custos\n\t      // offsetX can be used to add to the position info for the element,\n\t      // useful in the case of notes.\n\t      var processElementForLedgerLine = function processElementForLedgerLine(element) {\n\t        var endElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element;\n\t        var staffPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.staffPosition;\n\t        var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element.neume ? element.neume.bounds.x : 0;\n\t\n\t        // do we need a ledger line for this note?\n\t\n\t        if (staffPosition >= 5 || staffPosition <= -5) {\n\t          var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n\t          var x2 = offsetX + endElem.bounds.x + endElem.bounds.width + ctxt.intraNeumeSpacing;\n\t\n\t          // round the staffPosition to the nearest line\n\t          if (staffPosition > 0) staffPosition = staffPosition - (staffPosition - 1) % 2;else staffPosition = staffPosition - (staffPosition + 1) % 2;\n\t\n\t          // if we have a ledger line close by, then average out the distance between the two\n\t          var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\t\n\t          if (_this2.ledgerLines.length > 0 && _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 + minLedgerSeparation >= x1) {\n\t            // average out the distance\n\t            var half = (x1 - _this2.ledgerLines[_this2.ledgerLines.length - 1].x2) / 2;\n\t            _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 += half;\n\t            x1 -= half;\n\t          }\n\t\n\t          // never let a ledger line extend past the staff width\n\t          if (x2 > _this2.staffRight) x2 = _this2.staffRight;\n\t\n\t          // finally, add the ledger line\n\t          _this2.ledgerLines.push({\n\t            x1: x1,\n\t            x2: x2,\n\t            staffPosition: staffPosition\n\t          });\n\t        }\n\t      };\n\t\n\t      var episemata = []; // keep track of episemata in case we can connect some\n\t      var startBrace = null;\n\t      var minY = Number.MAX_VALUE,\n\t          maxY = Number.MIN_VALUE; // for braces\n\t\n\t      var positionNonLyricText = function positionNonLyricText(text, neume, rightX) {\n\t        text.setMaxWidth(ctxt, _this2.staffRight);\n\t        //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n\t        text.bounds.x = 0;\n\t        if (rightX) text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n\t        var beyondStaffRight = neume.bounds.x + text.bounds.right() - _this2.staffRight;\n\t        if (beyondStaffRight > 0) {\n\t          text.bounds.x -= beyondStaffRight;\n\t        }\n\t        if (neume.bounds.x + text.bounds.x < 0) {\n\t          text.bounds.x = -neume.bounds.x;\n\t        }\n\t      };\n\t\n\t      // make a final pass over all of the notes to add any necessary\n\t      // ledger lines and to smooth out episemata\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        var neume = notations[i];\n\t\n\t        minY = Math.min(minY, neume.bounds.y);\n\t        maxY = Math.max(maxY, neume.bounds.bottom());\n\t\n\t        if (neume.constructor === _ExsurgeChantSigns.Custos) {\n\t          processElementForLedgerLine(neume);\n\t          continue;\n\t        }\n\t\n\t        // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n\t        if (neume.alText) {\n\t          for (var j = 0; j < neume.alText.length; j++) {\n\t            positionNonLyricText(neume.alText[j], neume);\n\t          }\n\t        }\n\t\n\t        // set up horizontal position of translations\n\t        if (neume.translationText) {\n\t          for (j = 0; j < neume.translationText.length; j++) {\n\t            var text = neume.translationText[j];\n\t            if (text.endNeume) {\n\t              var rightX = text.endNeume.hasLyrics() ? text.endNeume.bounds.x + Math.max.apply(Math, _toConsumableArray(text.endNeume.lyrics.map(function (l) {\n\t                return l.bounds.right();\n\t              }))) : text.endNeume.bounds.right();\n\t              rightX -= neume.bounds.x;\n\t              positionNonLyricText(text, neume, rightX);\n\t            } else {\n\t              positionNonLyricText(text, neume);\n\t            }\n\t          }\n\t        }\n\t\n\t        // if it's not a neume then just skip here\n\t        if (!neume.isNeume) continue;\n\t\n\t        for (j = 0; j < neume.ledgerLines.length; j++) {\n\t          var ll = neume.ledgerLines[j];\n\t          processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n\t        }\n\t\n\t        for (j = 0; j < neume.notes.length; j++) {\n\t          var k,\n\t              note = neume.notes[j];\n\t\n\t          // blend episemata as we're able\n\t          if (note.episemata.length === 0) episemata = [];\n\t          for (k = 0; k < note.episemata.length; k++) {\n\t            var episema = note.episemata[k];\n\t\n\t            var spaceBetweenEpisemata = 0;\n\t\n\t            // calculate the distance between the last episemata and this one...\n\t            // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n\t            if (episemata.length > 0) spaceBetweenEpisemata = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.right());\n\t\n\t            // we try to blend the episema if we're able.\n\t            if (episemata.length === 0 || episemata[episemata.length - 1].positionHint !== episema.positionHint || episemata[episemata.length - 1].terminating === true || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Left || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Right || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 && note.glyphVisualizer.glyphCode !== _ExsurgeDrawing.GlyphCode.None) {\n\t              // start a new set of episemata to potentially blend\n\t              episemata = [episema];\n\t            } else {\n\t              // blend all previous with this one\n\t              var newY;\n\t\n\t              if (episema.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) newY = Math.max(episema.bounds.y, episemata[episemata.length - 1].bounds.y);else newY = Math.min(episema.bounds.y, episemata[episemata.length - 1].bounds.y);\n\t\n\t              if (episema.bounds.y !== newY) episema.bounds.y = newY;else {\n\t                for (var l = 0; l < episemata.length; l++) {\n\t                  episemata[l].bounds.y = newY;\n\t                }\n\t              }\n\t\n\t              // extend the last episema to meet the new one\n\t              var newWidth = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.x);\n\t              if (newWidth < 0) {\n\t                newWidth *= -1;\n\t                episemata[episemata.length - 1].bounds.x -= newWidth;\n\t              }\n\t              episemata[episemata.length - 1].bounds.width = newWidth;\n\t\n\t              episemata.push(episema);\n\t            }\n\t          }\n\t\n\t          if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\t\n\t          if (note.braceStart) {\n\t            ctxt.lastStartBrace = startBrace = note.braceStart;\n\t            startBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we still have an active brace, that means it spands two chant lines!\n\t      if (startBrace !== null) {\n\t        if (this.custos) {\n\t          // if the next end brace is on the first note following the line break, simply use it with the custos\n\t          // Do the same if there is only an accidental between\n\t          // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n\t          var nextNotation = notations[lastIndex];\n\t          var nextNote = nextNotation.notes && nextNotation.notes[0];\n\t          var nextNotationButOne = notations[lastIndex + 1];\n\t          var nextNoteButOne = nextNotationButOne && nextNotationButOne.notes && nextNotationButOne.notes[0];\n\t          var braceEnd = nextNote && nextNote.braceEnd || nextNotation.isAccidental && nextNoteButOne && nextNoteButOne.braceEnd;\n\t          if (braceEnd) {\n\t            this.custos.braceEnd = braceEnd;\n\t            this.handleEndBrace(ctxt, this.custos, i);\n\t          } else {\n\t            this.braceStart = startBrace;\n\t            this.custos.braceEnd = new _ExsurgeChantMarkings.BracePoint(this.custos, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Right);\n\t            this.handleEndBrace(ctxt, this.custos, i - 1);\n\t            ctxt.lastStartBrace = new _ExsurgeChantMarkings.BracePoint(null, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Left);\n\t            ctxt.lastStartBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // don't forget to also include the final custos, which may need a ledger line too\n\t      if (this.custos) processElementForLedgerLine(this.custos);\n\t    }\n\t\n\t    // this is where the real core of positioning neumes takes place\n\t    // returns true if positioning was able to fit the neume before rightNotationBoundary.\n\t    // returns false if cannot fit before given right margin.\n\t    // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n\t\n\t  }, {\n\t    key: \"positionNotationElement\",\n\t    value: function positionNotationElement(ctxt, prevLyrics, prev, curr, rightNotationBoundary) {\n\t      var condensableSpaces = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\t\n\t      if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n\t      var i,\n\t          space = { notation: curr },\n\t          fixedX = false;\n\t\n\t      // To begin we just place the current notation right after the previous,\n\t      // irrespective of lyrics.\n\t      // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n\t      // we force it to have the same x as the previous group.\n\t      if ((!curr.hasNoWidth || curr.firstWithNoWidth === curr) && prev.firstWithNoWidth) {\n\t        curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n\t        fixedX = true;\n\t      } else {\n\t        curr.bounds.x = prev.bounds.right();\n\t      }\n\t\n\t      if (curr.constructor === _ExsurgeChant.TextOnly && this.extraTextOnlyIndex === null || !curr.hasLyrics() && prev.calculatedTrailingSpace < 0) {\n\t        // We transfer over the trailing space from the previous neume if the current neume is text only,\n\t        // so that the text only neume has a better chance at not needing a connector.\n\t        curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n\t        if (curr.hasLyrics()) curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n\t        if (curr.constructor === _ExsurgeChant.TextOnly && curr.lyrics.length === 1) {\n\t          curr.lyrics[0].setMaxWidth(ctxt, this.staffRight, this.staffRight - _ExsurgeDrawing.LyricArray.getRight(prevLyrics) - ctxt.minLyricWordSpacing);\n\t        }\n\t      } else if (!fixedX) {\n\t        curr.bounds.x += prev.calculatedTrailingSpace;\n\t      }\n\t\n\t      if (curr.hasLyrics() && !prev.isDivider && !prev.isAccidental && this.numNotationsOnLine > 0 && (curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable || curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable)) {\n\t        curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n\t      }\n\t      if (curr.hasNoWidth || fixedX) {\n\t        space.total = space.condensable = 0;\n\t      } else if (this.extraTextOnlyIndex !== null && curr.constructor === _ExsurgeChant.TextOnly) {\n\t        curr.bounds.x = 0;\n\t        space.total = space.condensable = 0;\n\t      } else {\n\t        space.total = curr.bounds.x - prev.bounds.right();\n\t        space.condensable = space.total * ctxt.condensingTolerance;\n\t      }\n\t\n\t      // if the previous notation has no lyrics, then we simply make sure the\n\t      // current notation with lyrics is in the bounds of the line\n\t      if (prevLyrics.length === 0) {\n\t        var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\t\n\t        // if the lyric left is negative, then offset the neume appropriately\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          var currLyric = curr.lyrics[i];\n\t          // we hope for the best!\n\t          // but always use a connector if the lyric has original text that was all used up for the drop cap.\n\t          var needsConnector = currLyric.allowsConnector() && currLyric.dropCap && currLyric.originalText && !currLyric.text;\n\t          currLyric.setNeedsConnector(needsConnector);\n\t          var minLeft = this.staffLeft - this.paddingLeft;\n\t\n\t          if (currLyric.getLeft() < minLeft) curr.bounds.x -= currLyric.getLeft() - minLeft;\n\t\n\t          space.condensable = Math.min(space.condensable, currLyric.getLeft() - minLeft);\n\t          maxRight = Math.max(maxRight, currLyric.getRight());\n\t        }\n\t\n\t        if (maxRight > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      } else {\n\t        if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n\t          curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n\t          space.total = curr.bounds.x - prev.bounds.right();\n\t          space.condensable = space.total * ctxt.condensingTolerance;\n\t        }\n\t      }\n\t\n\t      // if the curr notation has no lyrics, then simply check whether there is enough room\n\t      if (curr.hasLyrics() === false) {\n\t        if (curr.bounds.right() + curr.calculatedTrailingSpace > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we have multiple lyrics on the current or the previous notation,\n\t      // we will have to run several passes over each set of lyrics:\n\t\n\t      // on the first pass, we will check the absolute left-most placement of the new syllables\n\t      // we will make additional passes until everything is stable\n\t      do {\n\t        var hasShifted = false;\n\t        var atLeastOneWithoutConnector = false;\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          if (!curr.lyrics[i].originalText) continue;\n\t          var prevLyricRight = 0;\n\t          var condensableSpacesSincePrevLyric = [];\n\t          var condensableSpaceSincePrevLyric = null;\n\t          if (i < prevLyrics.length && prevLyrics[i]) {\n\t            prevLyricRight = prevLyrics[i].getRight();\n\t            var notationI = condensableSpaces.map(function (s) {\n\t              return s.notation;\n\t            }).lastIndexOf(prevLyrics[i].notation);\n\t            if (notationI >= 0) {\n\t              condensableSpacesSincePrevLyric = condensableSpaces.slice(notationI + 1);\n\t              condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric.map(function (s) {\n\t                return s.condensable;\n\t              }).reduce(function (a, b) {\n\t                return a + b;\n\t              }, 0);\n\t            } else {\n\t              condensableSpacesSincePrevLyric.sum = 0;\n\t            }\n\t          }\n\t\n\t          curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n\t          var currLyricLeft = curr.lyrics[i].getLeft();\n\t          if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n\t            // No connector needed, but include space between words if necessary!\n\t            var extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n\t            if (extraSpace < 0) {\n\t              // push the current element over a bit.\n\t              var shift = prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n\t              curr.bounds.x += shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              hasShifted = shift > 0.5;\n\t            } else {\n\t              condensableSpaceSincePrevLyric = extraSpace;\n\t            }\n\t          } else {\n\t            // we may need a connector yet...\n\t            if (prevLyricRight + 0.1 > currLyricLeft - condensableSpacesSincePrevLyric.sum - space.condensable) {\n\t              // in this case, the lyric elements actually overlap.\n\t              // so nope, no connector needed. instead, we just place the lyrics together\n\t              // fixme: for better text layout, we could actually use the kerning values\n\t              // between the prev and curr lyric elements!\n\t              var _shift = prevLyricRight - currLyricLeft;\n\t              if (_shift < -0.1) {\n\t                (function () {\n\t                  // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n\t                  var multiplier = _shift / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                  var offset = 0;\n\t                  condensableSpacesSincePrevLyric.forEach(function (s) {\n\t                    offset += multiplier * s.condensable;\n\t                    s.notation.bounds.x += offset;\n\t                  });\n\t                })();\n\t              }\n\t              curr.bounds.x += _shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              atLeastOneWithoutConnector = true;\n\t              hasShifted = _shift > 0.5;\n\t            } else {\n\t              // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n\t              if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t                var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t                if (spaceBetweenSyls < ctxt.hyphenWidth) {\n\t                  var minHyphenWidth = prevLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing;\n\t                  // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t                  prevLyrics[i].setConnectorWidth(Math.max(minHyphenWidth, spaceBetweenSyls));\n\t                }\n\t              }\n\t              prevLyrics[i].setNeedsConnector(true);\n\t              prevLyricRight = prevLyrics[i].getRight();\n\t\n\t              if (prevLyricRight + 0.1 > currLyricLeft) {\n\t                var _shift2 = prevLyricRight - currLyricLeft;\n\t                curr.bounds.x += _shift2;\n\t                condensableSpaceSincePrevLyric = 0;\n\t                hasShifted = _shift2 > 0.5;\n\t              } else {\n\t                condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (condensableSpaceSincePrevLyric !== null) {\n\t            if (condensableSpaceSincePrevLyric < condensableSpacesSincePrevLyric.sum + space.condensable) {\n\t              (function () {\n\t                // reduce condensable space so that lyrics retain at least the width of a space character between words:\n\t                var multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                space.condensable *= multiplier;\n\t                if (condensableSpacesSincePrevLyric.sum) {\n\t                  condensableSpacesSincePrevLyric.forEach(function (space) {\n\t                    space.condensable *= multiplier;\n\t                  });\n\t                  condensableSpaces.sum = condensableSpaces.map(function (s) {\n\t                    return s.condensable;\n\t                  }).reduce(function (a, b) {\n\t                    return a + b;\n\t                  }, 0);\n\t                }\n\t              })();\n\t            }\n\t          }\n\t        }\n\t      } while (curr.lyrics.length > 1 && hasShifted && atLeastOneWithoutConnector);\n\t\n\t      for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n\t        var pLyrics = prevLyrics[i];\n\t        if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n\t          currLyricLeft = curr.lyrics[i].getLeft();\n\t          prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n\t          spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t          if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n\t          pLyrics.setConnectorWidth(spaceBetweenSyls);\n\t        }\n\t      }\n\t\n\t      if (curr.bounds.right() + curr.calculatedTrailingSpace < rightNotationBoundary + condensableSpaces.sum + space.condensable && _ExsurgeDrawing.LyricArray.getRight(curr.lyrics, true) <= this.staffRight + condensableSpaces.sum + space.condensable) {\n\t        if (prev.isAccidental) {\n\t          // move the previous accidental up next to the current note:\n\t          var _shift3 = curr.bounds.x - prev.bounds.width - prev.calculatedTrailingSpace - prev.bounds.x;\n\t          prev.bounds.x += _shift3;\n\t          if (Math.abs(_shift3) > 0.1) {\n\t            var lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n\t            condensableSpaces.sum -= lastCondensable.condensable;\n\t            lastCondensable.condensable = 0;\n\t          }\n\t        }\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we made it this far, then the element won't fit on this line.\n\t      return false;\n\t    }\n\t\n\t    /**\n\t     * Find the notation closest to x without going past it\n\t     * @param {number} x\n\t     */\n\t\n\t  }, {\n\t    key: \"bisectNotationAtX\",\n\t    value: function bisectNotationAtX(x) {\n\t      var useMidpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      var minIndex = -1,\n\t          maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n\t          curIndex = minIndex + (maxIndex - minIndex >> 1),\n\t          notations = this.score.notations.slice(this.notationsStartIndex, this.notationsStartIndex + this.numNotationsOnLine);\n\t\n\t      while (minIndex < curIndex) {\n\t        var _notation = notations[curIndex];\n\t        var notationX = _notation.bounds.x;\n\t        if (notationX > x) {\n\t          maxIndex = curIndex;\n\t        } else {\n\t          minIndex = curIndex;\n\t        }\n\t        curIndex = minIndex + (maxIndex - minIndex >> 1);\n\t      }\n\t      var notation = notations[curIndex];\n\t      if (useMidpoint && notation && notation.bounds.width === 0 && curIndex + 1 < notations.length) {\n\t        var nextNotation = notations[curIndex + 1],\n\t            closenessToLeft = x - notation.bounds.x,\n\t            closenessToRight = nextNotation.bounds.x - x;\n\t        if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft) ++curIndex;\n\t      }\n\t      return notations[curIndex];\n\t    }\n\t  }]);\n\t\n\t  return ChantLine;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virga = exports.Tristropha = exports.TorculusResupinusFlexus = exports.TorculusResupinus = exports.Torculus = exports.ScandicusFlexus = exports.Scandicus = exports.SalicusFlexus = exports.Salicus = exports.Punctum = exports.PunctaInclinata = exports.PorrectusFlexus = exports.Porrectus = exports.Podatus = exports.PesSubpunctis = exports.PesQuassus = exports.Oriscus = exports.Distropha = exports.Clivis = exports.Climacus = exports.Trivirga = exports.Bivirga = exports.Apostropha = exports.Neume = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NeumeBuilder = function () {\n\t  function NeumeBuilder(ctxt, neume) {\n\t    var startingX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\n\t    _classCallCheck(this, NeumeBuilder);\n\t\n\t    this.ctxt = ctxt;\n\t    this.neume = neume;\n\t    this.x = startingX;\n\t    this.lastNote = null;\n\t    this.lineIsHanging = false;\n\t    this.minX = 0;\n\t  }\n\t\n\t  // used to start a hanging line on the left of the next note\n\t\n\t\n\t  _createClass(NeumeBuilder, [{\n\t    key: \"lineFrom\",\n\t    value: function lineFrom(note) {\n\t      var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n\t      if (this.x === 0 && previousNotation && previousNotation.notes && previousNotation.trailingSpace === 0) {\n\t        this.lastNote = previousNotation.notes.slice(-1)[0];\n\t        this.minX = -this.ctxt.neumeLineWeight;\n\t      } else {\n\t        this.lastNote = note;\n\t        this.lineIsHanging = true;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // add a note, with a connecting line on the left if we have one\n\t\n\t  }, {\n\t    key: \"noteAt\",\n\t    value: function noteAt(note, glyph) {\n\t      var withLineTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t      if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\t\n\t      if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\t\n\t      note.setGlyph(this.ctxt, glyph);\n\t      var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\t\n\t      var needsLine = withLineTo && this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, this.lineIsHanging);\n\t        this.neume.addVisualizer(line);\n\t        line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\t\n\t        if (!noteAlignsRight) this.x = line.bounds.x;\n\t      }\n\t\n\t      // if this is the first note of a right aligned glyph (probably an initio debilis),\n\t      // then there's nothing to worry about. but if it's not then first, then this\n\t      // subtraction will right align it visually\n\t      if (noteAlignsRight && this.lastNote) note.bounds.x = this.x - note.bounds.width;else {\n\t        note.bounds.x = this.x;\n\t        this.x += note.bounds.width;\n\t      }\n\t\n\t      this.neume.addVisualizer(note);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t\n\t    // a special form of noteAdd that creates a virga\n\t    // uses a punctum cuadratum and a line rather than the virga glyphs\n\t\n\t  }, {\n\t    key: \"virgaAt\",\n\t    value: function virgaAt(note) {\n\t      var withLineTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      // add the punctum for the virga\n\t      this.noteAt(note, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // add a line for the virga\n\t      var line = new _ExsurgeDrawing.VirgaLineVisualizer(this.ctxt, note);\n\t      this.x -= line.bounds.width;\n\t      line.bounds.x = this.x;\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"advanceBy\",\n\t    value: function advanceBy(x) {\n\t      this.lastNote = null;\n\t      this.lineIsHanging = false;\n\t\n\t      this.x += x;\n\t\n\t      return this;\n\t    }\n\t\n\t    // for terminating hanging lines with no lower notes\n\t\n\t  }, {\n\t    key: \"withLineEndingAt\",\n\t    value: function withLineEndingAt(note) {\n\t      if (this.lastNote === null) return;\n\t\n\t      var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n\t      this.neume.addVisualizer(line);\n\t      this.x -= line.bounds.width;\n\t      line.bounds.x = this.x;\n\t\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPodatus\",\n\t    value: function withPodatus(lowerNote, upperNote) {\n\t      var upperGlyph;\n\t      var lowerGlyph;\n\t\n\t      if (lowerNote.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        // liquescent upper note or not?\n\t        if (upperNote.liquescent === _ExsurgeChant.LiquescentType.None) upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;else upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.BeginningAscLiquescent;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Ascending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Descending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t      } else {\n\t        // standard shape\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PodatusLower;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t      }\n\t\n\t      // allow a quilisma pes\n\t      if (lowerNote.shape === _ExsurgeChant.NoteShape.Quilisma) lowerGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;\n\t\n\t      this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\t\n\t      // make sure we don't have lines connected to the podatus\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withClivis\",\n\t    value: function withClivis(upper, lower) {\n\t      var lowerGlyph;\n\t\n\t      if (upper.shape === _ExsurgeChant.NoteShape.Oriscus) this.noteAt(upper, _ExsurgeDrawing.GlyphCode.OriscusDes, false);else this.lineFrom(lower).noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (lower.liquescent === _ExsurgeChant.LiquescentType.Ascending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (lower.liquescent === _ExsurgeChant.LiquescentType.Descending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.noteAt(lower, lowerGlyph);\n\t\n\t      // make sure we don't have lines connected to the clivis\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t\n\t    // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n\t\n\t  }, {\n\t    key: \"withInclinata\",\n\t    value: function withInclinata(notes) {\n\t      var staffPosition = notes[0].staffPosition,\n\t          prevStaffPosition = notes[0].staffPosition;\n\t\n\t      // it is important to advance by the width of the inclinatum glyph itself\n\t      // rather than by individual note widths, so that any liquescents are spaced\n\t      // the same as non-liquscents\n\t      var advanceWidth = _ExsurgeGlyphs.Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\t\n\t      // now add all the punctum inclinatum\n\t      for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n\t        var note = notes[i];\n\t\n\t        if (note.liquescent & _ExsurgeChant.LiquescentType.Small) note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent);else if (note.liquescent & _ExsurgeChant.LiquescentType.Large)\n\t          // fixme: is the large inclinatum liquescent the same as the apostropha?\n\t          note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.Stropha);\n\t          // fixme: some climaci in the new chant books end with a punctum quadratum\n\t          // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n\t        else note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatum);\n\t\n\t        staffPosition = note.staffPosition;\n\t\n\t        var multiple = Math.abs(prevStaffPosition - staffPosition);\n\t        switch (multiple) {\n\t          case 0:\n\t            multiple = 1.1;\n\t            break;\n\t          default:\n\t            multiple *= 2 / 3;\n\t            break;\n\t        }\n\t\n\t        if (i > 0) this.x += advanceWidth * multiple;\n\t\n\t        note.bounds.x = this.x;\n\t\n\t        this.neume.addVisualizer(note);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPorrectusSwash\",\n\t    value: function withPorrectusSwash(start, end) {\n\t      var needsLine = this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, start, this.lineIsHanging);\n\t        this.x = Math.max(this.minX, this.x - line.bounds.width);\n\t        line.bounds.x = this.x;\n\t        this.neume.addVisualizer(line);\n\t      }\n\t\n\t      var glyph;\n\t\n\t      switch (start.staffPosition - end.staffPosition) {\n\t        case 1:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus1;\n\t          break;\n\t        case 2:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus2;\n\t          break;\n\t        case 3:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus3;\n\t          break;\n\t        case 4:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus4;\n\t          break;\n\t        default:\n\t          // fixme: should we generate an error here?\n\t          glyph = _ExsurgeDrawing.GlyphCode.None;\n\t          break;\n\t      }\n\t\n\t      start.setGlyph(this.ctxt, glyph);\n\t      start.bounds.x = this.x;\n\t\n\t      // the second glyph does not draw anything, but it still has logical importance for the editing\n\t      // environment...it can respond to changes which will then change the swash glyph of the first.\n\t      end.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.None);\n\t\n\t      this.x = start.bounds.right();\n\t      end.bounds.x = this.x - end.bounds.width;\n\t\n\t      this.neume.addVisualizer(start);\n\t      this.neume.addVisualizer(end);\n\t\n\t      this.lastNote = end;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return NeumeBuilder;\n\t}();\n\t\n\t/*\n\t * Neumes base class\n\t */\n\t\n\t\n\tvar Neume = exports.Neume = function (_ChantNotationElement) {\n\t  _inherits(Neume, _ChantNotationElement);\n\t\n\t  function Neume() {\n\t    var notes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\t\n\t    _classCallCheck(this, Neume);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Neume.__proto__ || Object.getPrototypeOf(Neume)).call(this));\n\t\n\t    _this.isNeume = true; // poor man's reflection\n\t    _this.notes = notes;\n\t\n\t    for (var i = 0; i < notes.length; i++) {\n\t      notes[i].neume = _this;\n\t    }return _this;\n\t  }\n\t\n\t  _createClass(Neume, [{\n\t    key: \"addNote\",\n\t    value: function addNote(note) {\n\t      note.neume = this;\n\t      this.notes.push(note);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      this.ledgerLines = this.requiresLedgerLine();\n\t\n\t      // allow subclasses an opportunity to position their own markings...\n\t      this.positionMarkings();\n\t\n\t      // layout the markings of the notes\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        var j;\n\t\n\t        for (j = 0; j < note.episemata.length; j++) {\n\t          note.episemata[j].performLayout(ctxt);\n\t          this.addVisualizer(note.episemata[j]);\n\t        }\n\t\n\t        for (j = 0; j < note.morae.length; j++) {\n\t          note.morae[j].performLayout(ctxt);\n\t          this.addVisualizer(note.morae[j]);\n\t        }\n\t\n\t        // if the note has an ictus, then add it here\n\t        if (note.ictus) {\n\t          note.ictus.performLayout(ctxt);\n\t          this.addVisualizer(note.ictus);\n\t        }\n\t\n\t        if (note.accent) {\n\t          note.accent.performLayout(ctxt);\n\t          this.addVisualizer(note.accent);\n\t        }\n\t\n\t        if (note.choralSign) {\n\t          note.choralSign.performLayout(ctxt);\n\t          this.addVisualizer(note.choralSign);\n\t        }\n\t\n\t        // braces are handled by the chant line, so we don't mess with them here\n\t        // this is because brace size depends on chant line logic (neume spacing,\n\t        // justification, etc.) so they are considered chant line level\n\t        // markings rather than note level markings\n\t      }\n\t\n\t      this.origin.x = this.notes[0].origin.x;\n\t      this.origin.y = this.notes[0].origin.y;\n\t\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"requiresLedgerLine\",\n\t    value: function requiresLedgerLine() {\n\t      var firstAbove = false,\n\t          needsAbove = false,\n\t          firstBelow = false,\n\t          needsBelow = false,\n\t\n\t      // isPorrectus = false,\n\t      result = [];\n\t\n\t      if (!this.notes) return result;\n\t\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var note = this.notes[i];\n\t        var staffPosition = note.staffPosition;\n\t        if (staffPosition >= 4) {\n\t          needsAbove = needsAbove || staffPosition >= 5;\n\t          if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n\t          if (staffPosition >= 5) continue;\n\t        } else if (staffPosition <= -4) {\n\t          needsBelow = needsBelow || staffPosition <= -5;\n\t          if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n\t          if (staffPosition <= -5) continue;\n\t        }\n\t        if (needsAbove || needsBelow) {\n\t          var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n\t          result.push({\n\t            element: this.notes[firstAbove || firstBelow || 0],\n\t            endElem: this.notes[endI],\n\t            staffPosition: needsAbove ? 5 : -5\n\t          });\n\t          firstAbove = firstBelow = needsAbove = needsBelow = false;\n\t        }\n\t        // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n\t      }\n\t      if (needsAbove || needsBelow) {\n\t        result.push({\n\t          element: this.notes[firstAbove || firstBelow || 0],\n\t          endElem: this.notes[this.notes.length - 1],\n\t          staffPosition: needsAbove ? 5 : -5\n\t        });\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t  }, {\n\t    key: \"build\",\n\t    value: function build(ctxt) {\n\t      return new NeumeBuilder(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemata\",\n\t    value: function positionEpisemata(note, position) {\n\t      var i;\n\t      for (i = 0; i < note.episemata.length; i++) {\n\t        if (note.episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) note.episemata[i].positionHint = position;\n\t      }if (note.choralSign) note.choralSign.positionHint = position;\n\t      return note.episemata.length;\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataAbove\",\n\t    value: function positionEpisemataAbove(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Above);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataBelow\",\n\t    value: function positionEpisemataBelow(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"positionPodatusEpisemata\",\n\t    value: function positionPodatusEpisemata(bottomNote, topNote) {\n\t      // 1. episema on lower note by default be below, upper note above\n\t      this.positionEpisemataBelow(bottomNote);\n\t      this.positionEpisemataAbove(topNote);\n\t    }\n\t  }, {\n\t    key: \"positionInclinataMorae\",\n\t    value: function positionInclinataMorae(notes) {\n\t      notes = notes.slice(-2);\n\t      if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition) return;\n\t      var bottomNote = notes[1],\n\t          topNote = notes[0],\n\t          mark;\n\t\n\t      // The mora on the second (lower) note should be below the punctum,\n\t      // if the punctum is on a line and the previous punctum is in the space above.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1 && topNote.staffPosition - bottomNote.staffPosition === 1 && bottomNote.morae.length > 0) {\n\t        mark = bottomNote.morae.slice(-1)[0];\n\t        if (mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionPodatusMorae\",\n\t    value: function positionPodatusMorae(bottomNote, topNote) {\n\t      var mark;\n\t\n\t      // The mora on the first (lower) note should be below it,\n\t      // if it is on a line.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n\t        if (bottomNote.morae.length === 1) {\n\t          mark = bottomNote.morae[0];\n\t        } else if (topNote.morae.length > 1) {\n\t          mark = topNote.morae[0];\n\t        }\n\t        if (mark && mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t\n\t      // if there is a mora on the first note but not on the second, and the neume\n\t      // continues with a punctum higher than the second note, we need to adjust\n\t      // the space after the neume so that it follows immediately with no gap\n\t      if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n\t        bottomNote.morae[0].ignoreBounds = true;\n\t      }\n\t    }\n\t    // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n\t\n\t  }, {\n\t    key: \"positionPodatusMarkings\",\n\t    value: function positionPodatusMarkings(bottomNote, topNote) {\n\t      this.positionPodatusEpisemata(bottomNote, topNote);\n\t      this.positionPodatusMorae(bottomNote, topNote);\n\t    }\n\t\n\t    // just like a clivis, but the first note of the three also works like the second note of the clivis:\n\t    // episema below, unless the middle note also has an episema\n\t\n\t  }, {\n\t    key: \"positionTorculusMarkings\",\n\t    value: function positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n\t      var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n\t      hasTopEpisema = this.positionEpisemata(firstNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below) && hasTopEpisema;\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMorae\",\n\t    value: function positionClivisMorae(firstNote, secondNote) {\n\t      // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n\t      var morae = firstNote.morae.concat(secondNote.morae);\n\t      if (secondNote.morae.length && firstNote.staffPosition - secondNote.staffPosition === 1 && Math.abs(secondNote.staffPosition % 2) === 1) {\n\t        morae.slice(-1)[0].positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionClivisEpisemata\",\n\t    value: function positionClivisEpisemata(firstNote, secondNote) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n\t      this.positionEpisemata(secondNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMarkings\",\n\t    value: function positionClivisMarkings(firstNote, secondNote) {\n\t      this.positionClivisMorae(firstNote, secondNote);\n\t      return this.positionClivisEpisemata(firstNote, secondNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusMarkings\",\n\t    value: function positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n\t      // episemata on first and second note work like a clivis,\n\t      // the second note should have its episema below, unless the first note also has an episema.\n\t      this.positionClivisEpisemata(firstNote, secondNote);\n\t      this.positionPodatusMarkings(secondNote, thirdNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusFlexusMarkings\",\n\t    value: function positionPorrectusFlexusMarkings(first, second, third, fourth) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(first);\n\t      hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n\t      this.positionEpisemata(second, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t\n\t    // subclasses can override this in order to correctly place markings in a neume specific way\n\t\n\t  }, {\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {}\n\t  }]);\n\t\n\t  return Neume;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Apostropha\n\t */\n\t\n\t\n\tvar Apostropha = exports.Apostropha = function (_Neume) {\n\t  _inherits(Apostropha, _Neume);\n\t\n\t  function Apostropha() {\n\t    _classCallCheck(this, Apostropha);\n\t\n\t    return _possibleConstructorReturn(this, (Apostropha.__proto__ || Object.getPrototypeOf(Apostropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Apostropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t      // logic here is this: if first episema is default position, place it above.\n\t      // then place the second one (if there is one) opposite of the first.\n\t      for (var i = 0; i < this.notes[0].episemata.length; i++) {\n\t        if (this.notes[0].episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) this.notes[0].episemata[i].positionHint = positionHint;else positionHint = this.notes[0].episemata[i].positionHint;\n\t\n\t        // now place the next one in the opposite position\n\t        positionHint = positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? _ExsurgeDrawing.MarkingPositionHint.Below : _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Apostropha.prototype.__proto__ || Object.getPrototypeOf(Apostropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], Apostropha.getNoteGlyphCode(this.notes[0]));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }], [{\n\t    key: \"getNoteGlyphCode\",\n\t    value: function getNoteGlyphCode(note) {\n\t      if (note.shape === _ExsurgeChant.NoteShape.Stropha) return _ExsurgeDrawing.GlyphCode.Stropha;\n\t\n\t      if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return _ExsurgeDrawing.GlyphCode.PunctumCavum;\n\t\n\t      return _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t    }\n\t  }]);\n\t\n\t  return Apostropha;\n\t}(Neume);\n\t\n\t/*\n\t * Bivirga\n\t *\n\t * For simplicity in implementation, Bivirga's have two notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Bivirga = exports.Bivirga = function (_Neume2) {\n\t  _inherits(Bivirga, _Neume2);\n\t\n\t  function Bivirga() {\n\t    _classCallCheck(this, Bivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Bivirga.__proto__ || Object.getPrototypeOf(Bivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Bivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Bivirga.prototype.__proto__ || Object.getPrototypeOf(Bivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Bivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Trivirga\n\t *\n\t * For simplicity in implementation, Trivirga's have three notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Trivirga = exports.Trivirga = function (_Neume3) {\n\t  _inherits(Trivirga, _Neume3);\n\t\n\t  function Trivirga() {\n\t    _classCallCheck(this, Trivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Trivirga.__proto__ || Object.getPrototypeOf(Trivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Trivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Trivirga.prototype.__proto__ || Object.getPrototypeOf(Trivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Trivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Climacus\n\t */\n\t\n\t\n\tvar Climacus = exports.Climacus = function (_Neume4) {\n\t  _inherits(Climacus, _Neume4);\n\t\n\t  function Climacus() {\n\t    _classCallCheck(this, Climacus);\n\t\n\t    return _possibleConstructorReturn(this, (Climacus.__proto__ || Object.getPrototypeOf(Climacus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Climacus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Climacus.prototype.__proto__ || Object.getPrototypeOf(Climacus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).withInclinata(this.notes.slice(1));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Climacus;\n\t}(Neume);\n\t\n\t/*\n\t * Clivis\n\t */\n\t\n\t\n\tvar Clivis = exports.Clivis = function (_Neume5) {\n\t  _inherits(Clivis, _Neume5);\n\t\n\t  function Clivis() {\n\t    _classCallCheck(this, Clivis);\n\t\n\t    return _possibleConstructorReturn(this, (Clivis.__proto__ || Object.getPrototypeOf(Clivis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Clivis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionClivisMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Clivis.prototype.__proto__ || Object.getPrototypeOf(Clivis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var upper = this.notes[0];\n\t      var lower = this.notes[1];\n\t\n\t      this.build(ctxt).withClivis(upper, lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Clivis;\n\t}(Neume);\n\t\n\t/*\n\t * Distropha\n\t *\n\t * For simplicity in implementation, Distropha's have two notes in the object\n\t * structure. These technically must be the same pitch though (like Bivirga).\n\t */\n\t\n\t\n\tvar Distropha = exports.Distropha = function (_Neume6) {\n\t  _inherits(Distropha, _Neume6);\n\t\n\t  function Distropha() {\n\t    _classCallCheck(this, Distropha);\n\t\n\t    return _possibleConstructorReturn(this, (Distropha.__proto__ || Object.getPrototypeOf(Distropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Distropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Distropha.prototype.__proto__ || Object.getPrototypeOf(Distropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = ctxt.intraNeumeSpacing;\n\t      glyphCodes.slice(0, 2).forEach(function (glyphCode) {\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.Stropha) glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n\t      });\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Distropha;\n\t}(Neume);\n\t\n\t/*\n\t * Oriscus\n\t */\n\t\n\t\n\tvar Oriscus = exports.Oriscus = function (_Neume7) {\n\t  _inherits(Oriscus, _Neume7);\n\t\n\t  function Oriscus() {\n\t    _classCallCheck(this, Oriscus);\n\t\n\t    return _possibleConstructorReturn(this, (Oriscus.__proto__ || Object.getPrototypeOf(Oriscus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Oriscus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Oriscus.prototype.__proto__ || Object.getPrototypeOf(Oriscus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // determine the glyph to use\n\t      var note = this.notes[0];\n\t      var glyph;\n\t\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;else {\n\t          // by default we take the descending form, unless we can figure out by a lookahead here\n\t          glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;\n\t\n\t          // try to find a neume following this one\n\t          var neume = ctxt.findNextNeume();\n\t\n\t          if (neume) {\n\t            var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t            if (nextNoteStaffPosition > note.staffPosition) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // a single oriscus tries to automatically use the right direction\n\t      // based on the following neumes. if we don't have a manually designated\n\t      // direction, then we reset our layout so that we can try to guess it\n\t      // at next layout phase.\n\t      if (this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending || this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) return;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }]);\n\t\n\t  return Oriscus;\n\t}(Neume);\n\t\n\t/*\n\t * PesQuassus\n\t */\n\t\n\t\n\tvar PesQuassus = exports.PesQuassus = function (_Neume8) {\n\t  _inherits(PesQuassus, _Neume8);\n\t\n\t  function PesQuassus() {\n\t    _classCallCheck(this, PesQuassus);\n\t\n\t    return _possibleConstructorReturn(this, (PesQuassus.__proto__ || Object.getPrototypeOf(PesQuassus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesQuassus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesQuassus.prototype.__proto__ || Object.getPrototypeOf(PesQuassus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var lower = this.notes[0];\n\t      var upper = this.notes[1];\n\t\n\t      var lowerGlyph;\n\t\n\t      var lowerStaffPos = lower.staffPosition;\n\t      var upperStaffPos = upper.staffPosition;\n\t\n\t      if (lower.shape === _ExsurgeChant.NoteShape.Oriscus) lowerGlyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\t\n\t      if (upperStaffPos - lowerStaffPos === 1)\n\t        // use a virga glyph in this case\n\t        builder.virgaAt(upper);else if (upper.liquescent === _ExsurgeChant.LiquescentType.LargeDescending) builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent).withLineEndingAt(lower);else builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesQuassus;\n\t}(Neume);\n\t\n\t/*\n\t * PesSubpunctis\n\t */\n\t\n\t\n\tvar PesSubpunctis = exports.PesSubpunctis = function (_Neume9) {\n\t  _inherits(PesSubpunctis, _Neume9);\n\t\n\t  function PesSubpunctis() {\n\t    _classCallCheck(this, PesSubpunctis);\n\t\n\t    return _possibleConstructorReturn(this, (PesSubpunctis.__proto__ || Object.getPrototypeOf(PesSubpunctis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesSubpunctis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n\t      for (var i = 2; i < this.notes.length; ++i) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes.slice(1));\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesSubpunctis.prototype.__proto__ || Object.getPrototypeOf(PesSubpunctis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // podatus followed by inclinata\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]).advanceBy(ctxt.intraNeumeSpacing * 0.68).withInclinata(this.notes.slice(2));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesSubpunctis;\n\t}(Neume);\n\t\n\t/*\n\t * Podatus\n\t *\n\t * This podatus class handles a few neume types actually, depending on the note\n\t * data: Podatus (including various liquescent types on the upper note),\n\t * Podatus initio debilis, and Quilisma-Pes\n\t */\n\t\n\t\n\tvar Podatus = exports.Podatus = function (_Neume10) {\n\t  _inherits(Podatus, _Neume10);\n\t\n\t  function Podatus() {\n\t    _classCallCheck(this, Podatus);\n\t\n\t    return _possibleConstructorReturn(this, (Podatus.__proto__ || Object.getPrototypeOf(Podatus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Podatus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Podatus.prototype.__proto__ || Object.getPrototypeOf(Podatus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Podatus;\n\t}(Neume);\n\t\n\t/*\n\t * Porrectus\n\t */\n\t\n\t\n\tvar Porrectus = exports.Porrectus = function (_Neume11) {\n\t  _inherits(Porrectus, _Neume11);\n\t\n\t  function Porrectus() {\n\t    _classCallCheck(this, Porrectus);\n\t\n\t    return _possibleConstructorReturn(this, (Porrectus.__proto__ || Object.getPrototypeOf(Porrectus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Porrectus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Porrectus.prototype.__proto__ || Object.getPrototypeOf(Porrectus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var thirdGlyph;\n\t\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) thirdGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else thirdGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Porrectus;\n\t}(Neume);\n\t\n\t/*\n\t * PorrectusFlexus\n\t */\n\t\n\t\n\tvar PorrectusFlexus = exports.PorrectusFlexus = function (_Neume12) {\n\t  _inherits(PorrectusFlexus, _Neume12);\n\t\n\t  function PorrectusFlexus() {\n\t    _classCallCheck(this, PorrectusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (PorrectusFlexus.__proto__ || Object.getPrototypeOf(PorrectusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PorrectusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[0], this.notes[1], this.notes[2], this.notes[3]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PorrectusFlexus.prototype.__proto__ || Object.getPrototypeOf(PorrectusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fourthGlyph;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PorrectusFlexus;\n\t}(Neume);\n\t\n\t// this is some type of pseudo nume right? there is no such thing as a neume\n\t// of puncta inclinata, but this will be part of other composite neumes.\n\t\n\t\n\tvar PunctaInclinata = exports.PunctaInclinata = function (_Neume13) {\n\t  _inherits(PunctaInclinata, _Neume13);\n\t\n\t  function PunctaInclinata() {\n\t    _classCallCheck(this, PunctaInclinata);\n\t\n\t    return _possibleConstructorReturn(this, (PunctaInclinata.__proto__ || Object.getPrototypeOf(PunctaInclinata)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PunctaInclinata, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PunctaInclinata.prototype.__proto__ || Object.getPrototypeOf(PunctaInclinata.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withInclinata(this.notes);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PunctaInclinata;\n\t}(Neume);\n\t\n\t/*\n\t * Punctum\n\t */\n\t\n\t\n\tvar Punctum = exports.Punctum = function (_Neume14) {\n\t  _inherits(Punctum, _Neume14);\n\t\n\t  function Punctum() {\n\t    _classCallCheck(this, Punctum);\n\t\n\t    return _possibleConstructorReturn(this, (Punctum.__proto__ || Object.getPrototypeOf(Punctum)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Punctum, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Punctum.prototype.__proto__ || Object.getPrototypeOf(Punctum.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note = this.notes[0];\n\t      var glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      // determine the glyph to use\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) glyph = _ExsurgeDrawing.GlyphCode.PunctumCavum;else if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatum;else if (note.shape === _ExsurgeChant.NoteShape.Quilisma) glyph = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Punctum;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus\n\t */\n\t\n\t\n\tvar Salicus = exports.Salicus = function (_Neume15) {\n\t  _inherits(Salicus, _Neume15);\n\t\n\t  function Salicus() {\n\t    _classCallCheck(this, Salicus);\n\t\n\t    return _possibleConstructorReturn(this, (Salicus.__proto__ || Object.getPrototypeOf(Salicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Salicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      // by default place episema below\n\t      // fixme: is this correct?\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataBelow(this.notes[i]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Salicus.prototype.__proto__ || Object.getPrototypeOf(Salicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Descending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.virgaAt(third);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Salicus;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus Flexus\n\t */\n\t\n\t\n\tvar SalicusFlexus = exports.SalicusFlexus = function (_Neume16) {\n\t  _inherits(SalicusFlexus, _Neume16);\n\t\n\t  function SalicusFlexus() {\n\t    _classCallCheck(this, SalicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (SalicusFlexus.__proto__ || Object.getPrototypeOf(SalicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(SalicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var hasTopEpisema = this.positionTorculusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionEpisemata(this.notes[0], hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(SalicusFlexus.prototype.__proto__ || Object.getPrototypeOf(SalicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms,\n\t      // ...based on note four though!\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // finally, do the fourth note\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return SalicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus\n\t */\n\t\n\t\n\tvar Scandicus = exports.Scandicus = function (_Neume17) {\n\t  _inherits(Scandicus, _Neume17);\n\t\n\t  function Scandicus() {\n\t    _classCallCheck(this, Scandicus);\n\t\n\t    return _possibleConstructorReturn(this, (Scandicus.__proto__ || Object.getPrototypeOf(Scandicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Scandicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionEpisemataAbove(this.notes[2]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t      }\n\t    }\n\t\n\t    // if the third note shape is a virga, then the scadicus is rendered\n\t    // as a podatus followed by a virga. Otherwise, it's rendered as a\n\t    // punctum followed by a podatus...\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Scandicus.prototype.__proto__ || Object.getPrototypeOf(Scandicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).virgaAt(third);\n\t      } else {\n\t        this.build(ctxt).noteAt(first, first.shape === _ExsurgeChant.NoteShape.Quilisma ? _ExsurgeDrawing.GlyphCode.Quilisma : _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Scandicus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus Flexus\n\t */\n\t\n\t\n\tvar ScandicusFlexus = exports.ScandicusFlexus = function (_Neume18) {\n\t  _inherits(ScandicusFlexus, _Neume18);\n\t\n\t  function ScandicusFlexus() {\n\t    _classCallCheck(this, ScandicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (ScandicusFlexus.__proto__ || Object.getPrototypeOf(ScandicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ScandicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionClivisMarkings(this.notes[2], this.notes[3]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t        this.positionEpisemataAbove(this.notes[3]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(ScandicusFlexus.prototype.__proto__ || Object.getPrototypeOf(ScandicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).advanceBy(ctxt.intraNeumeSpacing).withClivis(third, fourth);\n\t      } else {\n\t        var fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t        if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third).advanceBy(ctxt.intraNeumeSpacing).noteAt(fourth, fourthGlyph);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return ScandicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Torculus\n\t */\n\t\n\t\n\tvar Torculus = exports.Torculus = function (_Neume19) {\n\t  _inherits(Torculus, _Neume19);\n\t\n\t  function Torculus() {\n\t    _classCallCheck(this, Torculus);\n\t\n\t    return _possibleConstructorReturn(this, (Torculus.__proto__ || Object.getPrototypeOf(Torculus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Torculus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Torculus.prototype.__proto__ || Object.getPrototypeOf(Torculus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note1 = this.notes[0];\n\t      var note2 = this.notes[1];\n\t      var note3 = this.notes[2];\n\t\n\t      var glyph1, glyph3;\n\t\n\t      if (note1.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) glyph1 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note1.shape === _ExsurgeChant.NoteShape.Quilisma) glyph1 = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph1 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (note3.liquescent & _ExsurgeChant.LiquescentType.Small) glyph3 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(note1, glyph1).noteAt(note2, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).noteAt(note3, glyph3);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Torculus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinus\n\t */\n\t\n\t\n\tvar TorculusResupinus = exports.TorculusResupinus = function (_Neume20) {\n\t  _inherits(TorculusResupinus, _Neume20);\n\t\n\t  function TorculusResupinus() {\n\t    _classCallCheck(this, TorculusResupinus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinus.__proto__ || Object.getPrototypeOf(TorculusResupinus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var firstGlyph, fourthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinusFlexus\n\t */\n\t\n\t\n\tvar TorculusResupinusFlexus = exports.TorculusResupinusFlexus = function (_Neume21) {\n\t  _inherits(TorculusResupinusFlexus, _Neume21);\n\t\n\t  function TorculusResupinusFlexus() {\n\t    _classCallCheck(this, TorculusResupinusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinusFlexus.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[1], this.notes[2], this.notes[3], this.notes[4]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinusFlexus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t      var fifth = this.notes[4];\n\t\n\t      var firstGlyph,\n\t          fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fifthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fifth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fifthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Descending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph).noteAt(fifth, fifthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Tristropha\n\t *\n\t * For simplicity in implementation, Tristropha's have three notes in the object\n\t * structure. These technically must be the same pitch though (like the\n\t * Distropha and Bivirga).\n\t */\n\t\n\t\n\tvar Tristropha = exports.Tristropha = function (_Neume22) {\n\t  _inherits(Tristropha, _Neume22);\n\t\n\t  function Tristropha() {\n\t    _classCallCheck(this, Tristropha);\n\t\n\t    return _possibleConstructorReturn(this, (Tristropha.__proto__ || Object.getPrototypeOf(Tristropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Tristropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Tristropha.prototype.__proto__ || Object.getPrototypeOf(Tristropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = glyphCodes[0] === _ExsurgeDrawing.GlyphCode.Stropha ? ctxt.intraNeumeSpacing / 2 : ctxt.intraNeumeSpacing;\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]).advanceBy(glyphAdvance).noteAt(this.notes[2], glyphCodes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Tristropha;\n\t}(Neume);\n\t\n\t/*\n\t * Virga\n\t */\n\t\n\t\n\tvar Virga = exports.Virga = function (_Neume23) {\n\t  _inherits(Virga, _Neume23);\n\t\n\t  function Virga() {\n\t    _classCallCheck(this, Virga);\n\t\n\t    return _possibleConstructorReturn(this, (Virga.__proto__ || Object.getPrototypeOf(Virga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Virga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virga.prototype.__proto__ || Object.getPrototypeOf(Virga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virga;\n\t}(Neume);\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virgula = exports.Accidental = exports.AccidentalType = exports.DoubleBar = exports.DominicanBar = exports.InsertionCursor = exports.FullBar = exports.HalfBar = exports.QuarterBar = exports.Divider = exports.Custos = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t/*\n\t *\n\t */\n\tvar Custos = exports.Custos = function (_ChantNotationElement) {\n\t  _inherits(Custos, _ChantNotationElement);\n\t\n\t  // if auto is true, then the custos will automatically try to determine it's height based on\n\t  // subsequent notations\n\t  function Custos() {\n\t    var auto = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\t\n\t    _classCallCheck(this, Custos);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Custos.__proto__ || Object.getPrototypeOf(Custos)).call(this));\n\t\n\t    _this.auto = auto;\n\t    _this.staffPosition = 0; // default sane value\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Custos, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Custos.prototype.__proto__ || Object.getPrototypeOf(Custos.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      if (this.auto) {\n\t        var neume = ctxt.findNextNeume();\n\t\n\t        if (neume) this.staffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t        // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n\t        // within reasonable bounds\n\t        while (this.staffPosition < -6) {\n\t          this.staffPosition += 7;\n\t        }while (this.staffPosition > 6) {\n\t          this.staffPosition -= 7;\n\t        }\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, Custos.getGlyphCode(this.staffPosition));\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // called when layout has changed and our dependencies are no longer good\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // we only need to resolve new dependencies if we're an automatic custos\n\t      if (this.auto) this.needsLayout = true;\n\t    }\n\t  }], [{\n\t    key: \"getGlyphCode\",\n\t    value: function getGlyphCode(staffPosition) {\n\t      if (staffPosition <= 2) {\n\t        // ascending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosLong;else return _ExsurgeDrawing.GlyphCode.CustosShort;\n\t      } else {\n\t        // descending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosDescLong;else return _ExsurgeDrawing.GlyphCode.CustosDescShort;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Custos;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Divider\n\t */\n\t\n\t\n\tvar Divider = exports.Divider = function (_ChantNotationElement2) {\n\t  _inherits(Divider, _ChantNotationElement2);\n\t\n\t  function Divider() {\n\t    _classCallCheck(this, Divider);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).call(this));\n\t\n\t    _this2.isDivider = true;\n\t    _this2.resetsAccidentals = true;\n\t    return _this2;\n\t  }\n\t\n\t  return Divider;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * QuarterBar\n\t */\n\t\n\t\n\tvar QuarterBar = exports.QuarterBar = function (_Divider) {\n\t  _inherits(QuarterBar, _Divider);\n\t\n\t  function QuarterBar() {\n\t    _classCallCheck(this, QuarterBar);\n\t\n\t    return _possibleConstructorReturn(this, (QuarterBar.__proto__ || Object.getPrototypeOf(QuarterBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(QuarterBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(QuarterBar.prototype.__proto__ || Object.getPrototypeOf(QuarterBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 2, 4, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return QuarterBar;\n\t}(Divider);\n\t\n\t/*\n\t * HalfBar\n\t */\n\t\n\t\n\tvar HalfBar = exports.HalfBar = function (_Divider2) {\n\t  _inherits(HalfBar, _Divider2);\n\t\n\t  function HalfBar() {\n\t    _classCallCheck(this, HalfBar);\n\t\n\t    return _possibleConstructorReturn(this, (HalfBar.__proto__ || Object.getPrototypeOf(HalfBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(HalfBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(HalfBar.prototype.__proto__ || Object.getPrototypeOf(HalfBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -2, 2, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return HalfBar;\n\t}(Divider);\n\t\n\t/*\n\t * FullBar\n\t */\n\t\n\t\n\tvar FullBar = exports.FullBar = function (_Divider3) {\n\t  _inherits(FullBar, _Divider3);\n\t\n\t  function FullBar() {\n\t    _classCallCheck(this, FullBar);\n\t\n\t    return _possibleConstructorReturn(this, (FullBar.__proto__ || Object.getPrototypeOf(FullBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(FullBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FullBar.prototype.__proto__ || Object.getPrototypeOf(FullBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FullBar;\n\t}(Divider);\n\t\n\t/*\n\t * Insertion Cursor\n\t */\n\t\n\t\n\tvar InsertionCursor = exports.InsertionCursor = function (_Divider4) {\n\t  _inherits(InsertionCursor, _Divider4);\n\t\n\t  function InsertionCursor() {\n\t    _classCallCheck(this, InsertionCursor);\n\t\n\t    return _possibleConstructorReturn(this, (InsertionCursor.__proto__ || Object.getPrototypeOf(InsertionCursor)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(InsertionCursor, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(InsertionCursor.prototype.__proto__ || Object.getPrototypeOf(InsertionCursor.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -4, 4));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return InsertionCursor;\n\t}(Divider);\n\t\n\t/*\n\t * DominicanBar\n\t */\n\t\n\t\n\tvar DominicanBar = exports.DominicanBar = function (_Divider5) {\n\t  _inherits(DominicanBar, _Divider5);\n\t\n\t  function DominicanBar(staffPosition) {\n\t    _classCallCheck(this, DominicanBar);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (DominicanBar.__proto__ || Object.getPrototypeOf(DominicanBar)).call(this));\n\t\n\t    staffPosition--;\n\t    var parity = staffPosition % 2;\n\t\n\t    _this7.staffPosition = staffPosition - 2 * parity;\n\t    return _this7;\n\t  }\n\t\n\t  _createClass(DominicanBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DominicanBar.prototype.__proto__ || Object.getPrototypeOf(DominicanBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, this.staffPosition - 3, this.staffPosition, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DominicanBar;\n\t}(Divider);\n\t\n\t/*\n\t * DoubleBar\n\t */\n\t\n\t\n\tvar DoubleBar = exports.DoubleBar = function (_Divider6) {\n\t  _inherits(DoubleBar, _Divider6);\n\t\n\t  function DoubleBar() {\n\t    _classCallCheck(this, DoubleBar);\n\t\n\t    return _possibleConstructorReturn(this, (DoubleBar.__proto__ || Object.getPrototypeOf(DoubleBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(DoubleBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoubleBar.prototype.__proto__ || Object.getPrototypeOf(DoubleBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var line0 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line0.bounds.x = 0;\n\t      this.addVisualizer(line0);\n\t\n\t      var line1 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n\t      this.addVisualizer(line1);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoubleBar;\n\t}(Divider);\n\t\n\tvar AccidentalType = exports.AccidentalType = {\n\t  Flat: -1,\n\t  Natural: 0,\n\t  Sharp: 1\n\t};\n\t\n\t/*\n\t * Accidental\n\t */\n\t\n\tvar Accidental = exports.Accidental = function (_ChantNotationElement3) {\n\t  _inherits(Accidental, _ChantNotationElement3);\n\t\n\t  function Accidental(staffPosition, accidentalType) {\n\t    _classCallCheck(this, Accidental);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (Accidental.__proto__ || Object.getPrototypeOf(Accidental)).call(this));\n\t\n\t    _this9.isAccidental = true;\n\t    _this9.keepWithNext = true; // accidentals should always stay connected...\n\t\n\t    _this9.staffPosition = staffPosition;\n\t    _this9.accidentalType = accidentalType;\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(Accidental, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Accidental.prototype.__proto__ || Object.getPrototypeOf(Accidental.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // creation of the glyph visualizer is refactored out or performLayout\n\t    // so that clefs can use the same logic for their accidental glyph\n\t\n\t  }, {\n\t    key: \"createGlyphVisualizer\",\n\t    value: function createGlyphVisualizer(ctxt) {\n\t      var glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Natural:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Natural;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Sharp;\n\t          break;\n\t        default:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t          break;\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      return glyph;\n\t    }\n\t  }, {\n\t    key: \"adjustStep\",\n\t    value: function adjustStep(step) {\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Flat:\n\t          if (step === _ExsurgeCore.Step.Ti) return _ExsurgeCore.Step.Te;\n\t          if (step === _ExsurgeCore.Step.Mi) return _ExsurgeCore.Step.Me;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          if (step === _ExsurgeCore.Step.Do) return _ExsurgeCore.Step.Du;\n\t          if (step === _ExsurgeCore.Step.Fa) return _ExsurgeCore.Step.Fu;\n\t          break;\n\t        case AccidentalType.Natural:\n\t          if (step === _ExsurgeCore.Step.Te) return _ExsurgeCore.Step.Ti;\n\t          if (step === _ExsurgeCore.Step.Me) return _ExsurgeCore.Step.Mi;\n\t          if (step === _ExsurgeCore.Step.Du) return _ExsurgeCore.Step.Do;\n\t          if (step === _ExsurgeCore.Step.Fu) return _ExsurgeCore.Step.Fa;\n\t          break;\n\t      }\n\t\n\t      // no adjustment needed\n\t      return step;\n\t    }\n\t  }, {\n\t    key: \"applyToPitch\",\n\t    value: function applyToPitch(pitch) {\n\t      // no adjusment needed\n\t      if (this.pitch.octave !== pitch.octave) return;\n\t\n\t      pitch.step = this.adjustStep(pitch.step);\n\t    }\n\t  }]);\n\t\n\t  return Accidental;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Virgula\n\t */\n\t\n\t\n\tvar Virgula = exports.Virgula = function (_Divider7) {\n\t  _inherits(Virgula, _Divider7);\n\t\n\t  function Virgula() {\n\t    _classCallCheck(this, Virgula);\n\t\n\t    // unlike other dividers a virgula does not reset accidentals\n\t    var _this10 = _possibleConstructorReturn(this, (Virgula.__proto__ || Object.getPrototypeOf(Virgula)).call(this));\n\t\n\t    _this10.resetsAccidentals = false;\n\t\n\t    // the staff position of the virgula is customizable, so that it\n\t    // can be placed on different lines (top or bottom) depending on the\n\t    // notation tradition of what is being notated (e.g., Benedictine has it\n\t    //  on top line, Norbertine at the bottom)\n\t    _this10.staffPosition = 3;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(Virgula, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virgula.prototype.__proto__ || Object.getPrototypeOf(Virgula.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.Virgula);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      this.addVisualizer(glyph);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virgula;\n\t}(Divider);\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BracePoint = exports.BraceAttachment = exports.BraceShape = exports.Mora = exports.Ictus = exports.HorizontalEpisema = exports.HorizontalEpisemaAlignment = exports.Accent = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Accent = exports.Accent = function (_GlyphVisualizer) {\n\t  _inherits(Accent, _GlyphVisualizer);\n\t\n\t  function Accent(ctxt, note) {\n\t    var glyphCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ExsurgeDrawing.GlyphCode.AcuteAccent;\n\t\n\t    _classCallCheck(this, Accent);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Accent.__proto__ || Object.getPrototypeOf(Accent)).call(this, ctxt, glyphCode));\n\t\n\t    _this.note = note;\n\t    _this.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Accent, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\t\n\t      // this puts the acute accent either over the staff lines, or over the note if the\n\t      // note is above the staff lines\n\t      this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n\t    }\n\t  }]);\n\t\n\t  return Accent;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// for positioning markings on notes\n\t\n\t\n\tvar HorizontalEpisemaAlignment = exports.HorizontalEpisemaAlignment = {\n\t  Default: 0,\n\t  Left: 1,\n\t  Center: 2,\n\t  Right: 3\n\t};\n\t\n\t/*\n\t * HorizontalEpisema\n\t *\n\t * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n\t */\n\t\n\tvar HorizontalEpisema = exports.HorizontalEpisema = function (_ChantLayoutElement) {\n\t  _inherits(HorizontalEpisema, _ChantLayoutElement);\n\t\n\t  function HorizontalEpisema(note) {\n\t    _classCallCheck(this, HorizontalEpisema);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (HorizontalEpisema.__proto__ || Object.getPrototypeOf(HorizontalEpisema)).call(this));\n\t\n\t    _this2.note = note;\n\t\n\t    _this2.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this2.terminating = false; // indicates if this episema should terminate itself or not\n\t    _this2.alignment = HorizontalEpisemaAlignment.Default;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(HorizontalEpisema, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // following logic helps to keep the episemata away from staff lines if they get too close\n\t\n\t      var y = 0,\n\t          step;\n\t      var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      var ledgerLine = this.note.neume.ledgerLines[0] || {};\n\t      var punctumInclinatumShorten = false;\n\t\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum) {\n\t        var notes = this.note.neume.notes,\n\t            index = notes.indexOf(this.note),\n\t            prevNote = notes[index - 1];\n\t        if (prevNote && prevNote.glyphVisualizer.glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && prevNote.staffPosition - this.note.staffPosition === 1) {\n\t          punctumInclinatumShorten = true;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.None)\n\t          // correction for episema under the second note of a porrectus\n\t          y += ctxt.staffInterval / 2;\n\t        step = Math.ceil(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.ceil(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // if it's an odd step, that means we're on a staff line,\n\t          // so we shift to between the staff line\n\t          if (Math.abs(step) % 2 === 1) {\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step += 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step += 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n\t        step = Math.floor(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.floor(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // find nearest acceptable third between staff lines (or staff line)\n\t          if (Math.abs(step) % 2 === 1) {\n\t            // if it was a staff line, we need to adjust\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step -= 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step -= 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      y = step * ctxt.staffInterval;\n\t\n\t      var width = this.note.bounds.width;\n\t      var x = this.note.bounds.x;\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) width = ctxt.staffInterval;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        width = ctxt.staffInterval;\n\t        x -= width;\n\t      } else if (punctumInclinatumShorten) {\n\t        width *= 2 / 3;\n\t        x += 0.5 * width;\n\t      } else if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent) {\n\t        width *= 2 / 3;\n\t        x += 0.25 * width;\n\t      }\n\t\n\t      // also, the position hint can affect the x/width of the episema\n\t      if (this.alignment === HorizontalEpisemaAlignment.Left) {\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n\t        x += width * 0.1;\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n\t        x += width * 0.2;\n\t        width *= 0.8;\n\t      }\n\t\n\t      this.bounds.x = x;\n\t      this.bounds.y = y - ctxt.episemaLineWeight / 2;\n\t      this.bounds.width = width;\n\t      this.bounds.height = ctxt.episemaLineWeight;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: this.bounds.width,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"horizontalEpisema\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return HorizontalEpisema;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\t/*\n\t * Ictus\n\t */\n\t\n\t\n\tvar Ictus = exports.Ictus = function (_GlyphVisualizer2) {\n\t  _inherits(Ictus, _GlyphVisualizer2);\n\t\n\t  function Ictus(ctxt, note) {\n\t    _classCallCheck(this, Ictus);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Ictus.__proto__ || Object.getPrototypeOf(Ictus)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove));\n\t\n\t    _this3.note = note;\n\t    _this3.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(Ictus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n\t      var positionHint = this.positionHint || _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      var staffPosition = this.note.staffPosition + (positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? 1 : -1);\n\t      var collisionWithEpisema = this.note.episemata.length > 0 && (this.note.episemata[0].positionHint || _ExsurgeDrawing.MarkingPositionHint.Above) === positionHint;\n\t      var horizontalOffset;\n\t      var verticalOffset = 1;\n\t      var shortOffset = -0.2;\n\t      var extraOffset = 0;\n\t      var collisionWithStaffLine = staffPosition % 2 && (Math.abs(staffPosition) < 4 || (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) horizontalOffset = ctxt.staffInterval / 2;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        horizontalOffset = -ctxt.staffInterval / 2;\n\t      } else {\n\t        horizontalOffset = this.note.bounds.width / 2;\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && !collisionWithStaffLine && !collisionWithEpisema) {\n\t          extraOffset = 0.3;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove;\n\t        verticalOffset *= -1;\n\t      } else {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaBelow;\n\t      }\n\t      if (collisionWithEpisema) {\n\t        extraOffset = 0.4;\n\t      }\n\t      verticalOffset *= ctxt.staffInterval * (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\t\n\t      this.setGlyph(ctxt, glyphCode);\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Ictus;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t/*\n\t * Mora\n\t */\n\t\n\t\n\tvar Mora = exports.Mora = function (_GlyphVisualizer3) {\n\t  _inherits(Mora, _GlyphVisualizer3);\n\t\n\t  function Mora(ctxt, note) {\n\t    _classCallCheck(this, Mora);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (Mora.__proto__ || Object.getPrototypeOf(Mora)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.Mora));\n\t\n\t    _this4.note = note;\n\t    _this4.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this4.horizontalOffset = ctxt.staffInterval / 2 + _this4.origin.x;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(Mora, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.setGlyph(ctxt, this.glyphCode);\n\t      this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n\t      var staffPosition = this.note.staffPosition;\n\t\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      var verticalOffset = 0;\n\t      // First, we need to find the next note in the neume.\n\t      var noteIndex = this.note.neume.notes.indexOf(this.note);\n\t      var nextNote;\n\t      if (noteIndex >= 0) {\n\t        ++noteIndex;\n\t        if (this.note.neume.notes.length > noteIndex) {\n\t          nextNote = this.note.neume.notes[noteIndex];\n\t          if (nextNote.morae && nextNote.morae.length && this.note.neume.notes.length === noteIndex + 1) {\n\t            // this note is the second to last in its neume, and the last note also has a mora\n\t            this.horizontalOffset += nextNote.bounds.right() - this.note.bounds.right();\n\t          } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n\t            // center the dot over the following note.\n\t            this.horizontalOffset = (nextNote.bounds.right() - this.note.bounds.right() - this.bounds.right()) / 2;\n\t          } else {\n\t            nextNote = null;\n\t          }\n\t        } else if (this.note.neume.notes.length === noteIndex) {\n\t          // this note is the last in its neume:\n\t          if (this.note.neume.trailingSpace === 0) {\n\t            // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n\t            var notationIndex = this.note.neume.score.notations.indexOf(this.note.neume);\n\t            if (notationIndex >= 0) {\n\t              var nextNotation = this.note.neume.score.notations[notationIndex + 1];\n\t              if (nextNotation && nextNotation.notes) {\n\t                nextNote = nextNotation.notes[0];\n\t              }\n\t            }\n\t          } else if (this.note.shape !== _ExsurgeChant.NoteShape.Inclinatum) {\n\t            this.note.neume.calculatedTrailingSpace += this.origin.x;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;else verticalOffset -= ctxt.staffInterval * 0.75;\n\t      } else if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;else verticalOffset += ctxt.staffInterval * 0.75;\n\t      } else {\n\t        if (staffPosition % 2 === 0) {\n\t          // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n\t          // between the top of the note's space and the top of the following note.\n\t          if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n\t            verticalOffset -= ctxt.staffInterval * 0.25;\n\t          }\n\t        } else {\n\t          verticalOffset -= ctxt.staffInterval * 0.75;\n\t        }\n\t      }\n\t      this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Mora;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// indicates the shape of the brace\n\t\n\t\n\tvar BraceShape = exports.BraceShape = {\n\t  RoundBrace: 0,\n\t  CurlyBrace: 1,\n\t  AccentedCurlyBrace: 2\n\t};\n\t\n\t// indicates how the brace is alignerd to the note to which it's connected\n\tvar BraceAttachment = exports.BraceAttachment = {\n\t  Left: 0,\n\t  Right: 1\n\t};\n\t\n\tvar BracePoint = exports.BracePoint = function (_ChantLayoutElement2) {\n\t  _inherits(BracePoint, _ChantLayoutElement2);\n\t\n\t  function BracePoint(note, isAbove, shape, attachment) {\n\t    _classCallCheck(this, BracePoint);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (BracePoint.__proto__ || Object.getPrototypeOf(BracePoint)).call(this));\n\t\n\t    _this5.note = note;\n\t    _this5.isAbove = isAbove;\n\t    _this5.shape = shape;\n\t    _this5.attachment = attachment;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(BracePoint, [{\n\t    key: \"getAttachmentX\",\n\t    value: function getAttachmentX(note) {\n\t      if (!note) note = this.note;\n\t      if (this.attachment === BraceAttachment.Left) return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n\t    }\n\t  }]);\n\t\n\t  return BracePoint;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Gabc = exports.GabcHeader = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(9);\n\t\n\tvar Markings = _interopRequireWildcard(_ExsurgeChantMarkings);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar Signs = _interopRequireWildcard(_ExsurgeChantSigns);\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(7);\n\t\n\tvar Neumes = _interopRequireWildcard(_ExsurgeChantNeumes);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// reusable reg exps\n\tvar __syllablesRegex = /(?=\\S)([^(]*)(?:\\(?([^)]*)\\)?)?/g;\n\tvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\t\n\tvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\n\tvar __notationsRegex_group_insideBraces = 1;\n\t\n\tvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\t\n\t// for the brace string inside of [ and ] in notation data\n\t// the capturing groups are:\n\t//  1. o or u, to indicate over or under\n\t//  2. b, cb, or cba, to indicate the brace type\n\t//  3. 0 or 1 to indicate the attachment point\n\t//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n\t//  5. a float indicating the millimeter length of the brace (not supported yet)\n\tvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\t\n\tvar TrailingSpaceForAccidental = function TrailingSpaceForAccidental(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\n\t};\n\tvar TrailingSpaceMultiple = function TrailingSpaceMultiple(multiplier) {\n\t  return function (ctxt) {\n\t    return ctxt.intraNeumeSpacing * multiplier;\n\t  };\n\t};\n\t\n\tvar regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\n\tvar regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\n\tvar regexHeaderComment = /^%.*/;\n\t\n\tvar GabcHeader = exports.GabcHeader = function () {\n\t  _createClass(GabcHeader, null, [{\n\t    key: \"getLength\",\n\t    value: function getLength(gabc) {\n\t      var match = gabc.match(regexHeaderEnd);\n\t      return match ? match.index + match[0].length : 0;\n\t    }\n\t  }]);\n\t\n\t  function GabcHeader(text) {\n\t    _classCallCheck(this, GabcHeader);\n\t\n\t    if (typeof text !== \"string\") text = \"\";\n\t    this.comments = [];\n\t    this.cValues = {};\n\t    this.original = \"\";\n\t    var match = text.match(regexHeaderEnd);\n\t    if (match) {\n\t      var txtHeader = this.original = text.slice(0, match.index + match[0].length);\n\t      var lines = txtHeader.split(/\\r?\\n/g);\n\t      for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i],\n\t            _match = regexHeaderLine.exec(line);\n\t        if (_match) {\n\t          var key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t            return letter.toUpperCase();\n\t          });\n\t          if (this[_match[1]]) {\n\t            var arrayName = _match[1] + \"Array\";\n\t            if (!this[arrayName]) {\n\t              this[arrayName] = [this[_match[1]]];\n\t            }\n\t            this[arrayName].push(_match[2]);\n\t          } else {\n\t            this[_match[1]] = _match[2];\n\t          }\n\t          if (key !== _match[1]) this[key] = this[_match[1]];\n\t        } else if (_match = regexHeaderComment.exec(line)) {\n\t          if (line !== \"%%\") {\n\t            _match = regexHeaderLine.exec(line.slice(1));\n\t            if (_match) {\n\t              var _key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t                return letter.toUpperCase();\n\t              });\n\t              this.cValues[_match[1]] = _match[2];\n\t              if (_key !== _match[1]) this.cValues[_key] = _match[2];\n\t            } else {\n\t              this.comments[i] = line;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  _createClass(GabcHeader, [{\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      var result = [];\n\t      for (var key in this) {\n\t        if (typeof this[key] !== \"string\" || /^(length|original|comments|cValues)$/.test(key)) {\n\t          continue;\n\t        }\n\t        var alternateKey = key.replace(/[A-Z]/g, function (letter) {\n\t          return \"-\" + letter.toLowerCase();\n\t        });\n\t        if (alternateKey !== key && alternateKey in this) continue;\n\t        var array = this[key + \"Array\"];\n\t        if (array) {\n\t          for (var i = 0; i < array.length; ++i) {\n\t            result.push(key + \": \" + array[i] + \";\");\n\t          }\n\t        } else {\n\t          result.push(key + \": \" + this[key] + \";\");\n\t        }\n\t      }\n\t      for (var _key2 in this.cValues) {\n\t        if (_key2.length === 0 || !this.cValues.hasOwnProperty(_key2)) continue;\n\t        result.push(\"%\" + _key2 + \": \" + this.cValues[_key2] + \";\");\n\t      }\n\t      for (var _i in this.comments) {\n\t        if (!this.comments.hasOwnProperty(_i)) continue;\n\t        try {\n\t          result.splice(_i, 0, this.comments[_i]);\n\t        } catch (e) {\n\t          console.warn(e);\n\t        }\n\t      }\n\t      return result.join(\"\\n\") + \"\\n%%\\n\";\n\t    }\n\t  }]);\n\t\n\t  return GabcHeader;\n\t}();\n\t\n\tvar elementCountForNotations = function elementCountForNotations(items) {\n\t  return items.reduce(function (sum, item) {\n\t    return sum + (item.notes ? item.notes.length : 1);\n\t  }, 0);\n\t};\n\t\n\tvar Gabc = exports.Gabc = function () {\n\t  function Gabc() {\n\t    _classCallCheck(this, Gabc);\n\t  }\n\t\n\t  _createClass(Gabc, null, [{\n\t    key: \"createMappingsFromSource\",\n\t\n\t    // takes gabc source code (without the header info) and returns an array\n\t    // of ChantMappings describing the chant. A chant score can then be created\n\t    // fron the chant mappings and later updated via updateMappings() if need\n\t    // be...\n\t    value: function createMappingsFromSource(ctxt, gabcSource) {\n\t      var headerLength = GabcHeader.getLength(gabcSource);\n\t      gabcSource = gabcSource.slice(headerLength);\n\t      var words = this.splitWords(gabcSource);\n\t\n\t      // set the default clef\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      var mappings = this.createMappingsFromWords(ctxt, words, function (clef) {\n\t        return ctxt.activeClef = clef;\n\t      });\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // A simple general purpose diff algorithm adapted here for comparing\n\t    // an array of existing mappings with an updated list of gabc words.\n\t    // note before is an array of mappings, and after is an array of strings\n\t    // (gabc words).\n\t    //\n\t    // This is definitely not the most effecient diff algorithm, but for our\n\t    // limited needs and source size it seems to work just fine...\n\t    //\n\t    // code is adapted from: https://github.com/paulgb/simplediff\n\t    //\n\t    // Returns:\n\t    //   A list of pairs, with the first part of the pair being one of three\n\t    //   strings ('-', '+', '=') and the second part being a list of values from\n\t    //   the original before and/or after lists. The first part of the pair\n\t    //   corresponds to whether the list of values is a deletion, insertion, or\n\t    //   unchanged, respectively.\n\t\n\t  }, {\n\t    key: \"diffDescriptorsAndNewWords\",\n\t    value: function diffDescriptorsAndNewWords(before, after) {\n\t      // Create a map from before values to their indices\n\t      var oldIndexMap = {},\n\t          i;\n\t      for (i = 0; i < before.length; i++) {\n\t        oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n\t        oldIndexMap[before[i].source].push(i);\n\t      }\n\t\n\t      var overlap = [],\n\t          startOld,\n\t          startNew,\n\t          subLength,\n\t          inew;\n\t\n\t      startOld = startNew = subLength = 0;\n\t\n\t      for (inew = 0; inew < after.length; inew++) {\n\t        var _overlap = [];\n\t        oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n\t        for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n\t          var iold = oldIndexMap[after[inew]][i];\n\t          // now we are considering all values of val such that\n\t          // `before[iold] == after[inew]`\n\t          _overlap[iold] = (iold && overlap[iold - 1] || 0) + 1;\n\t          if (_overlap[iold] > subLength) {\n\t            // this is the largest substring seen so far, so store its indices\n\t            subLength = _overlap[iold];\n\t            startOld = iold - subLength + 1;\n\t            startNew = inew - subLength + 1;\n\t          }\n\t        }\n\t        overlap = _overlap;\n\t      }\n\t\n\t      if (subLength === 0) {\n\t        // If no common substring is found, we return an insert and delete...\n\t        var result = [];\n\t\n\t        if (before.length) result.push([\"-\", before]);\n\t\n\t        if (after.length) result.push([\"+\", after]);\n\t\n\t        return result;\n\t      }\n\t\n\t      // ...otherwise, the common substring is unchanged and we recursively\n\t      // diff the text before and after that substring\n\t      return [].concat(this.diffDescriptorsAndNewWords(before.slice(0, startOld), after.slice(0, startNew)), [[\"=\", after.slice(startNew, startNew + subLength)]], this.diffDescriptorsAndNewWords(before.slice(startOld + subLength), after.slice(startNew + subLength)));\n\t    }\n\t\n\t    // this function essentially performs and applies a rudimentary diff between a\n\t    // previously parsed set of mappings and between a new gabc source text.\n\t    // the mappings array passed in is changed in place to be updated from the\n\t    // new source\n\t\n\t  }, {\n\t    key: \"updateMappingsFromSource\",\n\t    value: function updateMappingsFromSource(ctxt, mappings, newGabcSource) {\n\t      var insertionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\t      var oldInsertionIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\t\n\t      var headerLength = GabcHeader.getLength(newGabcSource);\n\t      newGabcSource = newGabcSource.slice(headerLength);\n\t      // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n\t      mappings.pop();\n\t\n\t      if (insertionIndex === null) {\n\t        insertionIndex = NaN;\n\t      }\n\t      if (oldInsertionIndex === null) {\n\t        oldInsertionIndex = NaN;\n\t      }\n\t\n\t      var newWords = this.splitWords(newGabcSource);\n\t\n\t      var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\t\n\t      var index = 0,\n\t          j,\n\t          k,\n\t          l,\n\t          sourceIndex = 0,\n\t          wordLength = 0,\n\t          mapping,\n\t          elementIndex = 0;\n\t\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      // apply the results to the mappings, marking notations that need to be processed\n\t      var lastTranslationNeumes = [];\n\t      for (var i = 0; i < results.length; i++) {\n\t        var resultCode = results[i][0];\n\t        var resultValues = results[i][1];\n\t\n\t        if (index > 0) sourceIndex = mappings[index - 1].sourceIndex + mappings[index - 1].source.length + 1;\n\t        if (resultCode === \"=\") {\n\t          var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n\t          // skip over ones that haven't changed, but updating the clef and source\n\t          // index (and pitch in case clef or accidentals have changed) as we go\n\t          for (j = 0; j < resultValues.length; j++, index++) {\n\t            mapping = mappings[index];\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t            }\n\t            if (insertionIndex >= elementIndex || oldInsertionIndex >= elementIndex) {\n\t              // check if the insertion index is within this mapping:\n\t              var elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex >= elementIndex && insertionIndex < elementIndex + elementCount || oldInsertionIndex >= elementIndex && oldInsertionIndex < elementIndex + elementCount) {\n\t                // re-do this mapping:\n\t                // TODO: check sourceIndex\n\t                var _sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], _sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t                mappings.splice(index, 1, mapping);\n\t\n\t                elementIndex += elementCount;\n\t                continue;\n\t              }\n\t              elementIndex += elementCount;\n\t            }\n\t            mapping.sourceIndex += sourceIndexDiff;\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var curNotation = mapping.notations[k];\n\t              var prevIsAccidental = mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n\t              // notify the notation that its dependencies are no longer valid\n\t              curNotation.resetDependencies();\n\t\n\t              if (curNotation.isClef) {\n\t                ctxt.activeClef = mappings[index].notations[k];\n\t              }\n\t\n\t              if (curNotation.isAccidental) {\n\t                ctxt.activeClef.activeAccidental = curNotation;\n\t              } else if (curNotation.resetsAccidentals || !prevIsAccidental && curNotation.hasLyrics() && curNotation.lyrics[0].lyricType <= _ExsurgeDrawing.LyricType.BeginningSyllable) {\n\t                ctxt.activeClef.resetAccidentals();\n\t              }\n\t\n\t              // update source index, pitch, and automatic braces\n\t              if (curNotation.notes) {\n\t                for (l = 0; l < curNotation.notes.length; ++l) {\n\t                  var note = curNotation.notes[l];\n\t                  note.sourceIndex += sourceIndexDiff;\n\t                  note.pitch = ctxt.activeClef.staffPositionToPitch(note.staffPosition);\n\t                  if (note.braceEnd && note.braceEnd.automatic) delete note.braceEnd;\n\t                  if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n\t                    note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t                    note.braceEnd.automatic = true;\n\t                    delete this.needToEndBrace;\n\t                  } else if (note.braceStart && note.braceStart.automatic) {\n\t                    this.needToEndBrace = note.braceStart;\n\t                  }\n\t                }\n\t              }\n\t              if (curNotation.translationText) {\n\t                for (l = 0; l < curNotation.translationText.length; ++l) {\n\t                  var transText = curNotation.translationText[l];\n\t                  delete transText.endNeume;\n\t                  curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n\t                  if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t                    var lastTranslationText = lastTranslationNeumes[0].translationText[l];\n\t                    if (lastTranslationText) lastTranslationText.endNeume = curNotation;\n\t                  }\n\t                }\n\t                lastTranslationNeumes[0] = curNotation;\n\t              }\n\t              if (sourceIndexDiff) {\n\t                if (typeof curNotation.sourceIndex === \"number\") {\n\t                  curNotation.sourceIndex += sourceIndexDiff;\n\t                }\n\t                for (l = 0; l < curNotation.lyrics.length; ++l) {\n\t                  curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n\t                }\n\t                if (curNotation.alText) {\n\t                  for (l = 0; l < curNotation.alText.length; ++l) {\n\t                    curNotation.alText[l].sourceIndex += sourceIndexDiff;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t        } else if (resultCode === \"-\") {\n\t          // delete elements that no longer exist, but first notify all\n\t          // elements of the change\n\t          mappings.splice(index, resultValues.length);\n\t        } else if (resultCode === \"+\") {\n\t          // insert new ones\n\t          for (j = 0; j < resultValues.length; j++) {\n\t            wordLength = resultValues[j].length + 1;\n\t            mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t              var _elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex < _elementCount) {\n\t                // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t              }\n\t            }\n\t\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var _curNotation = mapping.notations[k];\n\t              elementIndex += _curNotation.notes ? _curNotation.notes.length : 1;\n\t              if (_curNotation.isClef) {\n\t                ctxt.activeClef = mapping.notations[k];\n\t              }\n\t            }\n\t\n\t            mappings.splice(index++, 0, mapping);\n\t            sourceIndex += wordLength;\n\t          }\n\t        }\n\t      }\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return headerLength;\n\t    }\n\t\n\t    // takes an array of gabc words (like that returned by splitWords below)\n\t    // and returns an array of ChantMapping objects, one for each word.\n\t\n\t  }, {\n\t    key: \"createMappingsFromWords\",\n\t    value: function createMappingsFromWords(ctxt, words) {\n\t      var mappings = [];\n\t      var sourceIndex = 0,\n\t          wordLength = 0,\n\t          lastTranslationNeumes = [];\n\t\n\t      for (var i = 0; i < words.length; i++) {\n\t        sourceIndex += wordLength;\n\t        wordLength = words[i].length + 1;\n\t        var word = words[i].trim();\n\t\n\t        if (word === \"\") continue;\n\t\n\t        var mapping = this.createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes);\n\t\n\t        if (mapping) mappings.push(mapping);\n\t      }\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // takes a gabc word (like those returned by splitWords below) and returns\n\t    // a ChantMapping object that contains the gabc word source text as well\n\t    // as the generated notations.\n\t\n\t  }, {\n\t    key: \"createMappingFromWord\",\n\t    value: function createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes, insertionIndex) {\n\t      var matches = [];\n\t      var notations = [];\n\t      var currSyllable = 0;\n\t\n\t      while (match = __syllablesRegex.exec(word)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyricText = match[1].replace(/~/g, \" \");\n\t        var alText = [];\n\t        var translationText = [];\n\t        var notationData = match[2];\n\t\n\t        // new words reset the accidentals, per the Solesmes style (see LU xviij)\n\t        // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n\t        if (currSyllable === 0 && /[a-z]/i.test(lyricText) && /[a-m]/i.test(notationData)) ctxt.activeClef.resetAccidentals();\n\t\n\t        var items = this.parseNotations(ctxt, notationData, sourceIndex + match.index + match[1].length + 1, insertionIndex);\n\t\n\t        if (items.length === 0) continue;\n\t\n\t        if (insertionIndex >= 0) insertionIndex -= elementCountForNotations(items);\n\t\n\t        items[0].firstOfSyllable = !!lyricText;\n\t        items[0].firstOfParentheses = true;\n\t        notations.push.apply(notations, _toConsumableArray(items));\n\t\n\t        // add the lyrics and/or alText to the first notation that makes sense...\n\t        var notationWithLyrics = null;\n\t        for (var i = 0; i < items.length; i++) {\n\t          var cne = items[i];\n\t\n\t          if (cne.isAccidental && i + 1 < items.length) continue;\n\t\n\t          notationWithLyrics = cne;\n\t          break;\n\t        }\n\t\n\t        var m = __altTranslationRegex.exec();\n\t        var indexOffset = 0;\n\t        while (m = __altTranslationRegex.exec(lyricText)) {\n\t          var index = m.index;\n\t          lyricText = lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n\t          index += sourceIndex + indexOffset + 1;\n\t          if (typeof m[1] === \"string\") {\n\t            var elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[1], notationWithLyrics, index + 4);\n\t            elem.alIndex = alText.push(elem) - 1;\n\t          } else if (typeof m[2] === \"string\") {\n\t            var _elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[3], notationWithLyrics, index + m[2].length);\n\t            _elem.alIndex = alText.push(_elem) - 1;\n\t          } else {\n\t            var _elem2 = new _ExsurgeDrawing.TranslationText(ctxt, m[3], notationWithLyrics, index);\n\t            _elem2.translationIndex = translationText.push(_elem2) - 1;\n\t          }\n\t          indexOffset += m[0].length;\n\t          __altTranslationRegex.exec();\n\t        }\n\t        if (lyricText === \"\" && alText.length === 0) continue;\n\t\n\t        if (notationWithLyrics === null) return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t\n\t        if (alText.length) notationWithLyrics.alText = alText;\n\t\n\t        if (translationText.length) {\n\t          notationWithLyrics.translationText = translationText;\n\t          for (i = 0; i < translationText.length; ++i) {\n\t            var transText = translationText[i];\n\t            if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t              var lastTranslationText = lastTranslationNeumes[0].translationText[i];\n\t              if (lastTranslationText) lastTranslationText.endNeume = notationWithLyrics;\n\t            }\n\t          }\n\t          lastTranslationNeumes[0] = notationWithLyrics;\n\t        }\n\t\n\t        if (lyricText === \"\") continue;\n\t\n\t        var proposedLyricType;\n\t\n\t        // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n\t        if (!cne.isNeume && cne.constructor !== _ExsurgeChant.TextOnly) proposedLyricType = _ExsurgeDrawing.LyricType.Directive;\n\t        // otherwise trye to guess the lyricType for the first lyric anyway\n\t        else if (currSyllable === 0 && j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.SingleSyllable;else if (currSyllable === 0 && j < matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;else if (j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t\n\t        currSyllable++;\n\t\n\t        var lyrics = this.createSyllableLyrics(ctxt, lyricText, proposedLyricType, notationWithLyrics, items, sourceIndex + match.index);\n\t\n\t        if (lyrics === null || lyrics.length === 0) continue;\n\t\n\t        notationWithLyrics.lyrics = lyrics;\n\t      }\n\t\n\t      return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t    }\n\t\n\t    // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n\t\n\t  }, {\n\t    key: \"createSyllableLyrics\",\n\t    value: function createSyllableLyrics(ctxt, text, proposedLyricType, notation, notations, sourceIndex) {\n\t      var lyrics = [];\n\t\n\t      // an extension to gabc: multiple lyrics per syllable can be separated by a |\n\t      var lyricTexts = text.split(\"|\");\n\t\n\t      for (var i = 0; i < lyricTexts.length; i++) {\n\t        var lyricText = lyricTexts[i];\n\t\n\t        if (i > 0) {\n\t          if (lyricText.match(/\\s$/)) {\n\t            lyricText = lyricText.replace(/s+$/, \"\");\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;\n\t          } else {\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t          }\n\t        }\n\t\n\t        // gabc allows lyrics to indicate the centering part of the text by\n\t        // using braces to indicate how to center the lyric. So a lyric can\n\t        // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n\t        // word, respectively. Here we determine if the lyric should be spaced\n\t        // manually with this method of using braces.\n\t        var centerStartIndex = lyricText.indexOf(\"{\");\n\t        var centerLength = 0;\n\t\n\t        if (centerStartIndex >= 0) {\n\t          var indexClosingBracket = lyricText.indexOf(\"}\");\n\t\n\t          if (indexClosingBracket >= 0 && indexClosingBracket > centerStartIndex) {\n\t            centerLength = indexClosingBracket - centerStartIndex - 1;\n\t\n\t            // strip out the brackets...is this better than string.replace?\n\t            lyricText = lyricText.substring(0, centerStartIndex) + lyricText.substring(centerStartIndex + 1, indexClosingBracket) + lyricText.substring(indexClosingBracket + 1, lyricText.length);\n\t          } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n\t        }\n\t\n\t        var lyric = this.makeLyric(ctxt, lyricText, proposedLyricType, notation, notations, sourceIndex);\n\t\n\t        if (centerStartIndex) {\n\t          // update indices in case there had been any tags, etc.\n\t          var textIndex = 0,\n\t              centerEndIndex = -1;\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = lyric.spans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var span = _step.value;\n\t\n\t              if (centerStartIndex >= span.sourceIndex && centerStartIndex < span.sourceIndex + span.text.length) {\n\t                centerStartIndex += textIndex - span.sourceIndex;\n\t                centerEndIndex = centerStartIndex + centerLength;\n\t              } else if (centerEndIndex >= 0 && centerEndIndex >= span.sourceIndex && centerEndIndex < span.sourceIndex + span.text.length) {\n\t                centerEndIndex += textIndex - span.sourceIndex;\n\t                break;\n\t              }\n\t              textIndex += span.text.length;\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        // if we have manual lyric centering, then set it now\n\t        if (centerStartIndex >= 0) {\n\t          lyric.centerStartIndex = centerStartIndex;\n\t          lyric.centerLength = centerLength;\n\t        }\n\t\n\t        lyric.lyricIndex = lyrics.push(lyric) - 1;\n\t        sourceIndex += lyricText.length + 1;\n\t      }\n\t      notation.lyrics = lyrics;\n\t      return lyrics;\n\t    }\n\t  }, {\n\t    key: \"makeLyric\",\n\t    value: function makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t      var elides = false;\n\t      var forceConnector = false;\n\t      if (text.length > 1) {\n\t        if (text[text.length - 1] === \"-\") {\n\t          forceConnector = true;\n\t          if (lyricType === _ExsurgeDrawing.LyricType.EndingSyllable) lyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.SingleSyllable) lyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (text[text.length - 1] === \" \") {\n\t          if (lyricType === _ExsurgeDrawing.LyricType.MiddleSyllable) lyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable) lyricType = _ExsurgeDrawing.LyricType.SingleSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (/<\\/i>$/.test(text)) {\n\t          // must be an elision\n\t          elides = true;\n\t        }\n\t      }\n\t\n\t      if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = _ExsurgeDrawing.LyricType.Directive;\n\t\n\t      var lyric = new _ExsurgeDrawing.Lyric(ctxt, text, lyricType, notation, notations, sourceIndex);\n\t      lyric.elidesToNext = elides;\n\t      if (forceConnector) lyric.setForceConnector(true);\n\t\n\t      return lyric;\n\t    }\n\t\n\t    // takes a string of gabc notations and creates exsurge objects out of them.\n\t    // returns an array of notations.\n\t\n\t  }, {\n\t    key: \"parseNotations\",\n\t    value: function parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n\t      var _this = this;\n\t\n\t      // if there is no data, then this must be a text only object\n\t      if (!data) return [new _ExsurgeChant.TextOnly(sourceIndex, 0)];\n\t\n\t      var baseSourceIndex = sourceIndex;\n\t      var sourceLength = 0;\n\t      var notations = [];\n\t      var notes = [];\n\t      var trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t      var addToLastSourceGabc = function addToLastSourceGabc(gabc) {\n\t        if (notes.length > 0) {\n\t          notes[notes.length - 1].sourceGabc += gabc;\n\t        }\n\t      };\n\t      var addNotation = function addNotation(notation) {\n\t        // first, if we have any notes left over, we create a neume out of them\n\t        if (notes.length > 0) {\n\t          // create neume(s)\n\t          var neumes = _this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n\t          for (var i = 0; i < neumes.length; i++) {\n\t            notations.push(neumes[i]);\n\t          }notes = [];\n\t        }\n\t\n\t        // reset the trailing space\n\t        trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t        // then, if we're passed a notation, let's add it\n\t        // also, perform chant logic here\n\t        if (notation !== null) {\n\t          var prevNotation = notations[notations.length - 1];\n\t          notation.sourceIndex = sourceIndex;\n\t          notation.sourceGabc = match[0];\n\t          if (notation.isClef) {\n\t            ctxt.activeClef = notation;\n\t            if (prevNotation && prevNotation.trailingSpace.isDefault && prevNotation.isDivider) {\n\t              prevNotation.trailingSpace = TrailingSpaceForAccidental;\n\t            }\n\t          } else if (notation.isAccidental) {\n\t            ctxt.activeClef.activeAccidental = notation;\n\t          } else if (notation.trailingSpace.isDefault && notation instanceof Signs.Custos) {\n\t            notation.trailingSpace = TrailingSpaceForAccidental;\n\t          } else if (notation.resetsAccidentals) ctxt.activeClef.resetAccidentals();\n\t\n\t          notations.push(notation);\n\t        }\n\t      };\n\t\n\t      var regex = new RegExp(__notationsRegex.source, \"g\");\n\t      var match;\n\t\n\t      while (match = regex.exec(data)) {\n\t        sourceIndex = baseSourceIndex + match.index;\n\t        sourceLength = match[0].length;\n\t        var atom = match[0];\n\t\n\t        // handle the clefs and dividers here\n\t        switch (atom) {\n\t          case \",\":\n\t            addNotation(new Signs.QuarterBar());\n\t            break;\n\t          case \"`\":\n\t            addNotation(new Signs.Virgula());\n\t            break;\n\t          case \";\":\n\t            addNotation(new Signs.HalfBar());\n\t            break;\n\t          case \";1\":\n\t          case \";2\":\n\t          case \";3\":\n\t          case \";4\":\n\t          case \";5\":\n\t          case \";6\":\n\t          case \",1\":\n\t          case \",2\":\n\t          case \",3\":\n\t          case \",4\":\n\t          case \",5\":\n\t          case \",6\":\n\t            addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n\t            break;\n\t          case \":\":\n\t            addNotation(new Signs.FullBar());\n\t            break;\n\t          case \"::\":\n\t            addNotation(new Signs.DoubleBar());\n\t            break;\n\t          // other gregorio dividers are not supported yet\n\t\n\t          case \"c1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2));\n\t            break;\n\t\n\t          case \"c2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2));\n\t            break;\n\t\n\t          case \"c3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2));\n\t            break;\n\t\n\t          case \"c4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2));\n\t            break;\n\t\n\t          case \"f1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-3, 2));\n\t            break;\n\t\n\t          case \"f2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-1, 2));\n\t            break;\n\t\n\t          case \"f3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(1, 2));\n\t            break;\n\t\n\t          case \"f4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(3, 2));\n\t            break;\n\t\n\t          case \"cb1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2, new Signs.Accidental(-4, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2, new Signs.Accidental(-2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2, new Signs.Accidental(0, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2, new Signs.Accidental(2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(true));\n\t            break;\n\t          case \"Z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(false));\n\t            break;\n\t          case \"z0\":\n\t            addNotation(new Signs.Custos(true));\n\t            break;\n\t\n\t          // spacing indicators\n\t          case \"!\":\n\t            trailingSpace = 0;\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t          case \" \":\n\t            // fixme: is this correct? logically what is the difference in gabc\n\t            // between putting a space between notes vs putting '//' between notes?\n\t            trailingSpace = TrailingSpaceMultiple(2);\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t\n\t          default:\n\t            // might be a number of slashes, a custos, might be an accidental, or might be a note\n\t            if (atom[0] === \"/\") {\n\t              trailingSpace = TrailingSpaceMultiple(atom.length);\n\t              addToLastSourceGabc(atom);\n\t              addNotation(null);\n\t            } else if (atom.length > 1 && atom[1] === \"+\") {\n\t              // custos\n\t              var custos = new Signs.Custos();\n\t\n\t              custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\t\n\t              addNotation(custos);\n\t            } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n\t              var accidentalType;\n\t\n\t              switch (atom[1]) {\n\t                case \"y\":\n\t                  accidentalType = Signs.AccidentalType.Natural;\n\t                  break;\n\t                case \"#\":\n\t                  accidentalType = Signs.AccidentalType.Sharp;\n\t                  break;\n\t                default:\n\t                  accidentalType = Signs.AccidentalType.Flat;\n\t                  break;\n\t              }\n\t\n\t              var noteArray = [];\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, noteArray, sourceIndex);\n\t              var accidental = new Signs.Accidental(noteArray[0].staffPosition, accidentalType);\n\t              accidental.pitch = this.gabcHeightToExsurgePitch(ctxt.activeClef, atom[0]);\n\t              accidental.sourceIndex = sourceIndex;\n\t              accidental.sourceLength = sourceLength;\n\t              accidental.trailingSpace = TrailingSpaceForAccidental;\n\t\n\t              ctxt.activeClef.activeAccidental = accidental;\n\t\n\t              addNotation(accidental);\n\t            } else if (atom.length > 1 && atom[0] === \"{\") {\n\t              (function () {\n\t                trailingSpace = 0;\n\t                addNotation(null);\n\t                var bracketedNotations = _this.parseNotations(ctxt, match[__notationsRegex_group_insideBraces], sourceIndex + 1);\n\t                // Set the width of these notations to 0\n\t                bracketedNotations.forEach(function (neume) {\n\t                  neume.hasNoWidth = true;\n\t                  neume.firstWithNoWidth = bracketedNotations[0];\n\t                });\n\t                notations.push.apply(notations, _toConsumableArray(bracketedNotations));\n\t              })();\n\t            } else {\n\t              // looks like it's a note\n\t              if (insertionIndex === -1) {\n\t                trailingSpace = TrailingSpaceMultiple(1);\n\t                addNotation(null);\n\t              }\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, notes, sourceIndex);\n\t              --insertionIndex;\n\t            }\n\t            break;\n\t        }\n\t      }\n\t\n\t      // finish up any remaining notes we have left\n\t      addNotation(null);\n\t\n\t      return notations;\n\t    }\n\t  }, {\n\t    key: \"createNeumesFromNotes\",\n\t    value: function createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n\t      var neumes = [];\n\t      var firstNoteIndex = 0;\n\t      var currNoteIndex = 0;\n\t\n\t      // here we use a simple finite state machine to create the neumes from the notes\n\t      // createNeume is helper function which returns the next state after a neume is created\n\t      // (unknownState). Each state object has a neume() function and a handle() function.\n\t      // neume() allows us to create the neume of the state in the event that we run out\n\t      // of notes. handle() gives the state an opportunity to examine the currNote and\n\t      // determine what to do...either transition to a different neume/state, or\n\t      // continue building the neume of that state. handle() returns the next state\n\t\n\t      var createNeume = function createNeume(neume, includeCurrNote) {\n\t        var includePrevNote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t        // add the notes to the neume\n\t        var lastNoteIndex;\n\t        if (includeCurrNote) lastNoteIndex = currNoteIndex;else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;else lastNoteIndex = currNoteIndex - 2;\n\t\n\t        if (lastNoteIndex < 0) return;\n\t\n\t        while (firstNoteIndex <= lastNoteIndex) {\n\t          var note = notes[firstNoteIndex++];\n\t          neume.addNote(note);\n\t          if (note.alText) {\n\t            if (!neume.alText) neume.alText = [];\n\t            neume.alText.push(note.alText);\n\t            note.alText.noteIndex = firstNoteIndex - 1;\n\t          }\n\t        }\n\t\n\t        neumes.push(neume);\n\t\n\t        if (includeCurrNote === false) {\n\t          currNoteIndex--;\n\t\n\t          if (includePrevNote === false) currNoteIndex--;\n\t\n\t          neume.keepWithNext = true;\n\t          if (notes[currNoteIndex + 1].shape === _ExsurgeChant.NoteShape.Quilisma) neume.trailingSpace = 0;else {\n\t            neume.trailingSpace = TrailingSpaceMultiple(1);\n\t            neume.allowLineBreakBeforeNext = true;\n\t          }\n\t        }\n\t\n\t        return unknownState;\n\t      };\n\t\n\t      var unknownState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga) return virgaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Stropha) return apostrophaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Oriscus) return oriscusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return punctaInclinataState;else if (currNote.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return createNeume(new Neumes.Punctum(), true);else return punctumState;\n\t        }\n\t      };\n\t\n\t      var punctumState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote, notesRemaining) {\n\t          if (currNote.shape || prevNote.liquescent === _ExsurgeChant.LiquescentType.Small) {\n\t            var neume = new Neumes.Punctum();\n\t            var state = createNeume(neume, false);\n\t            // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t            // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t            // Otherwise, we want no trailing space.\n\t            if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t            return state;\n\t          }\n\t\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return podatusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return climacusState;else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n\t              return clivisState;\n\t            }\n\t          } else if (!prevNote.morae || !prevNote.morae.length) {\n\t            return distrophaState;\n\t          }\n\t          return createNeume(new Neumes.Punctum(), false);\n\t        }\n\t      };\n\t\n\t      var punctaInclinataState = {\n\t        neume: function neume() {\n\t          return new Neumes.PunctaInclinata();\n\t        },\n\t        handle: function handle() {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PunctaInclinata(), false);else return punctaInclinataState;\n\t        }\n\t      };\n\t\n\t      var oriscusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Oriscus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default) {\n\t            if (currNote.staffPosition > prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              return createNeume(new Neumes.PesQuassus(), true);\n\t            } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              return createNeume(new Neumes.Clivis(), true);\n\t            }\n\t          }\n\t          // stand alone oriscus\n\t          var neume = new Neumes.Oriscus(),\n\t              state = createNeume(neume, false);\n\t          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t          // Otherwise, we want no trailing space.\n\t          if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t          return state;\n\t        }\n\t      };\n\t\n\t      var podatusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Podatus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            if (prevNote.shape === _ExsurgeChant.NoteShape.Oriscus) return salicusState;else return scandicusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return pesSubpunctisState;else return torculusState;\n\t          } else return createNeume(new Neumes.Podatus(), false);\n\t        }\n\t      };\n\t\n\t      var clivisState = {\n\t        neume: function neume() {\n\t          return new Neumes.Clivis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return porrectusState;\n\t          } else return createNeume(new Neumes.Clivis(), false);\n\t        }\n\t      };\n\t\n\t      var climacusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Climacus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.Climacus(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var porrectusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Porrectus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.PorrectusFlexus(), true);else return createNeume(new Neumes.Porrectus(), false);\n\t        }\n\t      };\n\t\n\t      var pesSubpunctisState = {\n\t        neume: function neume() {\n\t          return new Neumes.PesSubpunctis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PesSubpunctis(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var salicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Salicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition < prevNote.staffPosition) return salicusFlexusState;else return createNeume(new Neumes.Salicus(), false);\n\t        }\n\t      };\n\t\n\t      var salicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.SalicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.SalicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Scandicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (prevNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) {\n\t            // if we get here, then it seems we have a podatus, now being followed by a climacus\n\t            // rather than a scandicus. react accordingly\n\t            return createNeume(new Neumes.Podatus(), false, false);\n\t          } else if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return scandicusFlexusState;else return createNeume(new Neumes.Scandicus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.ScandicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.ScandicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var virgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Virga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) return climacusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return bivirgaState;else return createNeume(new Neumes.Virga(), false);\n\t        }\n\t      };\n\t\n\t      var bivirgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Bivirga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return createNeume(new Neumes.Trivirga(), true);else return createNeume(new Neumes.Bivirga(), false);\n\t        }\n\t      };\n\t\n\t      var apostrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Apostropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) return distrophaState;else return createNeume(new Neumes.Apostropha(), false);\n\t        }\n\t      };\n\t\n\t      var distrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Distropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) {\n\t            if (prevNote.morae && prevNote.morae.length) {\n\t              return createNeume(new Neumes.Distropha(), false);\n\t            } else {\n\t              return tristrophaState;\n\t            }\n\t          } else return createNeume(new Neumes.Apostropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var tristrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Tristropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          // we only create a tristropha when the note run ends after three\n\t          // and the neume() function of this state is called. Otherwise\n\t          // we always interpret the third note to belong to the next sequence\n\t          // of notes.\n\t          //\n\t          // fixme: gabc allows any number of punctum/stropha in succession...\n\t          // is this a valid neume type? Or is it just multiple *stropha neumes\n\t          // in succession? Should we simplify the apostropha/distropha/\n\t          // tristropha classes to a generic stropha neume that can have 1 or\n\t          // more successive notes?\n\t          return createNeume(new Neumes.Distropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var torculusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Torculus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            var prevNoteButOne = notes[currNoteIndex - 2];\n\t            if (prevNoteButOne && prevNoteButOne.staffPosition - prevNote.staffPosition <= 4) {\n\t              if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t              return torculusResupinusState;\n\t            }\n\t          }\n\t          return createNeume(new Neumes.Torculus(), false);\n\t        }\n\t      };\n\t\n\t      var torculusResupinusState = {\n\t        neume: function neume() {\n\t          return new Neumes.TorculusResupinus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.TorculusResupinusFlexus(), true);else return createNeume(new Neumes.TorculusResupinus(), false);\n\t        }\n\t      };\n\t\n\t      var state = unknownState;\n\t\n\t      while (currNoteIndex < notes.length) {\n\t        var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n\t        var currNote = notes[currNoteIndex];\n\t\n\t        state = state.handle(currNote, prevNote, notes.length - 1 - currNoteIndex);\n\t\n\t        // if we are on the last note, then try to create a neume if we need to.\n\t        if (currNoteIndex === notes.length - 1 && state !== unknownState) createNeume(state.neume(), true);\n\t\n\t        currNoteIndex++;\n\t      }\n\t\n\t      if (neumes.length > 0) {\n\t        if (!finalTrailingSpace.isDefault) {\n\t          neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n\t          neumes[neumes.length - 1].keepWithNext = true;\n\t\n\t          if (finalTrailingSpace > 0) neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[neumes.length - 1].keepWithNext = true;\n\t        }\n\t      }\n\t\n\t      return neumes;\n\t    }\n\t\n\t    // appends any notes created to the notes array argument\n\t\n\t  }, {\n\t    key: \"createNoteFromData\",\n\t    value: function createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n\t      var note = new _ExsurgeChant.Note();\n\t      note.sourceIndex = sourceIndex;\n\t      note.sourceGabc = data;\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      if (data[0] === \"-\") {\n\t        // liquescent initio debilis\n\t        note.liquescent = _ExsurgeChant.LiquescentType.InitioDebilis;\n\t        data = data.substring(1);\n\t      }\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      // the next char is always the pitch\n\t      var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\t\n\t      if (data[0] === data[0].toUpperCase()) note.shape = _ExsurgeChant.NoteShape.Inclinatum;\n\t\n\t      note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n\t      note.pitch = pitch;\n\t\n\t      var mark;\n\t\n\t      var episemaNoteIndex = notes.length;\n\t      var episemaNote = note;\n\t\n\t      // process the modifiers\n\t      for (var i = 1; i < data.length; i++) {\n\t        var c = data[i];\n\t        var lookahead = \"\\0\";\n\t\n\t        var haveLookahead = i + 1 < data.length;\n\t        if (haveLookahead) lookahead = data[i + 1];\n\t\n\t        switch (c) {\n\t          // rhythmic markings\n\t          case \".\":\n\t            mark = null;\n\t\n\t            // gabc supports putting up to two morae on each note, by repeating the\n\t            // period. here, we check to see if we've already created a mora for the\n\t            // note, and if so, we simply force the second one to have an Above\n\t            // position hint. if a user decides to try to put position indicators\n\t            // on the double morae (such as 1 or 2), then really the behavior is\n\t            // not defined by gabc, so it's on the user to figure it out.\n\t            if (note.morae.length > 0 && notes.length) {\n\t              var previousNote = notes.slice(-1)[0];\n\t              var previousMora = note.morae.slice(-1)[0];\n\t              previousMora.note = previousNote;\n\t            }\n\t\n\t            mark = new Markings.Mora(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            note.morae.push(mark);\n\t            break;\n\t\n\t          case \"_\":\n\t            var episemaHadModifier = false;\n\t\n\t            mark = new Markings.HorizontalEpisema(episemaNote);\n\t            while (haveLookahead) {\n\t              if (lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (lookahead === \"2\") mark.terminating = true;\n\t              // episema terminates\n\t              else if (lookahead === \"3\") mark.alignment = Markings.HorizontalEpisemaAlignment.Left;else if (lookahead === \"4\") mark.alignment = Markings.HorizontalEpisemaAlignment.Center;else if (lookahead === \"5\") mark.alignment = Markings.HorizontalEpisemaAlignment.Right;else break;\n\t\n\t              // the gabc definition for episemata is so convoluted...\n\t              // - double underscores create episemata over multiple notes.\n\t              // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n\t              //   another underscore puts a second episema on the same note\n\t              // - (when there's a 2 lookahead, then this is treated as an\n\t              //   unmodified underscore, so another underscore would be\n\t              //   added to previous notes\n\t              if (mark.alignment !== Markings.HorizontalEpisemaAlignment.Default && mark.positionHint !== _ExsurgeDrawing.MarkingPositionHint.Below) episemaHadModifier = true;\n\t\n\t              i++;\n\t              haveLookahead = i + 1 < data.length;\n\t\n\t              if (haveLookahead) lookahead = data[i + 1];\n\t            }\n\t\n\t            // since gabc allows consecutive underscores which is a shortcut to\n\t            // apply the episemata to previous notes, we keep track of that here\n\t            // in order to add the new episema to the correct note.\n\t\n\t            if (episemaNote) episemaNote.episemata.push(mark);\n\t\n\t            if (episemaNote === note && episemaHadModifier) episemaNote = note;else if (episemaNoteIndex >= 0 && notes.length > 0) episemaNote = notes[--episemaNoteIndex];\n\t\n\t            break;\n\t\n\t          case \"'\":\n\t            mark = new Markings.Ictus(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (note.shape === _ExsurgeChant.NoteShape.Virga)\n\t              // ictus on a virga goes above by default:\n\t              mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t            note.ictus = mark;\n\t            break;\n\t\n\t          //note shapes\n\t          case \"r\":\n\t            if (haveLookahead && /^[1-5]$/.test(lookahead)) {\n\t              switch (lookahead) {\n\t                case \"1\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.AcuteAccent);\n\t                  break;\n\t                case \"2\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.GraveAccent);\n\t                  break;\n\t                case \"3\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Circle);\n\t                  break;\n\t                case \"4\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Semicircle);\n\t                  break;\n\t                case \"5\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.ReversedSemicircle);\n\t                  break;\n\t                default:\n\t              }\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t            break;\n\t\n\t          case \"s\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Stropha) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick stropha feature (e.g., gsss). create a new note\n\t              var newNote = new _ExsurgeChant.Note();\n\t              newNote.sourceIndex = sourceIndex + i;\n\t              newNote.sourceGabc = \"s\";\n\t              newNote.staffPosition = note.staffPosition;\n\t              newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Stropha;\n\t            break;\n\t\n\t          case \"v\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Virga) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick virga feature (e.g., gvvv). create a new note\n\t              var _newNote = new _ExsurgeChant.Note();\n\t              _newNote.sourceIndex = sourceIndex + i;\n\t              _newNote.sourceGabc = \"v\";\n\t              _newNote.staffPosition = note.staffPosition;\n\t              _newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = _newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            break;\n\t\n\t          case \"w\":\n\t            note.shape = _ExsurgeChant.NoteShape.Quilisma;\n\t            break;\n\t\n\t          case \"o\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              i++;\n\t            }\n\t            break;\n\t\n\t          case \"O\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t            break;\n\t\n\t          // liquescents\n\t          case \"~\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) note.liquescent |= _ExsurgeChant.LiquescentType.Small;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) note.liquescent |= _ExsurgeChant.LiquescentType.Large;else note.liquescent |= _ExsurgeChant.LiquescentType.Small;\n\t            break;\n\t          case \"<\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Ascending;\n\t            break;\n\t          case \">\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Descending;\n\t            break;\n\t\n\t          // accidentals\n\t          case \"x\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Mi) note.pitch.step = _ExsurgeCore.Step.Me;else if (note.pitch.step === _ExsurgeCore.Step.Ti) note.pitch.step = _ExsurgeCore.Step.Te;\n\t            break;\n\t          case \"y\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Te) note.pitch.step = _ExsurgeCore.Step.Ti;else if (note.pitch.step === _ExsurgeCore.Step.Me) note.pitch.step = _ExsurgeCore.Step.Mi;else if (note.pitch.step === _ExsurgeCore.Step.Du) note.pitch.step = _ExsurgeCore.Step.Do;else if (note.pitch.step === _ExsurgeCore.Step.Fu) note.pitch.step = _ExsurgeCore.Step.Fa;\n\t            break;\n\t          case \"#\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Do) note.pitch.step = _ExsurgeCore.Step.Du;else if (note.pitch.step === _ExsurgeCore.Step.Fa) note.pitch.step = _ExsurgeCore.Step.Fu;\n\t            break;\n\t\n\t          // gabc special item groups\n\t          case \"[\":\n\t            // read in the whole group and parse it\n\t            var startIndex = ++i;\n\t            while (i < data.length && data[i] !== \"]\") {\n\t              i++;\n\t            }this.processInstructionForNote(ctxt, note, data.substring(startIndex, i), startIndex);\n\t            break;\n\t        }\n\t      }\n\t\n\t      if (this.needToEndBrace && !note.braceStart && !note.braceEnd && !/[xy#]/.test(c)) {\n\t        note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t        note.braceEnd.automatic = true;\n\t        delete this.needToEndBrace;\n\t      }\n\t\n\t      notes.push(note);\n\t    }\n\t\n\t    // an instruction in this context is referring to a special gabc coding found after\n\t    // notes between ['s and ]'s. choral signs and braces fall into this\n\t    // category.\n\t    //\n\t    // currently only brace instructions are supported here!\n\t\n\t  }, {\n\t    key: \"processInstructionForNote\",\n\t    value: function processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n\t      var results = instruction.match(__bracketedCommandRegex);\n\t      if (results === null) return;\n\t      var cmd = results[1];\n\t      var data = results[2];\n\t      switch (cmd) {\n\t        case \"cs\":\n\t          note.choralSign = new _ExsurgeDrawing.ChoralSign(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t        case \"alt\":\n\t          note.alText = new _ExsurgeDrawing.AboveLinesText(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t      }\n\t\n\t      results = instruction.match(__braceSpecRegex);\n\t\n\t      if (results === null) return;\n\t\n\t      // see the comments at the definition of __braceSpecRegex for the\n\t      // capturing groups\n\t      var above = results[1] === \"o\";\n\t      var shape = Markings.BraceShape.CurlyBrace; // default\n\t\n\t      switch (results[2]) {\n\t        case \"b\":\n\t          shape = Markings.BraceShape.RoundBrace;\n\t          break;\n\t        case \"cb\":\n\t          shape = Markings.BraceShape.CurlyBrace;\n\t          break;\n\t        case \"cba\":\n\t          shape = Markings.BraceShape.AccentedCurlyBrace;\n\t          break;\n\t      }\n\t\n\t      var attachmentPoint = results[3] === \"1\" ? Markings.BraceAttachment.Left : Markings.BraceAttachment.Right;\n\t\n\t      if (results[4] === \"{\" || results[5]) note.braceStart = new Markings.BracePoint(note, above, shape, attachmentPoint);else note.braceEnd = new Markings.BracePoint(note, above, shape, attachmentPoint);\n\t\n\t      // just have the next note end a brace that uses length;\n\t      if (results[5]) {\n\t        note.braceStart.automatic = true;\n\t        this.needToEndBrace = note.braceStart;\n\t      }\n\t    }\n\t\n\t    // takes raw gabc text source and parses it into words. For example, passing\n\t    // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n\t    // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n\t\n\t  }, {\n\t    key: \"splitWords\",\n\t    value: function splitWords(gabcNotations) {\n\t      // split the notations on whitespace boundaries, as long as the space\n\t      // immediately follows a set of parentheses. Prior to doing that, we replace\n\t      // all whitespace with spaces, which prevents tabs and newlines from ending\n\t      // up in the notation data.\n\t      gabcNotations = gabcNotations\n\t      // .trim()\n\t      // .replace(/\\s/g, \" \")\n\t      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n\t      return gabcNotations.split(/\\n/g);\n\t    }\n\t  }, {\n\t    key: \"parseSource\",\n\t    value: function parseSource(gabcSource) {\n\t      return this.parseWords(this.splitWords(gabcSource));\n\t    }\n\t\n\t    // gabcWords is an array of strings, e.g., the result of splitWords above\n\t\n\t  }, {\n\t    key: \"parseWords\",\n\t    value: function parseWords(gabcWords) {\n\t      var words = [];\n\t\n\t      for (var i = 0; i < gabcWords.length; i++) {\n\t        words.push(this.parseWord(gabcWords[i]));\n\t      }return words;\n\t    }\n\t\n\t    // returns an array of objects, each of which has the following properties\n\t    //  - notations (string)\n\t    //  - lyrics (array of strings)\n\t\n\t  }, {\n\t    key: \"parseWord\",\n\t    value: function parseWord(gabcWord) {\n\t      var syllables = [];\n\t      var matches = [];\n\t\n\t      syllables.wordLength = gabcWord.length;\n\t\n\t      while (match = __syllablesRegex.exec(gabcWord)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyrics = match[1].trim().split(\"|\");\n\t        var notations = match[2];\n\t\n\t        syllables.push({\n\t          notations: notations,\n\t          lyrics: lyrics\n\t        });\n\t      }\n\t\n\t      return syllables;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgeHeight\",\n\t    value: function gabcHeightToExsurgeHeight(gabcHeight) {\n\t      return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgePitch\",\n\t    value: function gabcHeightToExsurgePitch(clef, gabcHeight) {\n\t      var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\t\n\t      var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\t\n\t      return pitch;\n\t    }\n\t  }]);\n\n\t  return Gabc;\n\t}();\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Titles = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar Exsurge = _interopRequireWildcard(_ExsurgeCore);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n\t//\n\t// Copyright (c) 2019\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Titles = exports.Titles = function (_ChantLayoutElement) {\n\t  _inherits(Titles, _ChantLayoutElement);\n\t\n\t  function Titles(ctxt, score) {\n\t    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n\t        supertitle = _ref.supertitle,\n\t        title = _ref.title,\n\t        subtitle = _ref.subtitle,\n\t        textLeft = _ref.textLeft,\n\t        textRight = _ref.textRight;\n\t\n\t    _classCallCheck(this, Titles);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Titles.__proto__ || Object.getPrototypeOf(Titles)).call(this));\n\t\n\t    _this.score = score;\n\t    _this.setSupertitle(ctxt, supertitle);\n\t    _this.setTitle(ctxt, title);\n\t    _this.setSubtitle(ctxt, subtitle);\n\t    _this.setTextLeft(ctxt, textLeft);\n\t    _this.setTextRight(ctxt, textRight);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Titles, [{\n\t    key: \"setBoundsX\",\n\t    value: function setBoundsX(ctxt, elementName, width) {\n\t      var element = this[elementName];\n\t      switch (ctxt.textStyles[elementName].alignment) {\n\t        case \"left\":\n\t          element.textAnchor = \"start\";\n\t          element.bounds.x = 0;\n\t          break;\n\t        case \"right\":\n\t          element.textAnchor = \"end\";\n\t          element.bounds.x = width;\n\t          break;\n\t        case \"center\":\n\t        default:\n\t          element.textAnchor = \"middle\";\n\t          element.bounds.x = width / 2;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Lays out the titles, and returns their total height\n\t     * @param  {ChantContext} ctxt\n\t     * @return {number}      the tottal height of titles laid out\n\t     */\n\t\n\t  }, {\n\t    key: \"layoutTitles\",\n\t    value: function layoutTitles(ctxt, width) {\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      var y = 0;\n\t      if (this.supertitle) {\n\t        this.supertitle.recalculateMetrics(ctxt);\n\t        this.supertitle.setMaxWidth(ctxt, width);\n\t\n\t        this.setBoundsX(ctxt, \"supertitle\", width);\n\t        this.supertitle.bounds.y = y;\n\t        this.bounds.union(this.supertitle.bounds);\n\t        this.supertitle.bounds.y += this.supertitle.origin.y;\n\t        y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n\t      }\n\t      if (this.title) {\n\t        if (y) y += this.title.padding(ctxt);\n\t        this.title.recalculateMetrics(ctxt);\n\t        this.title.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"title\", width);\n\t        this.title.bounds.y = y;\n\t        this.bounds.union(this.title.bounds);\n\t        this.title.bounds.y += this.title.origin.y;\n\t        y += this.title.bounds.height + this.title.padding(ctxt);\n\t      }\n\t      if (this.subtitle) {\n\t        if (y) y += this.subtitle.padding(ctxt);\n\t        this.subtitle.recalculateMetrics(ctxt);\n\t        this.subtitle.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"subtitle\", width);\n\t        this.subtitle.bounds.y = y;\n\t        this.bounds.union(this.subtitle.bounds);\n\t        this.subtitle.bounds.y += this.subtitle.origin.y;\n\t        y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n\t      }\n\t      var finalY = y,\n\t          textLeft = this.score.overrideTextLeft || this.textLeft;\n\t      if (textLeft) {\n\t        textLeft.recalculateMetrics(ctxt);\n\t        textLeft.bounds.y = y;\n\t        this.bounds.union(textLeft.bounds);\n\t        textLeft.bounds.y += textLeft.origin.y;\n\t        finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n\t      }\n\t      if (this.textRight) {\n\t        this.textRight.recalculateMetrics(ctxt);\n\t        this.textRight.bounds.x = width;\n\t        this.textRight.bounds.y = y;\n\t        this.bounds.union(this.textRight.bounds);\n\t        this.textRight.bounds.y += this.textRight.origin.y;\n\t        finalY = Math.max(finalY, y + this.textRight.bounds.height + this.textRight.padding(ctxt));\n\t      }\n\t      return finalY;\n\t    }\n\t  }, {\n\t    key: \"setSupertitle\",\n\t    value: function setSupertitle(ctxt, supertitle) {\n\t      this.supertitle = supertitle ? new _ExsurgeDrawing.Supertitle(ctxt, supertitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTitle\",\n\t    value: function setTitle(ctxt, title) {\n\t      this.title = title ? new _ExsurgeDrawing.Title(ctxt, title) : null;\n\t    }\n\t  }, {\n\t    key: \"setSubtitle\",\n\t    value: function setSubtitle(ctxt, subtitle) {\n\t      this.subtitle = subtitle ? new _ExsurgeDrawing.Subtitle(ctxt, subtitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTextLeft\",\n\t    value: function setTextLeft(ctxt, textLeft) {\n\t      this.textLeft = textLeft ? new _ExsurgeDrawing.TextLeftRight(ctxt, textLeft, \"textLeft\") : null;\n\t    }\n\t  }, {\n\t    key: \"setTextRight\",\n\t    value: function setTextRight(ctxt, textRight) {\n\t      this.textRight = textRight ? new _ExsurgeDrawing.TextLeftRight(ctxt, textRight, \"textRight\") : null;\n\t    }\n\t  }, {\n\t    key: \"hasSupertitle\",\n\t    value: function hasSupertitle(ctxt, supertitle) {\n\t      return !!this.supertitle;\n\t    }\n\t  }, {\n\t    key: \"hasTitle\",\n\t    value: function hasTitle(ctxt, title) {\n\t      return !!this.title;\n\t    }\n\t  }, {\n\t    key: \"hasSubtitle\",\n\t    value: function hasSubtitle(ctxt, subtitle) {\n\t      return !!this.subtitle;\n\t    }\n\t  }, {\n\t    key: \"hasTextLeft\",\n\t    value: function hasTextLeft(ctxt, textLeft) {\n\t      return !!this.textLeft;\n\t    }\n\t  }, {\n\t    key: \"hasTextRight\",\n\t    value: function hasTextRight(ctxt, textRight) {\n\t      return !!this.textRight;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      var _arr = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i = 0; _i < _arr.length; _i++) {\n\t        var el = _arr[_i];\n\t        if (el) el.draw(ctxt, scale);\n\t      }\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var nodes = [];\n\t\n\t      var _arr2 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n\t        var el = _arr2[_i2];\n\t        if (el) nodes.push(el[functionName](ctxt));\n\t      }\n\t      return nodes;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\t\n\t      var node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", { class: \"Titles\", source: this }].concat(_toConsumableArray(nodes)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      var _arr3 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n\t        var el = _arr3[_i3];\n\t        if (el) fragment += el.createSvgFragment(ctxt);\n\t      }\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n\t      return fragment;\n\t    }\n\t  }]);\n\t\n\t  return Titles;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// exsurge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c3ef232c639e4aaf0bbf","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n'use strict';\n\n// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n// import { Gabc } from './Exsurge.Gabc.js'\n//\n// // client side support\n//\n// if (typeof document !== 'undefined' && document.registerElement) {\n//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n//\n//   ChantVisualElementPrototype.createdCallback = function() {\n//     var ctxt = new ChantContext();\n//\n//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n//\n//     var useDropCap = true;\n//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n//     if (useDropCapAttr === 'false')\n//       useDropCap = false;\n//\n//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n//\n//     var annotationAttr = this.getAttribute(\"annotation\");\n//     if (annotationAttr) {\n//       // add an annotation\n//       score.annotation = new Annotation(ctxt, annotationAttr);\n//     }\n//\n//     var _element = this;\n//\n//     var width = 0;\n//     var doLayout = function() {\n//       var newWidth = _element.parentElement.clientWidth;\n//       if(width === newWidth) return;\n//       width = newWidth;\n//       // perform layout on the chant\n//       score.performLayout(ctxt, function() {\n//         score.layoutChantLines(ctxt, width, function() {\n//           // render the score to svg code\n//           _element.appendElement(score.createSvgNode(ctxt));\n//         });\n//       });\n//     }\n//     doLayout();\n//     if (window.addEventListener)\n//       window.addEventListener('resize',doLayout,false);\n//     else if (window.attachEvent)\n//       window.attachEvent('onresize',doLayout);\n//   }\n//\n//   ChantVisualElementPrototype.attachedCallback = function() {\n//\n//   }\n//\n//   // register the custom element\n//   // if(window.customElements && window.customElements.define) {\n//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n//   // } else {\n//     document.registerElement('chant-visual', {\n//       prototype: ChantVisualElementPrototype\n//     });\n//   // }\n// }\n\nexport * from './Exsurge.Core.js'\nexport * from './Exsurge.Text.js'\nexport * from './Exsurge.Glyphs.js'\nexport * from './Exsurge.Drawing.js'\nexport * from './Exsurge.Chant.js'\nexport * from './Exsurge.Chant.ChantLine.js'\nexport * from './Exsurge.Chant.Markings.js'\nexport * from './Exsurge.Chant.Signs.js'\nexport * from './Exsurge.Chant.Neumes.js'\nexport * from './Exsurge.Gabc.js'\nexport * from './Exsurge.Titles.js'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nexport var Units = {\n  // enums\n  DeviceIndepenedent: 0, // device independent units: 96/inch\n  Centimeters: 1,\n  Millimeters: 2,\n  Inches: 3,\n\n  // constants for device independent units (diu)\n  DIU_PER_INCH: 96,\n  DIU_PER_CENTIMETER: 96 / 2.54,\n\n  ToDeviceIndependent: function (n, inputUnits) {\n    switch (inputUnits) {\n      case Centimeters:\n        return n * Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n * Units.DIU_PER_CENTIMETER / 10;\n      case Inches:\n        return n * Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n  FromDeviceIndependent: function (n, outputUnits) {\n    switch (outputUnits) {\n      case Centimeters:\n        return n / Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n / Units.DIU_PER_CENTIMETER * 10;\n      case Inches:\n        return n / Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n\n  StringToUnitsType: function(s) {\n    switch (s.ToLower()) {\n      case \"in\":\n      case \"inches\":\n        return Units.Inches;\n\n      case \"cm\":\n      case \"centimeters\":\n        return Units.Centimeters;\n\n      case \"mm\":\n      case \"millimeters\":\n        return Units.Millimeters;\n\n      case \"di\":\n      case \"device-independent\":\n        return Units.DeviceIndepenedent;\n\n      default:\n        return Units.DeviceIndepenedent;\n    }\n  },\n\n  UnitsTypeToString: function(units) {\n    switch (units) {\n      case Units.Inches: return \"in\";\n      case Units.Centimeters: return \"cm\";\n      case Units.Millimeters: return \"mm\";\n      case Units.DeviceIndepenedent: return \"device-independent\";\n      default: return \"device-independent\";\n    }\n  }\n}\n\nexport function DeviceIndependent(n) {\n  return n;\n}\n\nexport function Centimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function Millimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function Inches(n) {\n  return Units.ToDeviceIndependent(n, Units.Inches);\n}\n\nexport function ToCentimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function ToMillimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function ToInches(n) {\n  return Units.FromDeviceIndependent(n, Units.Inches);\n}\n\n\n/*\n * Point\n */\nexport class Point {\n  constructor(x, y) {\n    this.x = (typeof x !== 'undefined') ? x : 0;\n    this.y = (typeof y !== 'undefined') ? y : 0;\n  }\n\n  clone() {\n    return new Point(this.x, this.y);\n  }\n\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n}\n\n/*\n * Rect\n */\nexport class Rect {\n  constructor(x, y, width, height) {\n    this.x = (typeof x !== 'undefined') ? x : Infinity;\n    this.y = (typeof y !== 'undefined') ? y : Infinity;\n    this.width = (typeof width !== 'undefined') ? width : -Infinity;\n    this.height = (typeof height !== 'undefined') ? height : -Infinity;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  isEmpty() {\n    return (this.x === Infinity &&\n            this.y === Infinity &&\n            this.width === -Infinity &&\n            this.height === -Infinity);\n  }\n\n  // convenience method\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  equals(rect) {\n    return this.x === rect.x && this.y === rect.y &&\n           this.width === rect.width && this.height === rect.height;\n  }\n\n  // other can be a Point or a Rect\n  contains(other) {\n    if (other instanceof Point) {\n      return other.x >= this.x &&\n              other.x <= this.x + this.width &&\n              other.y >= this.y &&\n              other.y <= this.y + this.height;\n    } else { // better be instance of Rect\n      return this.x <= other.x &&\n              this.x + this.width >= other.x + other.width &&\n              this.y <= other.y &&\n              this.y + this.height >= other.y + other.height;\n    }\n  }\n\n  union(rect) {\n\n    var right = Math.max(this.x + this.width, rect.x + rect.width);\n    var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\n    this.x = Math.min(this.x, rect.x);\n    this.y = Math.min(this.y, rect.y);\n\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n  }\n}\n\n/**\n * Margins\n *\n * @class\n */\nexport class Margins {\n  constructor(left, top, right, bottom) {\n    this.left = (typeof left !== 'undefined') ? left : 0;\n    this.top = (typeof top !== 'undefined') ? top : 0;\n    this.right = (typeof right !== 'undefined') ? right : 0;\n    this.bottom = (typeof bottom !== 'undefined') ? bottom : 0;\n  }\n\n  clone() {\n    return new Margins(this.left, this.top, this.right, this.bottom);\n  }\n\n  equals(margins) {\n    return this.left === margins.left &&\n        this.top === margins.top &&\n        this.right === margins.right &&\n        this.bottom === margins.bottom;\n  }\n}\n\n/**\n * Size\n *\n * @class\n */\nexport class Size {\n  constructor(width, height) {\n    this.width = (typeof width !== 'undefined') ? width : 0;\n    this.height = (typeof height !== 'undefined') ? height : 0;\n  }\n\n  clone() {\n    return new Size(this.width, this.height);\n  }\n\n  equals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n}\n\n\n/*\n * Pitches, notes\n */\nexport var Step = {\n  Do: 0,\n  Du: 1,\n  Re: 2,\n  Me: 3,\n  Mi: 4,\n  Fa: 5,\n  Fu: 6,\n  So: 7,\n  La: 9,\n  Te: 10,\n  Ti: 11\n};\n\n  // this little array helps map step values to staff positions. The numeric values of steps\n  // correspond to whole step increments (2) or half step increments (1). This gives us the ability\n  // to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n  // array maps the steps to an incremental position the steps take on the staff line. This works\n  // so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n  // for relatively easy mapping to staff line locations.\n  //                         Do Du Re Me Mi Fa Fu So    La Te Ti\nvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\nvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\n\nexport class Pitch {\n  constructor(step, octave) {\n    if(typeof octave === 'undefined') {\n      octave = Math.floor(step / 12)\n      step = step % 12;\n    }\n    this.step = step;\n    this.octave = octave;\n  }\n\n  toInt() {\n    return this.octave * 12 + this.step;\n  }\n\n  transpose(step) {\n    return new Pitch(this.toInt() + step);\n  }\n\n  isHigherThan(pitch) {\n    return this.toInt() > pitch.toInt();\n  }\n\n  isLowerThan(pitch) {\n    return this.toInt() < pitch.toInt();\n  }\n\n  equals(pitch) {\n    return this.toInt() === pitch.toInt();\n  }\n\n  static stepToStaffOffset(step) {\n    return __StepToStaffPosition[step];\n  }\n\n  static staffOffsetToStep(offset) {\n    while (offset < 0)\n      offset = __StaffOffsetToStep.length + offset;\n\n    return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n  }\n}\n\nexport function generateRandomGuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4();\n}\n\nexport function getCssForProperties(properties) {\n  return Object.keys(properties).map(key => `${key}: ${properties[key]};`).join('');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Core.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport * as Exsurge from \"./Exsurge.Core.js\";\n\n/**\n * @class\n */\nexport class Language {\n  constructor(name) {\n    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n    this.centerNeume = false;\n  }\n\n  /**\n   * @param {String} text The string to parsed into words.\n   * @return {Word[]} the resulting parsed words from syllabification\n   */\n  syllabify(text) {\n    var parsedWords = [];\n\n    if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\n    // Divide the text into words separated by whitespace\n    var words = text.split(/[\\s]+/);\n\n    for (var i = 0, end = words.length; i < end; i++)\n      parsedWords.push(this.syllabifyWord(words[i]));\n\n    return parsedWords;\n  }\n}\n\nexport class English extends Language {\n  constructor() {\n    super(\"English\");\n    this.centerNeume = true;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n    var match = regexLetter.exec(s.slice(startIndex));\n    if (match)\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[0].length\n      };\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Latin extends Language {\n  /**\n   * @constructs\n   */\n  constructor() {\n    super(\"Latin\");\n\n    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n    this.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n    this.possibleDiphthongs = this.diphthongs.concat([\n      \"ei\",\n      \"eu\",\n      \"ui\",\n      \"éi\",\n      \"éu\",\n      \"úi\"\n    ]);\n    this.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\n    // some words that are simply exceptions to standard syllabification rules!\n    var wordExceptions = new Object();\n\n    // ui combos pronounced as diphthongs\n    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n    wordExceptions[\"huic\"] = [\"huic\"];\n    wordExceptions[\"cui\"] = [\"cui\"];\n    wordExceptions[\"hui\"] = [\"hui\"];\n\n    // eu combos pronounced as diphthongs\n    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n    wordExceptions[\"seu\"] = [\"seu\"];\n\n    this.vowels = [\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"á\",\n      \"é\",\n      \"í\",\n      \"ó\",\n      \"ú\",\n      \"ä\",\n      \"ë\",\n      \"ï\",\n      \"ö\",\n      \"ü\",\n      \"ā\",\n      \"ē\",\n      \"ī\",\n      \"ō\",\n      \"ū\",\n      \"ă\",\n      \"ĕ\",\n      \"ĭ\",\n      \"ŏ\",\n      \"ŭ\",\n      \"å\",\n      \"e̊\",\n      \"o̊\",\n      \"ů\",\n      \"æ\",\n      \"œ\",\n      \"ǽ\", // no accented œ in unicode?\n      \"y\",\n      \"ý\",\n      \"ÿ\"\n    ]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\n    this.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\n    this.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\n    this.liquidConsonants = [\"l\", \"r\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  isVowelThatMightBeConsonant(c) {\n    for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++)\n      if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  // substring should be a vowel and the character following\n  isVowelActingAsConsonant(substring) {\n    return (\n      this.isVowelThatMightBeConsonant(substring[0]) &&\n      this.isVowel(substring[1])\n    );\n  }\n\n  /**\n   * f is not a mute consonant, but we lump it together for syllabification\n   * since it is syntactically treated the same way\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isMuteConsonantOrF(c) {\n    for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++)\n      if (this.muteConsonantsAndF[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is a liquid consonant\n   */\n  isLiquidConsonant(c) {\n    for (var i = 0, end = this.liquidConsonants.length; i < end; i++)\n      if (this.liquidConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isPossibleDiphthong(s) {\n    for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++)\n      if (this.possibleDiphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n   *\n   * Divisions occur when:\n   *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n   *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n   *   3. After the first consonant when two or more consonants follow a vowel\n   *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n   *\n   * Exceptions:\n   *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n   *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n   *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n   *\n   * In addition to these rules, Wheelock's Latin provides this sound exception:\n   *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n   *      th, which should never be separated in syllabification:\n   *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n   *\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n    var haveCompleteSyllable = false;\n    var previousWasVowel = false;\n    var workingString = word.toLowerCase();\n    var startSyllable = 0;\n\n    var c, lookahead, haveLookahead;\n\n    // a helper function to create syllables\n    var makeSyllable = function(length) {\n      if (haveCompleteSyllable) {\n        syllables.push(word.substr(startSyllable, length));\n        startSyllable += length;\n      }\n\n      haveCompleteSyllable = false;\n    };\n\n    for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n      c = workingString[i];\n\n      // get our lookahead in case we need them...\n      lookahead = \"*\";\n      haveLookahead = i + 1 < wordLength;\n\n      if (haveLookahead) lookahead = workingString[i + 1];\n\n      var cIsVowel = this.isVowel(c);\n\n      // i is a special case for a vowel. when i is at the beginning\n      // of the word (Iesu) or i is between vowels (alleluia),\n      // then the i is treated as a consonant (y)\n      if (c === \"i\") {\n        if (i === 0 && haveLookahead && this.isVowel(lookahead))\n          cIsVowel = false;\n        else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n          cIsVowel = false;\n        }\n      }\n\n      if (c === \"-\") {\n        // a hyphen forces a syllable break, which effectively resets\n        // the logic...\n\n        haveCompleteSyllable = true;\n        previousWasVowel = false;\n        makeSyllable(i - startSyllable);\n        startSyllable++;\n      } else if (cIsVowel) {\n        // once we get a vowel, we have a complete syllable\n        haveCompleteSyllable = true;\n\n        if (\n          previousWasVowel &&\n          !this.isDiphthong(workingString[i - 1] + \"\" + c)\n        ) {\n          makeSyllable(i - startSyllable);\n          haveCompleteSyllable = true;\n        }\n\n        previousWasVowel = true;\n      } else if (haveLookahead) {\n        if (\n          (c === \"q\" && lookahead === \"u\") ||\n          (lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\"))\n        ) {\n          // handle wheelock's exceptions for qu, ch, ph and th\n          makeSyllable(i - startSyllable);\n          i++; // skip over the 'h' or 'u'\n        } else if (previousWasVowel && this.isVowel(lookahead)) {\n          // handle division rule 2\n          makeSyllable(i - startSyllable);\n        } else if (\n          this.isMuteConsonantOrF(c) &&\n          this.isLiquidConsonant(lookahead)\n        ) {\n          // handle exception 2\n          makeSyllable(i - startSyllable);\n        } else if (haveCompleteSyllable) {\n          // handle division rule 3\n          makeSyllable(i + 1 - startSyllable);\n        }\n\n        previousWasVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var match = this.regexVowel.exec(s.slice(startIndex));\n    if (match) {\n      if (match[1]) {\n        // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n        match.index += match[1].length;\n      }\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[2].length\n      };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Spanish extends Language {\n  constructor() {\n    super(\"Spanish\");\n\n    this.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\n    this.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\n    this.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\n    this.diphthongs = [\n      \"ai\",\n      \"ei\",\n      \"oi\",\n      \"ui\",\n      \"ia\",\n      \"ie\",\n      \"io\",\n      \"iu\",\n      \"au\",\n      \"eu\",\n      \"ou\",\n      \"ua\",\n      \"ue\",\n      \"uo\",\n      \"ái\",\n      \"éi\",\n      \"ói\",\n      \"úi\",\n      \"iá\",\n      \"ié\",\n      \"ió\",\n      \"iú\",\n      \"áu\",\n      \"éu\",\n      \"óu\",\n      \"uá\",\n      \"ué\",\n      \"uó\",\n      \"üe\",\n      \"üi\"\n    ];\n\n    this.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isWeakVowel(c) {\n    for (var i = 0, end = this.weakVowels.length; i < end; i++)\n      if (this.weakVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isStrongVowel(c) {\n    for (var i = 0, end = this.strongVowels.length; i < end; i++)\n      if (this.strongVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  createSyllable(text) {\n    /*\n    var accented = false;\n    var ellidesToNext = false;\n\n    if (text.length > 0) {\n\n        if (text[0] == '`') {\n            accented = true;\n            text = text.substr(1);\n        }\n\n        if (text[text.length - 1] == '_') {\n            ellidesToNext = true;\n            text = text.substr(0, text.length - 1);\n        }\n    }\n\n    var s = new Syllable(text);\n\n    s.isMusicalAccent = accented;\n    s.elidesToNext = ellidesToNext;*/\n\n    return text;\n  }\n\n  /**\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n\n    var haveCompleteSyllable = false;\n    var previousIsVowel = false;\n    var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n    var startSyllable = 0;\n\n    // fixme: first check for prefixes\n\n    for (var i = 0; i < word.length; i++) {\n      var c = word[i].toLowerCase();\n\n      if (this.isVowel(c)) {\n        // we have a complete syllable as soon as we have a vowel\n        haveCompleteSyllable = true;\n\n        var cIsStrongVowel = this.isStrongVowel(c);\n\n        if (previousIsVowel) {\n          // if we're at a strong vowel, then we finish out the last syllable\n          if (cIsStrongVowel) {\n            if (previousIsStrongVowel) {\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            }\n          }\n        }\n\n        previousIsVowel = true;\n        previousIsStrongVowel = cIsStrongVowel;\n      } else {\n        if (!haveCompleteSyllable) {\n          // do nothing since we don't have a complete syllable yet...\n        } else {\n          // handle explicit syllable breaks\n          if (word[i] === \"-\") {\n            // start new syllable\n            syllables.push(\n              this.createSyllable(word.substr(startSyllable, i - startSyllable))\n            );\n            startSyllable = ++i;\n          } else {\n            var numberOfConsonants = 1,\n              consonant2;\n\n            // count how many more consonants there are\n            for (var j = i + 1; j < word.length; j++) {\n              if (this.isVowel(word[j])) break;\n              numberOfConsonants++;\n            }\n\n            if (numberOfConsonants === 1) {\n              // start new syllable\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            } else if (numberOfConsonants === 2) {\n              consonant2 = word[i + 1].toLowerCase();\n              if (\n                consonant2 === \"l\" ||\n                consonant2 === \"r\" ||\n                (c === \"c\" && consonant2 === \"h\")\n              ) {\n                // split before the consonant pair\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n                startSyllable = i++;\n              } else {\n                //split the consonants\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n                startSyllable = i;\n              }\n            } else if (numberOfConsonants === 3) {\n              consonant2 = word[i + 1].toLowerCase();\n\n              // if second consonant is s, divide cc-c, otherwise divide c-cc\n              if (consonant2 === \"s\") {\n                i += 2;\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n              } else\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n\n              startSyllable = i;\n            } else if (numberOfConsonants === 4) {\n              // four always get split cc-cc\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable + 2)\n                )\n              );\n              startSyllable = i + 2;\n              i += 3;\n            }\n          }\n\n          haveCompleteSyllable = false;\n        }\n\n        previousIsVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n    else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var i, end, index;\n    var workingString = s.toLowerCase();\n\n    // do we have a diphthongs?\n    for (i = 0, end = this.diphthongs.length; i < end; i++) {\n      var d = this.diphthongs[i];\n      index = workingString.indexOf(d, startIndex);\n\n      if (index >= 0) {\n        // check the exceptions...\n        if (d[0] === \"u\" && index > 0) {\n          var tripthong = s.substr(index - 1, 3).toLowerCase();\n\n          for (\n            let j = 0, endj = this.uDiphthongExceptions.length;\n            i < endj;\n            j++\n          ) {\n            if (tripthong === this.uDiphthongExceptions[j]) {\n              // search from after the u...\n              return this.findVowelSegment(s, index + 1);\n            }\n          }\n        }\n\n        return { found: true, startIndex: index, length: d.length };\n      }\n    }\n\n    // no diphthongs. Let's look for single vowels then...\n    for (i = 0, end = this.vowels.length; i < end; i++) {\n      index = workingString.indexOf(this.vowels[i], startIndex);\n\n      if (index >= 0) return { found: true, startIndex: index, length: 1 };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\nexport const language = {\n  english: new English(),\n  latin: new Latin(),\n  spanish: new Spanish()\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Text.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// generated based on the svg data\nexport let Glyphs = {\n  None: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    origin: {\n      x: 0,\n      y: 0\n    },\n    align: \"left\"\n  },\n  AcuteAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0.803,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  GraveAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, //110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0, // -110.992,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  Circle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    },\n    origin: {\n      x: -50,\n      y: 100\n    }\n  },\n  Semicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  ReversedSemicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  Stropha: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.657,\n      height: 151.562\n    },\n    origin: {\n      x: 48,\n      y: 73.438\n    },\n    align: \"left\"\n  },\n  BeginningAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  BeginningDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  CustosDescLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 65.59\n    },\n    align: \"left\"\n  },\n  CustosDescShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.053\n    },\n    origin: {\n      x: 0,\n      y: 65.89\n    },\n    align: \"left\"\n  },\n  CustosLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 270.082\n    },\n    align: \"left\"\n  },\n  CustosShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.052\n    },\n    origin: {\n      x: 0,\n      y: 200.365\n    },\n    align: \"left\"\n  },\n  DoClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 331.251\n    },\n    origin: {\n      x: 0,\n      y: 164.876\n    },\n    align: \"left\"\n  },\n  FaClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 193.752,\n      height: 333.595\n    },\n    origin: {\n      x: 0.001,\n      y: 157.001\n    },\n    align: \"left\"\n  },\n  Flat: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.917,\n      height: 267.969\n    },\n    origin: {\n      x: 1.042,\n      y: 204.406\n    },\n    align: \"left\"\n  },\n  Mora: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 48,\n      height: 48\n    },\n    origin: {\n      x: -24,\n      y: 24\n    },\n    align: \"left\"\n  },\n  Natural: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 70.311,\n      height: 330.469\n    },\n    origin: {\n      x: 0.312,\n      y: 166.563\n    },\n    align: \"left\"\n  },\n  Sharp: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 154.646,\n      height: 147.987\n    },\n    origin: {\n      x: 0,\n      y: 74.098\n    },\n    align: \"left\"\n  },\n  OriscusAsc: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 76\n    },\n    align: \"left\"\n  },\n  OriscusDes: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  OriscusLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  PodatusLower: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 103.124\n    },\n    origin: {\n      x: 50,\n      y: 42\n    },\n    align: \"left\"\n  },\n  PodatusUpper: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 91.406,\n      height: 125.781\n    },\n    origin: {\n      x: 91.406,\n      y: 63.781\n    },\n    align: \"right\"\n  },\n  Porrectus1: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 302.344,\n      height: 215.627\n    },\n    origin: {\n      x: 50,\n      y: 52.75\n    },\n    align: \"left\"\n  },\n  Porrectus2: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.343,\n      height: 328.126\n    },\n    origin: {\n      x: 50,\n      y: 68.75\n    },\n    align: \"left\"\n  },\n  Porrectus3: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.344,\n      height: 427.345\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  Porrectus4: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 420,\n      height: 525.78\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  PunctumCavum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      },\n      {\n        type: \"negative\",\n        data:\n          \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  PunctumInclinatum: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150.78\n    },\n    origin: {\n      x: 50,\n      y: 75.78\n    },\n    align: \"left\"\n  },\n  PunctumInclinatumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 105.546\n    },\n    origin: {\n      x: 50,\n      y: 53.164\n    },\n    align: \"left\"\n  },\n  Quilisma: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150\n    },\n    origin: {\n      x: 50,\n      y: 89.282\n    },\n    align: \"left\"\n  },\n  TerminatingAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 49.999,\n      height: 121.873\n    },\n    origin: {\n      x: 49.999,\n      y: 48.843\n    },\n    align: \"right\"\n  },\n  TerminatingDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 50,\n      height: 122.658\n    },\n    origin: {\n      x: 50,\n      y: 80.97\n    },\n    align: \"right\"\n  },\n  VerticalEpisemaAbove: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 60\n    },\n    align: \"left\"\n  },\n  VerticalEpisemaBelow: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 0\n    },\n    align: \"left\"\n  },\n  VirgaLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 326.562\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  VirgaShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 253.126\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  Virgula: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 98.014,\n      height: 175.221\n    },\n    origin: {\n      x: 1.074,\n      y: 88.86\n    },\n    align: \"left\"\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Glyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  Units,\n  Pitch,\n  Point,\n  Rect,\n  Margins,\n  Size,\n  Step,\n  getCssForProperties\n} from \"./Exsurge.Core.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\nimport { language } from \"./Exsurge.Text.js\";\n\nfunction getFontFilenameForProperties(properties = {}, url = \"{}\") {\n  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n    bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n  return url.replace(\n    \"{}\",\n    `${italic || bold ? `${bold}${italic}` : `Regular`}`\n  );\n}\n\n// load in the web font for special chant characters here:\n// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\nconst canAccessDOM = typeof document !== \"undefined\";\n\nconst __getNeumeFromSvgElem = (score, elem) => {\n  let note =\n    score.notes[\n      elem.parentElement\n        .querySelector(\"[element-index]\")\n        .getAttribute(\"element-index\")\n    ];\n  return note.neume || note;\n};\n\n// for positioning markings on notes\nexport var MarkingPositionHint = {\n  Default: 0,\n  Above: 1,\n  Below: 2\n};\n\n/**\n * List of types of text and their defaults relative to lyrics\n * @type Array\n */\nexport const TextTypes = {\n  supertitle: {\n    display: \"Supertitle\",\n    defaultSize: (size) => (size * 7) / 6, // 14pt\n    containedInScore: (score) => score.titles.hasSupertitle(),\n    getFromScore: (score) => score.titles.supertitle\n  },\n  title: {\n    display: \"Title\",\n    defaultSize: (size) => (size * 3) / 2, // 18pt\n    containedInScore: (score) => score.titles.hasTitle(),\n    getFromScore: (score) => score.titles.title\n  },\n  subtitle: {\n    display: \"Subtitle\",\n    defaultSize: (size) => size, // 12pt\n    containedInScore: (score) => score.titles.hasSubtitle(),\n    getFromScore: (score) => score.titles.subtitle\n  },\n  leftRight: {\n    display: \"Left / Right Text\",\n    cssClass: \"textLeftRight\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) =>\n      score.titles.hasTextLeft() || score.titles.hasTextRight(),\n    getFromScore: (score, elem) => score.titles[elem.extraClass],\n    getFromSvgElem: (score, elem) =>\n      score.titles[\n        elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"\n      ]\n  },\n  annotation: {\n    display: \"Annotation\",\n    defaultSize: (size) => (size * 2) / 3,\n    containedInScore: (score) =>\n      !!score.annotation &&\n      (!score.mergeAnnotationWithTextLeft || score.dropCap),\n    getFromScore: (score, { elementIndex = 0 }) =>\n      score.annotation &&\n      (score.annotation.annotations\n        ? score.annotation.annotations[elementIndex]\n        : score.annotation)\n  },\n  dropCap: {\n    display: \"Drop Cap\",\n    defaultSize: (size) => size * 4,\n    containedInScore: (score) => !!score.dropCap,\n    getFromScore: (score) => score.dropCap\n  },\n  al: {\n    display: \"Above Staff\",\n    cssClass: \"aboveLinesText\",\n    defaultSize: (size) => size,\n    containedInScore: (score) => score.hasAboveLinesText,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].alText[elem.alIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).alText[\n        elem.getAttribute(\"al-index\") || 0\n      ]\n  },\n  choralSign: {\n    display: \"Choral Sign\",\n    size: (ctxt) => ctxt.staffInterval * 1.5,\n    containedInScore: (score) => false,\n    getFromScore: (score, elem) =>\n      score.notes[elem.note.elementIndex].choralSign\n  },\n  lyric: {\n    display: \"Lyric\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) => score.hasLyrics,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).lyrics[\n        elem.getAttribute(\"lyric-index\") || 0\n      ]\n  },\n  translation: {\n    display: \"Translation\",\n    defaultSize: (size) => size * 0.75,\n    containedInScore: (score) => score.hasTranslations,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].translationText[\n        elem.translationIndex\n      ],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).translationText[\n        elem.getAttribute(\"translation-index\") || 0\n      ]\n  }\n};\nexport const TextTypesByClass = {};\nObject.entries(TextTypes).forEach(([key, entry]) => {\n  let cssClass = (entry.cssClass = entry.cssClass || key);\n  entry.key = key;\n  TextTypesByClass[cssClass] = entry;\n});\n\nexport const DefaultTrailingSpace = (ctxt) =>\n  ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\nDefaultTrailingSpace.isDefault = true;\n\nexport let GlyphCode = {\n  None: \"None\",\n\n  AcuteAccent: \"AcuteAccent\",\n  GraveAccent: \"GraveAccent\",\n  Circle: \"Circle\",\n  Semicircle: \"Semicircle\",\n  ReversedSemicircle: \"ReversedSemicircle\",\n  Stropha: \"Stropha\",\n  StrophaLiquescent: \"StrophaLiquescent\",\n\n  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\n  CustosDescLong: \"CustosDescLong\",\n  CustosDescShort: \"CustosDescShort\",\n  CustosLong: \"CustosLong\",\n  CustosShort: \"CustosShort\",\n\n  // clefs and other markings\n  DoClef: \"DoClef\",\n  FaClef: \"FaClef\",\n  Flat: \"Flat\",\n  Mora: \"Mora\",\n  Natural: \"Natural\",\n  OriscusAsc: \"OriscusAsc\",\n  OriscusDes: \"OriscusDes\",\n  OriscusLiquescent: \"OriscusLiquescent\",\n\n  PodatusLower: \"PodatusLower\",\n  PodatusUpper: \"PodatusUpper\",\n\n  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n  Porrectus3: \"Porrectus3\",\n  Porrectus4: \"Porrectus4\",\n\n  PunctumCavum: \"PunctumCavum\",\n  PunctumQuadratum: \"PunctumQuadratum\",\n  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n  PunctumInclinatum: \"PunctumInclinatum\",\n  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n  Quilisma: \"Quilisma\",\n\n  Sharp: \"Sharp\",\n  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n  VirgaLong: \"VirgaLong\",\n  VirgaShort: \"VirgaShort\",\n  Virgula: \"Virgula\",\n\n  UpperBrace: \"UpperBrace\"\n}; // GlyphCode\n\nexport var QuickSvg = {\n  // namespaces\n  ns: \"http://www.w3.org/2000/svg\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n\n  hasDOMAccess: function () {\n    return canAccessDOM;\n  },\n\n  // create the root level svg object\n  svg: function (width, height) {\n    var node = document.createElementNS(this.ns, \"svg\");\n\n    node.setAttribute(\"xmlns\", this.ns);\n    node.setAttribute(\"version\", \"1.1\");\n    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    // create the defs element\n    var defs = document.createElementNS(this.ns, \"defs\");\n    node.appendChild(defs);\n\n    node.defs = defs;\n\n    node.clearNotations = function () {\n      // clear out all children except defs\n      node.removeChild(defs);\n\n      while (node.hasChildNodes()) node.removeChild(node.lastChild);\n\n      node.appendChild(defs);\n    };\n\n    return node;\n  },\n\n  rect: function (width, height) {\n    var node = document.createElementNS(this.ns, \"rect\");\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    return node;\n  },\n\n  line: function (x1, y1, x2, y2) {\n    var node = document.createElementNS(this.ns, \"line\");\n\n    node.setAttribute(\"x1\", x1);\n    node.setAttribute(\"y1\", y1);\n    node.setAttribute(\"x2\", x2);\n    node.setAttribute(\"y2\", y2);\n\n    return node;\n  },\n\n  g: function () {\n    var node = document.createElementNS(this.ns, \"g\");\n\n    return node;\n  },\n\n  text: function () {\n    var node = document.createElementNS(this.ns, \"text\");\n\n    return node;\n  },\n\n  tspan: function (str) {\n    var node = document.createElementNS(this.ns, \"tspan\");\n    node.textContent = str;\n\n    return node;\n  },\n\n  // nodeRef should be the id of the object in defs (without the #)\n  use: function (nodeRef) {\n    var node = document.createElementNS(this.ns, \"use\");\n    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\n    return node;\n  },\n\n  svgFragmentForGlyph: function (glyph) {\n    var svgSrc = \"\";\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n        d: path.data || undefined,\n        fill: path.type === \"negative\" ? \"#fff\" : undefined\n      });\n    }\n    return svgSrc;\n  },\n\n  nodesForGlyph: function (glyph, functionName = \"createNode\") {\n    var nodes = [];\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      let props = {};\n      if (path.data) props.d = path.data;\n      if (path.type === \"negative\") props.fill = \"#fff\";\n      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n    }\n    return nodes;\n  },\n\n  createNode: function (name, attributes, children) {\n    var node = document.createElementNS(this.ns, name);\n    if (attributes && attributes.source) {\n      node.source = attributes.source;\n      delete attributes.source;\n    }\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      ) {\n        var val = attributes[attr];\n        var match = attr.match(/^([^:]+):([^:]+)$/);\n        if (match) {\n          node.setAttributeNS(this[match[1]], match[2], val);\n        } else {\n          node.setAttribute(attr, val);\n        }\n      }\n    }\n    if (children) {\n      if (typeof children === \"string\") {\n        node.textContent = children;\n      } else if (children.constructor === [].constructor) {\n        for (var i = 0; i < children.length; ++i) {\n          node.appendChild(children[i]);\n        }\n      } else {\n        node.appendChild(children);\n      }\n    }\n    return node;\n  },\n\n  createSvgTree(name, props, ...children) {\n    if (\"class\" in props) {\n      props.className = props.class;\n      delete props.class;\n    }\n    if (children.length === 1 && children[0] instanceof Array) {\n      children = children[0];\n    }\n    const convertKeysToCamelCase = (obj) => {\n      for (let key of Object.keys(obj)) {\n        if (/[-:][a-z]/.test(key)) {\n          if (/^\\w+-index$/.test(key)) continue;\n          let camelCase = key.replace(/[-:]([a-z])/g, (whole, letter) =>\n            letter.toUpperCase()\n          );\n          obj[camelCase] = obj[key];\n          delete obj[key];\n        }\n      }\n    };\n    convertKeysToCamelCase(props);\n    if (props.style) convertKeysToCamelCase(props.style);\n    let source = props.source;\n    if (source && source.sourceGabc) {\n      props[\"source-gabc\"] = source.sourceGabc;\n    }\n    return { name, props, children };\n  },\n\n  createFragment: function (name, attributes, child) {\n    if (child === undefined || child === null) child = \"\";\n\n    var fragment = \"<\" + name + \" \";\n\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      )\n        fragment += attr + '=\"' + attributes[attr] + '\" ';\n    }\n\n    fragment += \">\" + child + \"</\" + name + \">\";\n\n    return fragment;\n  },\n\n  parseFragment: function (fragment) {\n    // create temporary holder\n    var well = document.createElement(\"svg\");\n\n    // act as a setter if svg is given\n    if (fragment) {\n      var container = this.g();\n\n      // dump raw svg\n      // do this to allow the browser to automatically create svg nodes?\n      well.innerHTML =\n        \"<svg>\" +\n        fragment\n          .replace(/\\n/, \"\")\n          .replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") +\n        \"</svg>\";\n\n      // transplant nodes\n      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n        container.appendChild(well.firstChild.firstChild);\n\n      return container;\n    }\n  },\n\n  translate: function (node, x, y) {\n    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    return node;\n  },\n\n  scale: function (node, sx, sy) {\n    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n    return node;\n  }\n};\n\nexport var TextMeasuringStrategy = {\n  // shapes\n  Svg: 0,\n  Canvas: 1,\n  OpenTypeJS: 2\n};\n\n/*\n * ChantContext\n */\nexport class ChantContext {\n  constructor(\n    textMeasuringStrategy = QuickSvg.hasDOMAccess()\n      ? TextMeasuringStrategy.Canvas\n      : TextMeasuringStrategy.OpenTypeJS\n  ) {\n    this.textMeasuringStrategy = textMeasuringStrategy;\n    this.defs = {};\n    this.makeDefs = [];\n    if (QuickSvg.hasDOMAccess()) {\n      this.defsNode = QuickSvg.createNode(\"defs\");\n    }\n\n    // font styles\n    this.textStyles = {};\n    this.textColor = \"#000\";\n    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\n    this.rubricColor = \"#d00\";\n    this.specialCharProperties = {\n      \"font-family\": \"'Exsurge Characters'\",\n      fill: this.rubricColor\n    };\n    this.textBeforeSpecialChar = \"\";\n    this.textAfterSpecialChar = \".\";\n    this.specialCharText = (char) => char;\n\n    this.fontStyleDictionary = {\n      b: { \"font-weight\": \"bold\" },\n      i: { \"font-style\": \"italic\" },\n      u: { \"text-decoration\": \"underline\" },\n      ul: { \"text-decoration\": \"underline\" },\n      c: { fill: this.rubricColor },\n      sc: {\n        \"font-variant\": \"small-caps\",\n        \"font-variant-caps\": \"small-caps\",\n        \"font-feature-settings\": \"'smcp'\",\n        \"-webkit-font-feature-settings\": \"'smcp'\"\n      }\n    };\n\n    this.markupSymbolDictionary = {\n      \"*\": \"b\",\n      \"_\": \"i\",\n      \"^\": \"c\",\n      \"%\": \"sc\"\n    };\n\n    this.textStyles.al.prefix = \"<i>\";\n\n    this.textStyles.translation.prefix = \"<i>\";\n\n    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\n    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\n    this.minLedgerSeparation = 2; // multiple of staffInterval\n    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\n    // everything depends on the scale of the punctum\n    this.glyphPunctumWidth = Glyphs.PunctumQuadratum.bounds.width;\n    this.glyphPunctumHeight = Glyphs.PunctumQuadratum.bounds.height;\n\n    // max space to add between notations when justifying, in multiples of this.staffInterval\n    this.maxExtraSpaceInStaffIntervals = 0.5;\n\n    // for keeping track of the clef\n    this.activeClef = null;\n\n    this.neumeLineColor = \"#000\";\n    this.staffLineColor = \"#000\";\n    this.dividerLineColor = \"#000\";\n\n    this.defaultLanguage = language.latin;\n\n    // calculate the pixel ratio for drawing to a canvas\n    this.pixelRatio = window.devicePixelRatio || 1.0;\n\n    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\n    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n      document.body.insertBefore(\n        this.svgTextMeasurer,\n        document.body.firstChild\n      );\n    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n      this.makeCanvasIfNeeded();\n    }\n\n    // for connecting neume syllables...\n    this.syllableConnector = \"-\";\n\n    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n    this.scaleDefs = true;\n\n    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n    // on the text metrics, right? 1 punctum ~ x height size?\n    this.setGlyphScaling(1.0 / 16.0);\n\n    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n    this.interSyllabicMultiplier = 2.5;\n\n    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n    this.accidentalSpaceMultiplier = 2;\n\n    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n    this.interVerbalMultiplier = 1;\n\n    this.drawGuides = false;\n    this.drawDebuggingBounds = true;\n\n    // we keep track of where we are in processing notations, so that\n    // we can maintain the context for notations to know about.\n    //\n    // these are only gauranteed to be valid during the performLayout phase!\n    this.activeNotations = null;\n    this.currNotationIndex = -1;\n\n    // chant notation elements are normally separated by a minimum fixed amount of space\n    // on the staff line. It can happen, however, that two text elements are almost close\n    // enough to merge, only to be separated much more by the required hyphen (or other\n    // connecting string).\n    //\n    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n    // elements, thus bringing the chant notation elements a bit closer than otherwise\n    // would be normally allowed.\n    //\n    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n    this.condensingTolerance = 0.3;\n\n    // if auto color is true, then exsurge tries to automatically colorize\n    // some elements of the chant (directives become rubric color, etc.)\n    this.autoColor = true;\n\n    this.useExtraTextOnly = true;\n\n    this.insertFontsInDoc();\n  }\n\n  getFontForProperties(properties = {}, fontFamily) {\n    let key = getFontFilenameForProperties(properties),\n      keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n    return (\n      this.fontDictionary &&\n      (this.fontDictionary[keyWithFontFamily] ||\n        this.fontDictionary[fontFamily] ||\n        this.fontDictionary.Regular)\n    );\n  }\n\n  setFont(font, size = 16, baseStyle = {}, opentypeFontDictionary) {\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      let textStyle = (this.textStyles[key] = this.textStyles[key] || {});\n      textStyle.size = textType.defaultSize\n        ? textType.defaultSize(size, this)\n        : textType.size(this);\n      textStyle.font = font;\n      textStyle.color = this.textColor || \"#000\";\n    }\n\n    this.baseTextStyle = baseStyle;\n\n    if (opentypeFontDictionary) {\n      this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n      this.fontDictionary = opentypeFontDictionary;\n    }\n  }\n\n  setRubricColor(color) {\n    this.rubricColor = color;\n    this.specialCharProperties.fill = color;\n    this.fontStyleDictionary.c.fill = color;\n  }\n\n  setScaleDefs(scaleDefs) {\n    scaleDefs = !!scaleDefs;\n    if (this.scaleDefs !== scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.setGlyphScaling(this.glyphScaling);\n    }\n  }\n\n  createStyleCss() {\n    var style = \"\";\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      var cssClass = textType.cssClass,\n        { color, font, size } = this.textStyles[key];\n      style += `svg.Exsurge .${cssClass}{fill:${color};font-family:${font};font-size:${size}px;font-kerning:normal}`;\n    }\n    return style;\n  }\n\n  createStyleNode() {\n    var node = QuickSvg.createNode(\"style\", {});\n    node.textContent = this.createStyleCss(this);\n    return node;\n  }\n\n  createStyleTree() {\n    return { name: \"style\", props: {}, children: [this.createStyleCss(this)] };\n  }\n\n  createStyle() {\n    return \"<style>\" + this.createStyleCss(this) + \"</style>\";\n  }\n\n  updateHyphenWidth() {\n    // measure the size of a hyphen for the lyrics\n    var hyphen = new Lyric(\n      this,\n      this.syllableConnector,\n      LyricType.SingleSyllable\n    );\n    var multiplier =\n      this.minLyricWordSpacing /\n        (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n    this.hyphenWidth = hyphen.bounds.width;\n\n    this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n  }\n\n  setStaffHeight(staffHeight) {\n    this.setGlyphScaling(staffHeight / 600);\n  }\n\n  setGlyphScaling(glyphScaling) {\n    this.glyphScaling = glyphScaling;\n\n    this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\n    // setup the line weights for the various elements.\n    this.staffLineWeight = Math.ceil((5 * this.staffInterval) / 8) / 5;\n    this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n    this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n    this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\n    this.intraNeumeSpacing = this.staffInterval / 2.0;\n\n    while (this.defsNode && this.defsNode.firstChild)\n      this.defsNode.removeChild(this.defsNode.firstChild);\n    for (var i = 0; i < this.makeDefs.length; ++i) {\n      this.makeDefs[i]();\n    }\n\n    this.updateHyphenWidth();\n  }\n\n  calculateHeightFromStaffPosition(staffPosition) {\n    return -staffPosition * this.staffInterval;\n  }\n\n  insertFontsInDoc() {\n    if (!canAccessDOM) return;\n\n    var styleElement = document.getElementById(\"exsurge-fonts\");\n\n    if (styleElement === null) {\n      // create it since it doesn't exist yet.\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"exsurge-fonts\";\n\n      // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\n      document.head.appendChild(styleElement);\n    }\n  }\n\n  // returns the next neume starting at this.currNotationIndex, or null\n  // if there isn't a neume after this one...\n  findNextNeume() {\n    if (typeof this.currNotationIndex === \"undefined\")\n      throw \"findNextNeume() called without a valid currNotationIndex set\";\n\n    for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n      var notation = this.notations[i];\n\n      if (notation.isNeume && !notation.hasNoWidth) return notation;\n    }\n\n    return null;\n  }\n\n  makeCanvasIfNeeded() {\n    if (!this.canvas) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvasCtxt = this.canvas.getContext(\"2d\");\n    }\n  }\n\n  setCanvasSize(width, height, scale = 1) {\n    this.makeCanvasIfNeeded();\n\n    this.canvas.style.width = width * scale + \"px\";\n    this.canvas.style.height = height * scale + \"px\";\n    scale *= this.pixelRatio;\n    this.canvas.width = width * scale;\n    this.canvas.height = height * scale;\n\n    this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n  }\n}\n\n/*\n * ChantLayoutElement\n */\nexport class ChantLayoutElement {\n  constructor() {\n    this.bounds = new Rect();\n    this.origin = new Point(0, 0);\n\n    this.selected = false;\n    this.highlighted = false;\n  }\n\n  // draws the element on an html5 canvas\n  draw(ctxt) {\n    throw \"ChantLayout Elements must implement draw(ctxt)\";\n  }\n\n  // returns svg element\n  createSvgNode(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n  }\n\n  // returns svg code for the element, used for printing support\n  createSvgFragment(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n  }\n}\n\nexport class DividerLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, staffPosition0, staffPosition1, divider) {\n    super();\n\n    this.divider = divider;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    if (y0 > y1) {\n      var temp = y0;\n      y0 = y1;\n      y1 = temp;\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.dividerLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = this.bounds.width / 2;\n    this.origin.y = y0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.dividerLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    let props = {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.dividerLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.dividerLineColor,\n      class: \"dividerLine\"\n    };\n    if (this.divider) {\n      if (this.divider.selected) props.class += \" selected\";\n      props[\"source-index\"] = this.divider.sourceIndex;\n      props[\"element-index\"] = this.divider.elementIndex;\n      props.source = this.divider;\n    }\n    return props;\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class NeumeLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note0, note1, hanging) {\n    super();\n\n    var staffPosition0 = note0.staffPosition;\n    var staffPosition1 = note1.staffPosition;\n\n    // note0 should be the upper one for our calculations here\n    if (staffPosition0 < staffPosition1) {\n      var temp = staffPosition0;\n      staffPosition0 = staffPosition1;\n      staffPosition1 = temp;\n    }\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = 0;\n\n    if (hanging) {\n      // if the difference between the notes is only one, and the upper\n      // note is on a line, and the lower note is within the four staff lines,\n      // then our hanging line goes past the lower note by a whole\n      // staff interval\n      if (\n        staffPosition0 - staffPosition1 === 1 &&\n        Math.abs(staffPosition0) % 2 === 1 &&\n        staffPosition1 > -3\n      )\n        staffPosition1--;\n\n      y1 += (ctxt.glyphPunctumHeight * ctxt.glyphScaling) / 2.2;\n    }\n\n    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class VirgaLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n    var y1;\n\n    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;\n    else y1 = y0 + ctxt.staffInterval * 2.7;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class GlyphVisualizer extends ChantLayoutElement {\n  constructor(ctxt, glyphCode) {\n    super();\n\n    this.glyph = null;\n\n    this.setGlyph(ctxt, glyphCode);\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphCode !== glyphCode) {\n      if (\n        typeof glyphCode === \"undefined\" ||\n        glyphCode === null ||\n        glyphCode === \"\"\n      )\n        this.glyphCode = GlyphCode.None;\n      else this.glyphCode = glyphCode;\n\n      this.glyph = Glyphs[this.glyphCode];\n\n      // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n      if (!ctxt.defs.hasOwnProperty(this.glyphCode)) {\n        var getDefProps = () => {\n          var options = {\n            id: this.glyphCode,\n            class: \"glyph\"\n          };\n          if (ctxt.scaleDefs === true) {\n            options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n          }\n          return options;\n        };\n        var makeDef = () => {\n          let options = getDefProps();\n          // create the ref\n          ctxt.defs[this.glyphCode] = QuickSvg.createFragment(\n            \"g\",\n            options,\n            QuickSvg.svgFragmentForGlyph(this.glyph)\n          );\n\n          if (ctxt.defsNode)\n            ctxt.defsNode.appendChild(\n              QuickSvg.createNode(\n                \"g\",\n                options,\n                QuickSvg.nodesForGlyph(this.glyph)\n              )\n            );\n        };\n        makeDef.makeSvgTree = () => {\n          return QuickSvg.createSvgTree(\n            \"g\",\n            getDefProps(),\n            ...QuickSvg.nodesForGlyph(this.glyph, \"createSvgTree\")\n          );\n        };\n        makeDef();\n        ctxt.makeDefs.push(makeDef);\n      }\n\n      this.align = this.glyph.align;\n    }\n\n    this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n    this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\n    this.bounds.x = 0;\n    this.bounds.y = -this.origin.y;\n    this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n    this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n  }\n\n  setStaffPosition(ctxt, staffPosition) {\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    var x = this.bounds.x + this.origin.x;\n    var y = this.bounds.y + this.origin.y;\n    canvasCtxt.translate(x, y);\n    canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\n    for (var i = 0; i < this.glyph.paths.length; i++) {\n      var path = this.glyph.paths[i];\n      canvasCtxt.fillStyle =\n        path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n      canvasCtxt.fill(new Path2D(path.data));\n    }\n\n    canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n    canvasCtxt.translate(-x, -y);\n  }\n\n  getSvgAttributes(ctxt, source) {\n    let className = \"\";\n    if (/^Porrectus\\d$/.test(this.glyphCode)) {\n      let notes = source.neume.notes,\n        noteIndex = notes.indexOf(source),\n        nextNote = notes[noteIndex + 1];\n      className = source.selected\n        ? nextNote.selected\n          ? \"selected\"\n          : \"selectedA\"\n        : nextNote.selected\n        ? \"selectedB\"\n        : \"\";\n    } else {\n      let isSelected =\n        source && (source.selected || (source.model && source.model.selected));\n      className = isSelected ? \"selected\" : \"\";\n    }\n    var result = {\n      \"xlink:href\": \"#\" + this.glyphCode,\n      class: className\n    };\n    if (source) {\n      result[\"source-index\"] = source.sourceIndex;\n      result[\"element-index\"] = source.elementIndex;\n    }\n    if (ctxt.scaleDefs === true) {\n      result.x = this.bounds.x + this.origin.x;\n      result.y = this.bounds.y + this.origin.y;\n    } else {\n      result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n      result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n      result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n    }\n    return result;\n  }\n\n  createSvgNode(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    attributes.source = source;\n    return QuickSvg.createNode(\"use\", attributes);\n  }\n  createSvgTree(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    if (source) attributes.source = source;\n    return QuickSvg.createSvgTree(\"use\", attributes);\n  }\n\n  createSvgFragment(ctxt, source) {\n    return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n  }\n}\n\nexport class RoundBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = (3 * ctxt.staffInterval) / 2;\n\n    this.bounds = new Rect(\n      x1,\n      isAbove ? y - this.braceHeight : y,\n      x2 - x1,\n      this.braceHeight\n    );\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // returns svg path d string\n  generatePathString() {\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, dx, dy;\n\n    dx = width / 6;\n    dy = this.bounds.height;\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      dy = -dy;\n    } else {\n      y = this.bounds.y;\n    }\n\n    //Calculate Control Points of path,\n    var cx1 = x1 + dx;\n    var cy = y + dy;\n    var cx2 = x2 - dx;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" C \" +\n      cx1.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      cx2.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp)\n    );\n  }\n}\n\nexport class CurlyBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove = true, addAcuteAccent = false) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = ctxt.staffInterval / 2;\n\n    // y is the actual vertical start of the brace (left hand side)\n    // thus for a brace over notes, bounds.y is the bottom of brace,\n    // but for a brace under the notes, y is simply the y passed in.\n    if (isAbove) y -= this.braceHeight;\n\n    var bounds = new Rect(x1, y, x2 - x1, this.braceHeight);\n\n    if (addAcuteAccent && isAbove) {\n      this.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n      this.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n      this.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\n      bounds.union(this.accent.bounds);\n    }\n\n    this.bounds = bounds;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // code below inspired by: https://gist.github.com/alexhornbake\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path d string\n  generatePathString() {\n    var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, h;\n\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      h = -this.braceHeight;\n    } else {\n      y = this.bounds.y;\n      h = this.braceHeight;\n    }\n\n    // calculate Control Points of path\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * width;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * width;\n    var ty1 = y + h;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * width;\n    var qy4 = y + (1 - q) * h;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x1.toFixed(dp) +\n      \" \" +\n      qy1.toFixed(dp) +\n      \" \" +\n      qx2.toFixed(dp) +\n      \" \" +\n      qy2.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp) +\n      \" M \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x2.toFixed(dp) +\n      \" \" +\n      qy3.toFixed(dp) +\n      \" \" +\n      qx4.toFixed(dp) +\n      \" \" +\n      qy4.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp)\n    );\n  }\n}\n\nexport class TextSpan {\n  constructor(text, properties, activeTags, index = 0) {\n    if (typeof properties === \"undefined\" || properties === null)\n      properties = {};\n\n    this.text = text;\n    this.properties = properties;\n    this.activeTags = activeTags || [];\n    this.index = index;\n  }\n\n  clone() {\n    return new TextSpan(\n      this.text,\n      this.properties,\n      this.activeTags,\n      this.index\n    );\n  }\n}\n\nfunction MarkupStackFrame(tagName, startIndex, properties = {}) {\n  this.tagName = tagName;\n  this.startIndex = startIndex;\n  this.properties = properties;\n}\n\nMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex) {\n  return new MarkupStackFrame(\n    tagName,\n    startIndex,\n    ctxt.fontStyleDictionary[tagName]\n  );\n};\n\n// for escaping html strings before they go into the svgs\n// adapted from http://stackoverflow.com/a/12034334/5720160\nvar __subsForTspans = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\n\nexport class TextElement extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super();\n\n    // set these to some sane values for now...\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.fontFamily = fontFamily;\n    this.fontSize = fontSize;\n    this.textAnchor = textAnchor;\n    this.sourceIndex = sourceIndex;\n    this.sourceGabc = sourceGabc;\n    this.dominantBaseline = \"baseline\"; // default placement\n\n    this.generateSpansFromText(ctxt, text);\n\n    this.recalculateMetrics(ctxt);\n  }\n\n  getFromScore(score) {\n    return this.textType.getFromScore(score, this);\n  }\n\n  generateSpansFromText(ctxt, text) {\n    text = text.replace(/\\s+/g, \" \");\n    this.text = \"\";\n    this.spans = [];\n\n    // save ourselves a lot of grief for a very common text:\n    if (text === \"*\" || text === \"†\") {\n      this.spans.push(new TextSpan(text));\n      return;\n    }\n\n    var markupStack = [];\n    var spanStartIndex = 0;\n    var newLineInNextSpan = 0;\n\n    var filterFrames = (frame, symbol) => frame.Symbol === symbol;\n\n    var closeSpan = (spanText, index, extraProperties) => {\n      if (spanText === \"\" && !this.dropCap) return;\n\n      this.text += spanText;\n\n      var properties = {};\n      for (var i = 0; i < markupStack.length; i++)\n        Object.assign(properties, markupStack[i].properties);\n\n      if (extraProperties) Object.assign(properties, extraProperties);\n      if (newLineInNextSpan) {\n        properties.newLine = newLineInNextSpan;\n        newLineInNextSpan = 0;\n      }\n\n      this.spans.push(\n        new TextSpan(\n          spanText,\n          properties,\n          markupStack.map((frame) => frame.tagName),\n          index\n        )\n      );\n    };\n\n    var markupRegex = /(<br\\/?>)|<sp>([arv])\\/<\\/sp>|([arv])\\/\\.|(?:([*_^%])|<(\\/)?([bciu]|ul|sc)>)(?=(?:(.+?)(?:\\4|<\\/\\6>))?)/gi;\n\n    var match = null;\n    var openedAsterisk = false;\n    var closeCurrentSpan = () =>\n      closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n    while ((match = markupRegex.exec(text))) {\n      var [\n        ,\n        newLine,\n        specialChar,\n        specialChar2,\n        markupSymbol,\n        closingTag,\n        tagName,\n        enclosedText\n      ] = match;\n      specialChar = specialChar || specialChar2;\n      // non-matching symbols first\n      if (newLine) {\n        // close the current span, if any:\n        if (match.index > spanStartIndex) {\n          closeCurrentSpan();\n        }\n        // add the newline span:\n        newLineInNextSpan++;\n      } else if (specialChar) {\n        closeCurrentSpan();\n        closeSpan(\n          ctxt.textBeforeSpecialChar +\n            ctxt.specialCharText(specialChar) +\n            ctxt.textAfterSpecialChar,\n          match.index,\n          ctxt.specialCharProperties\n        );\n      } else {\n        // otherwise we're dealing with matching markup delimeters\n        if (markupSymbol === \"*\") {\n          // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n          if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n            openedAsterisk = true;\n          } else if (openedAsterisk) {\n            openedAsterisk = false;\n          } else {\n            // actually use the asterisk, since it doesn't have a matching closing asterisk\n            continue;\n          }\n        }\n        if (markupSymbol) {\n          tagName = ctxt.markupSymbolDictionary[markupSymbol];\n          if (\n            markupStack.length > 0 &&\n            markupStack[markupStack.length - 1].tagName === tagName\n          ) {\n            closingTag = true;\n          }\n        }\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].tagName === tagName\n        ) {\n          if (closingTag) {\n            // group close\n            closeCurrentSpan();\n            markupStack.pop();\n          }\n        } else if (markupStack.filter(filterFrames).length > 0) {\n          // trying to open a recursive group (or forgot to close a previous group)\n          // in either case, we just unwind to the previous stack frame\n          spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n          markupStack.pop();\n          continue;\n        } else {\n          closeCurrentSpan();\n          if (closingTag) {\n            // out of order group close:\n            let index = markupStack.findIndex(\n              (frame) => frame.tagName === tagName\n            );\n            if (index >= 0) {\n              markupStack.splice(index, 1);\n            }\n          } else {\n            // group open\n            markupStack.push(\n              MarkupStackFrame.createStackFrame(ctxt, tagName, match.index)\n            );\n          }\n        }\n      }\n\n      // advance the start index past the current markup\n      spanStartIndex = match.index + match[0].length;\n    }\n\n    // if we finished matches, and there is still some text left,\n    // or if we haven't generated any spans yet, create one final run\n    if (spanStartIndex < text.length || this.spans.length === 0)\n      closeSpan(text.slice(spanStartIndex), spanStartIndex);\n  }\n\n  getCanvasFontForProperties(ctxt, properties = {}) {\n    var font = \"\";\n    if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n    if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n    if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n    let fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n    if (/%$/.test(properties[\"font-size\"])) {\n      fontSize *= this.fontSize(ctxt) / 100;\n    }\n    font += `${fontSize * (this.resize || 1)}px `;\n    font += properties[\"font-family\"] || this.fontFamily(ctxt);\n    return font;\n  }\n\n  measureSubstringBBox(ctxt, length) {\n    return this.measureSubstring(ctxt, length, true);\n  }\n\n  // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n  measureSubstring(ctxt, length, returnBBox = false) {\n    if (length === 0) return 0;\n    if (!length) length = Infinity;\n    if (length < 0) {\n      var lines = -length;\n      length = Infinity;\n    }\n    var canvasCtxt = ctxt.canvasCtxt;\n    var width = 0;\n    var widths = [];\n    var newLineSpans = [this.spans[0]];\n    var subStringLength = 0;\n    var numLines = 1;\n    var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n    var bbox = new Rect(0, 0, 0, 0);\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i],\n        myText = span.text.slice(0, length - subStringLength);\n      if (span.properties.newLine) {\n        numLines += parseInt(span.properties.newLine) || 1;\n        if (!lines && this.rightAligned === true && length === Infinity) {\n          newLineSpans[newLineSpans.length - 1].properties.xOffset =\n            this.firstLineMaxWidth - width;\n          newLineSpans.push(span);\n        } else if (--lines === 0) break;\n        widths.push(width);\n        width = 0;\n      }\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n        canvasCtxt.font = this.getCanvasFontForProperties(\n          ctxt,\n          span.properties\n        );\n        let metrics = canvasCtxt.measureText(\n          myText,\n          width,\n          fontSize * (numLines - 1)\n        );\n        if (\"actualBoundingBoxAscent\" in metrics) {\n          let left = metrics.actualBoundingBoxLeft;\n          bbox.union(\n            new Rect(\n              width - left,\n              fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent,\n              metrics.width + left,\n              metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent\n            )\n          );\n          if (this instanceof DropCap) {\n            width += Math.max(0, left);\n          }\n        } else {\n          bbox.union(\n            new Rect(width, fontSize * (numLines - 2), metrics.width, fontSize)\n          );\n        }\n        width += metrics.width;\n      } else if (\n        ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS &&\n        ctxt.fontDictionary\n      ) {\n        // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n        let font = ctxt.getFontForProperties(\n          span.properties,\n          span.properties[\"font-family\"] || this.fontFamily(ctxt)\n        );\n        let options = { features: { liga: true } };\n        if (span.properties[\"font-variant\"] === \"small-caps\") {\n          options.features.smcp = true;\n        }\n        let spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n        if (/%$/.test(span.properties[\"font-size\"])) {\n          spanFontSize *= fontSize / 100;\n        }\n        let subBbox = font\n          .getPath(\n            myText,\n            width,\n            fontSize * (numLines - 1),\n            spanFontSize,\n            options\n          )\n          .getBoundingBox();\n        let subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\n        bbox.union(\n          new Rect(\n            width + subBbox.x1,\n            subBbox.y1,\n            subWidth - subBbox.x1,\n            subBbox.y2 - subBbox.y1\n          )\n        );\n        width += subWidth;\n        if (this instanceof DropCap) {\n          width -= subBbox.x1;\n        }\n      }\n      subStringLength += myText.length;\n      if (subStringLength === length) break;\n    }\n    if (\n      !lines &&\n      width &&\n      newLineSpans.length &&\n      this.rightAligned === true &&\n      length === Infinity\n    ) {\n      newLineSpans[newLineSpans.length - 1].properties.xOffset =\n        this.firstLineMaxWidth - width;\n    }\n    width = Math.max(width, ...widths);\n    if (returnBBox === true) {\n      let height = bbox.height;\n      let y = bbox.y,\n        x = bbox.x;\n      return { width, height, x, y };\n    } else {\n      return width;\n    }\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    if (resetNewLines) {\n      delete this.maxWidth;\n      delete this.firstLineMaxWidth;\n      delete this.rightAligned;\n      delete this.resize;\n      delete this.numLines;\n      // replace newlines with spaces\n      this.spans.forEach((span) => {\n        delete span.properties.xOffset;\n        if (span.properties.newLine === true) {\n          delete span.properties.newLine;\n          span.text = \" \" + span.text;\n        }\n      });\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.origin.x = 0;\n\n    if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      while (ctxt.svgTextMeasurer.firstChild)\n        ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n      ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n      ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\n      var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y; // offset to baseline from top\n      this.origin.x = -bbox.x;\n    } else {\n      let bbox = this.measureSubstringBBox(ctxt);\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y;\n      this.origin.x = -bbox.x;\n    }\n    this.numLines = this.spans.reduce(\n      (result, span) =>\n        result +\n        (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0),\n      1\n    );\n  }\n\n  setMaxWidth(ctxt, maxWidth, firstLineMaxWidth = maxWidth) {\n    if (this.spans.filter((s) => s.properties.newLine === true).length) {\n      // first get rid of any new lines set from a previous maxWidth\n      this.recalculateMetrics(ctxt);\n    }\n    if (this.bounds.width > maxWidth) {\n      this.maxWidth = maxWidth;\n      var percentage = maxWidth / this.bounds.width;\n      if (this instanceof Lyric && percentage >= 0.85) {\n        this.resize = percentage;\n      } else {\n        if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n        this.firstLineMaxWidth = firstLineMaxWidth;\n        var lastWidth = 0,\n          lastMatch = null,\n          regex = /\\s+|$/g,\n          max = firstLineMaxWidth,\n          match;\n        while (\n          (match = regex.exec(this.text)) &&\n          (!lastMatch || match.index > lastMatch.index)\n        ) {\n          var width = this.measureSubstring(ctxt, match.index);\n          if (width > max && lastMatch) {\n            var spanIndex = 0,\n              length = 0;\n            while (length < lastMatch.index && spanIndex < this.spans.length) {\n              let span = this.spans[spanIndex++];\n              length += span.text.length + (span.properties.newLine ? 1 : 0);\n            }\n            if (length > lastMatch.index) {\n              let span = this.spans[--spanIndex];\n              length -= span.text.length;\n            }\n            var splitSpan = this.spans[spanIndex],\n              textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n              textRight = splitSpan.text.slice(\n                lastMatch.index + lastMatch[0].length - length\n              ),\n              newSpans = [];\n            this.rightAligned =\n              max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n            if (textLeft)\n              newSpans.push(\n                new TextSpan(\n                  textLeft,\n                  splitSpan.properties,\n                  splitSpan.activeTags\n                )\n              );\n            if (textRight) {\n              newSpans.push(\n                new TextSpan(\n                  textRight,\n                  Object.assign({}, splitSpan.properties, { newLine: true }),\n                  splitSpan.activeTags\n                )\n              );\n            } else if (this.spans[spanIndex + 1]) {\n              this.spans[spanIndex + 1].properties.newLine = true;\n            }\n            this.spans.splice(spanIndex, 1, ...newSpans);\n            this.needsLayout = true;\n            max = maxWidth;\n            if (\n              match.index === this.text.length ||\n              this.measureSubstring(ctxt) <= maxWidth\n            )\n              break;\n            width = 0;\n            match = lastMatch = null;\n          }\n          lastWidth = width;\n          lastMatch = match;\n        }\n      }\n      this.recalculateMetrics(ctxt, false);\n    }\n  }\n\n  getCssClasses() {\n    return (this.textType && this.textType.cssClass) || \"\";\n  }\n\n  getExtraStyleProperties(ctxt) {\n    return ctxt.baseTextStyle || {};\n  }\n\n  static escapeForTspan(string) {\n    return String(string).replace(/[&<>]/g, function (s) {\n      return __subsForTspans[s];\n    });\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";\n    else canvasCtxt.textAlign = \"start\";\n\n    var translateWidth = 0,\n      translateHeight = 0;\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i];\n      var xOffset = span.properties.xOffset || 0;\n      if (span.properties.newLine) {\n        count = parseInt(span.properties.newLine) || 1;\n        canvasCtxt.translate(\n          translateWidth + xOffset,\n          this.fontSize(ctxt) * count\n        );\n        translateWidth = -xOffset;\n        translateHeight -= this.fontSize(ctxt);\n      } else if (xOffset) {\n        canvasCtxt.translate(translateWidth + xOffset, 0);\n        translateWidth = -xOffset;\n      }\n      var properties = Object.assign(\n        {},\n        this.getExtraStyleProperties(ctxt),\n        span.properties\n      );\n      canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n      canvasCtxt.fillStyle = properties.fill || \"#000\";\n      canvasCtxt.fillText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y,\n        span.properties.textLength || undefined\n      );\n      var metrics = canvasCtxt.measureText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y\n      );\n      translateWidth -= metrics.width;\n      canvasCtxt.translate(metrics.width, 0);\n    }\n    canvasCtxt.translate(translateWidth, translateHeight);\n  }\n\n  getSvgProps() {\n    return {\n      \"source-index\": this.sourceIndex,\n      x: this.bounds.x,\n      y: this.bounds.y,\n      class: this.getCssClasses().trim(),\n      \"text-anchor\": this.textAnchor\n      //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n    };\n  }\n\n  getSpanOptions(span, ctxt, useStyleObject = false) {\n    var options = {\n      \"source-index\": span.index,\n      style: useStyleObject\n        ? Object.assign({}, span.properties)\n        : getCssForProperties(span.properties)\n    };\n\n    if (span.properties.newLine) {\n      var xOffset = span.properties.xOffset || 0;\n      options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n      options.x = this.bounds.x + xOffset;\n    } else if (span.properties.xOffset) {\n      options.x = this.bounds.x + span.properties.xOffset;\n    }\n    if (span.properties.textLength) {\n      options.textLength = span.properties.textLength;\n      options.lengthAdjust = \"spacingAndGlyphs\";\n      options.y = this.bounds.y;\n    }\n    if (this.resize) {\n      options[\"font-size\"] =\n        span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n    }\n    // if (ctxt.setFontFamilyAttributes) {\n    //   options[\"font-family\"] =\n    //     span.properties[\"font-family\"] ||\n    //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n    //   let properties = Object.assign({}, span.properties);\n    //   delete properties[\"font-weight\"];\n    //   delete properties[\"font-style\"];\n    //   options[\"style\"] = getCssForProperties(properties);\n    // } else {\n    //   options[\"style\"] = getCssForProperties(span.properties);\n    // }\n\n    return options;\n  }\n\n  createSvgNode(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans.push(QuickSvg.createNode(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    options.style = getCssForProperties(this.getExtraStyleProperties(ctxt));\n    options.source = this;\n\n    return (this.svgNode = QuickSvg.createNode(\"text\", options, spans));\n  }\n  createSvgTree(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt, true);\n\n      spans.push(QuickSvg.createSvgTree(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    options.style = this.getExtraStyleProperties(ctxt);\n    options.source = this;\n\n    return QuickSvg.createSvgTree(\"text\", options, ...spans);\n  }\n\n  createSvgFragment(ctxt) {\n    var spans = \"\";\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans += QuickSvg.createFragment(\n        \"tspan\",\n        options,\n        TextElement.escapeForTspan(span.text)\n      );\n    }\n\n    let options = this.getSvgProps();\n    options.style = getCssForProperties(this.getExtraStyleProperties(ctxt));\n    if (ctxt.setFontFamilyAttributes) {\n      options[\"font-size\"] = this.fontSize(ctxt);\n    }\n\n    return QuickSvg.createFragment(\"text\", options, spans);\n  }\n}\n\nexport var LyricType = {\n  SingleSyllable: 0,\n  BeginningSyllable: 1,\n  MiddleSyllable: 2,\n  EndingSyllable: 3,\n\n  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n};\n\nexport var LyricArray = {\n  getLeft: function (lyricArray) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      if (lyricArray[i])\n        x = Math.min(\n          x,\n          lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x\n        );\n    }\n\n    return x;\n  },\n\n  getRight: function (lyricArray, presumeConnectorNeeded) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      let l = lyricArray[i];\n      if (l)\n        x = Math.max(\n          x,\n          l.notation.bounds.x +\n            l.bounds.x +\n            l.bounds.width +\n            (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector\n              ? l.getConnectorWidth()\n              : 0)\n        );\n    }\n\n    return x;\n  },\n\n  hasOnlyOneLyric: function (lyricArray) {\n    return lyricArray.filter((l) => l.originalText).length === 1;\n  },\n\n  indexOfLyric: function (lyricArray) {\n    return lyricArray.indexOf(lyricArray.filter((l) => l.originalText)[0]);\n  },\n\n  mergeIn: function (lyricArray, newLyrics) {\n    for (var i = 0; i < newLyrics.length; ++i) {\n      if (newLyrics[i].originalText || !lyricArray[i])\n        lyricArray[i] = newLyrics[i];\n    }\n  },\n\n  mergeInArray: function (lyricArray, notations) {\n    for (var i = 0; i < notations.length; ++i) {\n      this.mergeIn(lyricArray, notations[i].lyrics);\n    }\n  },\n\n  setNotation: function (lyricArray, notation) {\n    notation.lyrics = lyricArray;\n    for (var i = 0; i < lyricArray.length; ++i) {\n      lyricArray[i].notation = notation;\n    }\n  }\n};\n\nexport class Lyric extends TextElement {\n  constructor(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.lyric.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.lyric.font,\n      (ctxt) => ctxt.textStyles.lyric.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.lyric;\n\n    // save the original text in case we need to later use the lyric\n    // in a dropcap...\n    this.originalText = text;\n\n    this.notation = notation;\n    this.notations = notations;\n\n    if (\n      typeof lyricType === \"undefined\" ||\n      lyricType === null ||\n      lyricType === \"\"\n    )\n      this.lyricType = LyricType.SingleSyllable;\n    else this.lyricType = lyricType;\n\n    // Lyrics keep track of how to center them on notation elements.\n    // centerTextIndex is the index in this.text where the centering starts,\n    // centerLength is how many characters comprise the center point.\n    // performLayout will do the processing\n    this.centerStartIndex = -1;\n    this.centerLength = text.length;\n\n    this.needsConnector = false;\n\n    // Lyrics can have their own language defined, which affects the alignment\n    // of the text with the notation element\n    this.language = null;\n\n    if (this.allowsConnector)\n      this.connectorSpan = new TextSpan(ctxt.syllableConnector);\n  }\n\n  allowsConnector() {\n    return (\n      this.lyricType === LyricType.BeginningSyllable ||\n      this.lyricType === LyricType.MiddleSyllable\n    );\n  }\n\n  setForceConnector(force) {\n    this.forceConnector = force && this.allowsConnector();\n  }\n\n  setNeedsConnector(needs, width) {\n    if (needs === true || this.forceConnector) {\n      this.needsConnector = true;\n      if (typeof width !== \"undefined\") {\n        this.setConnectorWidth(width);\n      } else {\n        this.bounds.width =\n          this.widthWithoutConnector + this.getConnectorWidth();\n      }\n\n      if (\n        this.spans.length > 0 &&\n        this.spans[this.spans.length - 1] !== this.connectorSpan\n      )\n        this.spans.push(this.connectorSpan);\n    } else {\n      this.connectorWidth = 0;\n      this.needsConnector = false;\n      this.bounds.width = this.widthWithoutConnector;\n\n      var span = this.spans.pop();\n      if (span && span !== this.connectorSpan) this.spans.push(span);\n    }\n  }\n\n  setConnectorWidth(width) {\n    this.connectorWidth = width;\n    this.connectorSpan.properties = Object.assign(\n      {},\n      this.connectorSpan.properties,\n      { textLength: width }\n    );\n    if (this.needsConnector)\n      this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n  }\n\n  getConnectorWidth() {\n    return this.connectorWidth || this.defaultConnectorWidth;\n  }\n\n  getLeft() {\n    return this.notation.bounds.x + this.bounds.x;\n  }\n\n  getRight() {\n    return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    this.setNeedsConnector();\n\n    super.recalculateMetrics(ctxt, resetNewLines);\n\n    this.widthWithoutConnector = this.bounds.width;\n\n    this.connectorWidth = 0;\n    this.defaultConnectorWidth = ctxt.hyphenWidth;\n\n    var activeLanguage = this.language || ctxt.defaultLanguage;\n\n    // calculate the point where the text lines up to the staff notation\n    // and offset the rect that much. By default we just center the text,\n    // but the logic below allows for smarter lyric alignment based\n    // on manual override or language control.\n    var offset = this.widthWithoutConnector / 2,\n      x1,\n      x2,\n      vowelSegmentWidth = this.widthWithoutConnector;\n\n    // some simple checks for sanity, and disable manual centering if the numbers are bad\n    if (\n      this.centerStartIndex >= 0 &&\n      (this.centerStartIndex >= this.text.length ||\n        this.centerLength < 0 ||\n        this.centerStartIndex + this.centerLength > this.text.length)\n    )\n      this.centerStartIndex = -1;\n\n    if (this.text.length === 0) {\n      // if we have no text to work with, then there's nothing to do!\n      // Unless it's a drop cap, in which case we center the connector:\n      if (this.dropCap && this.originalText) {\n        offset = ctxt.hyphenWidth / 2;\n        vowelSegmentWidth = ctxt.hyphenWidth;\n      }\n    } else if (this.centerStartIndex >= 0) {\n      // if we have manually overriden the centering logic for this lyric,\n      // then always use that.\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n        // svgTextMeasurer still has the current lyric in it...\n        x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex\n        );\n        x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex + this.centerLength\n        );\n      } else {\n        x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n        x2 = this.measureSubstring(\n          ctxt,\n          this.centerStartIndex + this.centerLength\n        );\n      }\n      offset = (x1 + x2) / 2;\n      vowelSegmentWidth = x2 - x1;\n    } else {\n      // if it's a directive with no manual centering override, then\n      // just center the text.\n      if (this.lyricType !== LyricType.Directive) {\n        // only consider text content after the last space (if any)\n        var startIndex = this.text.lastIndexOf(\" \") + 1;\n\n        // unless there are no text characters following the space:\n        if (\n          startIndex > 0 &&\n          !this.text\n            .slice(startIndex)\n            .match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)\n        ) {\n          startIndex = 0;\n        }\n\n        // Non-directive elements are lined up to the chant notation based on vowel segments,\n        var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\n        if (result.found !== true) {\n          var match = this.text.slice(startIndex).match(/[a-z]+/i);\n          if (match) {\n            result.startIndex = startIndex + match.index;\n            result.length = match[0].length;\n          } else {\n            result.startIndex = startIndex;\n            result.length = this.text.length - startIndex;\n          }\n        }\n        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n          // svgTextMeasurer still has the current lyric in it...\n          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex\n          );\n          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex + result.length\n          );\n        } else {\n          x1 = this.measureSubstring(ctxt, result.startIndex);\n          x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n        }\n        offset = (x1 + x2) / 2;\n        vowelSegmentWidth = x2 - x1;\n      }\n    }\n\n    this.vowelSegmentWidth = vowelSegmentWidth;\n\n    this.bounds.x = -offset;\n    this.bounds.y = 0;\n\n    this.origin.x = offset;\n  }\n\n  generateDropCap(ctxt) {\n    if (this.dropCap) return this.dropCap;\n    let dropCapSpan = this.spans[0].clone();\n    dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n    let dropCapLowerCase = dropCapSpan.text.toLowerCase();\n    // disallow any characters that do not change from .toUpperCase():\n    if (dropCapSpan.text === dropCapLowerCase) return null;\n\n    if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0)\n      dropCapSpan.text = dropCapLowerCase;\n\n    var dropCap = (this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex));\n    dropCap.spans = [dropCapSpan];\n    let dropCapSourceGabcLength = this.sourceGabc.match(\n      /^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/\n    )[0].length;\n    dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n    this.sourceIndex += dropCap.sourceGabc.length;\n    this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\n    this.spans[0].text = this.spans[0].text.slice(1);\n    this.text = this.text.slice(1);\n    this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\n    return dropCap;\n  }\n\n  getCssClasses() {\n    var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\n    return classes + super.getCssClasses();\n  }\n\n  getExtraStyleProperties(ctxt) {\n    var props = super.getExtraStyleProperties(ctxt);\n\n    if (this.lyricType === LyricType.Directive && ctxt.autoColor === true)\n      props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\n    return props;\n  }\n}\n\nexport class ChoralSign extends TextElement {\n  constructor(ctxt, text, note, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.choralSign.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.choralSign.font,\n      TextTypes.choralSign.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.positionHint = MarkingPositionHint.Default;\n    this.note = note;\n    this.textType = TextTypes.choralSign;\n  }\n\n  recalculateMetrics(ctxt) {\n    super.recalculateMetrics(ctxt);\n  }\n\n  performLayout(ctxt) {\n    this.recalculateMetrics(ctxt);\n    this.bounds.x =\n      this.note.bounds.x +\n      Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\n    let offset, staffPosition;\n    if (this.positionHint === MarkingPositionHint.Below) {\n      offset = -1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n    } else {\n      offset = 1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n    }\n    // if (staffPosition % 2 === 0) staffPosition += offset;\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n  }\n}\n\nexport class AboveLinesText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.al.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.al.font,\n      (ctxt) => ctxt.textStyles.al.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.notation = notation;\n    this.textType = TextTypes.al;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class TranslationText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    var gabcSource = text;\n    var anchor = \"start\";\n    if (text === \"/\") {\n      text = \"\";\n      anchor = \"end\";\n    } else {\n      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n    }\n    super(\n      ctxt,\n      text,\n      (ctxt) => ctxt.textStyles.translation.font,\n      (ctxt) => ctxt.textStyles.translation.size,\n      anchor,\n      sourceIndex,\n      gabcSource\n    );\n    this.notation = notation;\n    this.textType = TextTypes.translation;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class DropCap extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.dropCap.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.dropCap.font,\n      (ctxt) => ctxt.textStyles.dropCap.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.dropCap;\n\n    this.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n  }\n}\n\nexport class TitleTextElement extends TextElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super(\n      ctxt,\n      text,\n      fontFamily,\n      fontSize,\n      textAnchor,\n      sourceIndex,\n      sourceGabc\n    );\n  }\n}\n\nexport class Supertitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.supertitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.supertitle.font,\n      (ctxt) => ctxt.textStyles.supertitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.supertitle;\n\n    this.padding = (ctxt) => ctxt.textStyles.supertitle.size / 3;\n  }\n}\n\nexport class Title extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.title.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.title.font,\n      (ctxt) => ctxt.textStyles.title.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.title;\n\n    this.padding = (ctxt) => ctxt.textStyles.title.size / 3;\n  }\n}\n\nexport class Subtitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.subtitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.subtitle.font,\n      (ctxt) => ctxt.textStyles.subtitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.subtitle;\n\n    this.padding = (ctxt) => ctxt.textStyles.subtitle.size / 3;\n  }\n}\n\nexport class TextLeftRight extends TitleTextElement {\n  constructor(ctxt, text, type, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.leftRight.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.leftRight.font,\n      (ctxt) => ctxt.textStyles.leftRight.size,\n      type === \"textLeft\" ? \"start\" : \"end\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.leftRight;\n    this.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n    this.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n    this.padding = (ctxt) => ctxt.textStyles.leftRight.size / 5;\n  }\n\n  getCssClasses() {\n    return this.extraClass + \" \" + super.getCssClasses();\n  }\n}\n\nexport class Annotation extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text) {\n    super(\n      ctxt,\n      (ctxt.textStyles.annotation.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.annotation.font,\n      (ctxt) => ctxt.textStyles.annotation.size,\n      \"middle\"\n    );\n    this.textType = TextTypes.annotation;\n    this.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n    this.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n  }\n}\n\nexport class Annotations extends ChantLayoutElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, ...texts) {\n    super();\n\n    this.annotations = texts.map(function (text) {\n      return new Annotation(ctxt, text);\n    });\n    this.padding = Math.max.apply(\n      null,\n      this.annotations.map(function (annotation) {\n        return annotation.padding;\n      })\n    );\n  }\n\n  updateBounds(multiplier) {\n    if (!multiplier) multiplier = 1;\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.bounds.x += this.bounds.x * multiplier;\n      annotation.bounds.y += this.bounds.y * multiplier;\n    }\n  }\n\n  recalculateMetrics(ctxt) {\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.recalculateMetrics(ctxt);\n      this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n      annotation.bounds.y += this.bounds.height;\n      this.bounds.height += annotation.bounds.height;\n      this.origin.y = this.origin.y || annotation.origin.y;\n    }\n  }\n\n  draw(ctxt) {\n    this.updateBounds();\n    this.annotations.forEach(function (annotation) {\n      annotation.draw(ctxt);\n    });\n    this.updateBounds(-1);\n  }\n\n  createSvgNode(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgNode(ctxt);\n    });\n    this.updateBounds(-1);\n    return result;\n  }\n  createSvgTree(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgTree(ctxt);\n    });\n    this.updateBounds(-1);\n    return { children: result };\n  }\n\n  createSvgFragment(ctxt) {\n    this.updateBounds();\n    var result = this.annotations\n      .map(function (annotation) {\n        return annotation.createSvgFragment(ctxt);\n      })\n      .join(\"\");\n    this.updateBounds(-1);\n    return result;\n  }\n}\n\nexport class ChantNotationElement extends ChantLayoutElement {\n  constructor() {\n    super();\n\n    //double\n    this.leadingSpace = 0.0;\n    this.trailingSpace = DefaultTrailingSpace;\n    this.keepWithNext = false;\n    this.needsLayout = true;\n\n    this.lyrics = [];\n\n    this.score = null; // the ChantScore\n    this.line = null; // the ChantLine\n\n    this.visualizers = [];\n  }\n\n  hasLyrics() {\n    return this.lyrics.length !== 0;\n  }\n\n  getAllLyricsLeft() {\n    if (this.lyrics.length === 0) return this.bounds.right();\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  getAllLyricsRight() {\n    if (this.lyrics.length === 0) return this.bounds.x;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i])\n        x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  // used by subclasses while building up the chant notations.\n  addVisualizer(chantLayoutElement) {\n    if (!chantLayoutElement.ignoreBounds) {\n      if (this.bounds.isEmpty())\n        this.bounds = chantLayoutElement.bounds.clone();\n      else this.bounds.union(chantLayoutElement.bounds);\n    }\n\n    this.visualizers.push(chantLayoutElement);\n  }\n\n  // same as addVisualizer, except the element is unshifted to the front\n  // of the visualizer array rather than the end. This way, some\n  // visualizers can be placed behind the others...ledger lines for example.\n  prependVisualizer(chantLayoutElement) {\n    if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();\n    else this.bounds.union(chantLayoutElement.bounds);\n\n    this.visualizers.unshift(chantLayoutElement);\n  }\n\n  // chant notation elements are given an opportunity to perform their layout via this function.\n  // subclasses should call this function first in overrides of this function.\n  // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n  // all valid and prepared for higher level layout.\n  performLayout(ctxt) {\n    if (typeof this.trailingSpace === \"function\")\n      this.calculatedTrailingSpace = this.trailingSpace(ctxt);\n    else this.calculatedTrailingSpace = this.trailingSpace;\n\n    // reset the bounds and the staff notations before doing a layout\n    this.visualizers = [];\n    this.bounds = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n\n    for (var i = 0; i < this.lyrics.length; i++)\n      this.lyrics[i].recalculateMetrics(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        this.alText[i].recalculateMetrics(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].recalculateMetrics(ctxt);\n  }\n\n  // some subclasses have internal dependencies on other notations (for example,\n  // a custos can depend on a later neume which it uses to set its height).\n  // subclasses can override this function so that when the notations are\n  // altered, the subclass can correctly invalidate (and later restore) its own\n  // depedencies\n  resetDependencies() {}\n\n  // a helper function for subclasses to call after they are done performing layout...\n  finishLayout(ctxt) {\n    this.bounds.x = 0;\n\n    let language =\n      (this.lyrics[0] && this.lyrics[0].language) || ctxt.defaultLanguage;\n    // center the neume itself over the syllable, or just the first punctum\n    // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n    let calculateLyricX = language.centerNeume\n      ? (lyric) =>\n          (lyric.bounds.x =\n            this.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth\n              ? this.bounds.width / 2 - lyric.origin.x\n              : this.origin.x - lyric.origin.x)\n      : (lyric) => (lyric.bounds.x = this.origin.x - lyric.origin.x);\n    this.lyrics.forEach(calculateLyricX);\n\n    this.needsLayout = false;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, 0);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      this.visualizers[i].draw(ctxt);\n\n    for (i = 0; i < this.lyrics.length; i++) this.lyrics[i].draw(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].draw(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++) this.alText[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, 0);\n  }\n\n  getInnerSvgNodes(ctxt, functionName = \"createSvgNode\") {\n    var inner = [];\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner.push(this.lyrics[i][functionName](ctxt));\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner.push(this.translationText[i][functionName](ctxt));\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner.push(this.alText[i][functionName](ctxt));\n\n    if (this.visualizers.length) {\n      let visualizers = [];\n      for (var i = 0; i < this.visualizers.length; i++)\n        visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\n      if (functionName === \"createSvgTree\") {\n        inner.push(\n          QuickSvg.createSvgTree(\"g\", { class: \"Notations\" }, ...visualizers)\n        );\n      } else {\n        inner.push(\n          QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers)\n        );\n      }\n    }\n    return inner;\n  }\n\n  getSvgProps() {\n    return {\n      // this.constructor.name will not be the same after being mangled by UglifyJS\n      class: \"ChantNotationElement \" + this.constructor.name,\n      transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createNode(\"g\", svgProps, inner);\n  }\n  createSvgTree(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createSvgTree(\"g\", svgProps, ...inner);\n  }\n\n  createSvgFragment(ctxt) {\n    var inner = \"\";\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner += this.lyrics[i].createSvgFragment(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner += this.translationText[i].createSvgFragment(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner += this.alText[i].createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\n    return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Drawing.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport * as Exsurge from \"./Exsurge.Core.js\";\nimport { Step, Pitch, Rect, Point, Margins } from \"./Exsurge.Core.js\";\nimport {\n  QuickSvg,\n  ChantLayoutElement,\n  ChantNotationElement,\n  GlyphCode,\n  GlyphVisualizer,\n  Lyric,\n  Annotation,\n  DropCap,\n  TextLeftRight,\n  TextSpan\n} from \"./Exsurge.Drawing.js\";\nimport { ChantLine } from \"./Exsurge.Chant.ChantLine.js\";\nimport { AccidentalType, InsertionCursor } from \"./Exsurge.Chant.Signs.js\";\nimport { Gabc } from \"./Exsurge.Gabc.js\";\nimport { Titles } from \"./Exsurge.Titles.js\";\n\nexport var LiquescentType = {\n  None: 0,\n\n  // flags that can be combined, though of course it\n  // it doesn't make sense to combine some!\n  Large: 1 << 0,\n  Small: 1 << 1,\n  Ascending: 1 << 2,\n  Descending: 1 << 3,\n  InitioDebilis: 1 << 4,\n\n  // handy liquescent types\n  LargeAscending: (1 << 0) | (1 << 2),\n  LargeDescending: (1 << 0) | (1 << 3),\n  SmallAscending: (1 << 1) | (1 << 2),\n  SmallDescending: (1 << 1) | (1 << 3)\n};\n\nexport var NoteShape = {\n  // shapes\n  Default: 0,\n  Virga: 1,\n  Inclinatum: 2,\n  Quilisma: 3,\n  Stropha: 4,\n  Oriscus: 5\n};\n\nexport var NoteShapeModifiers = {\n  // flags which modify the shape\n  // not all of them apply to every shape of course\n  None: 0,\n  Ascending: 1 << 0,\n  Descending: 1 << 1,\n  Cavum: 1 << 2,\n  Stemmed: 1 << 3\n};\n\n/**\n * @class\n */\nexport class Note extends ChantLayoutElement {\n  /**\n   * @para {Pitch} pitch\n   */\n  constructor(pitch) {\n    super();\n\n    if (typeof pitch !== \"undefined\") this.pitch = pitch;\n    else this.pitch = null;\n\n    this.glyphVisualizer = null;\n\n    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n    this.staffPosition = 0;\n    this.liquescent = LiquescentType.None;\n    this.shape = NoteShape.Default;\n    this.shapeModifiers = NoteShapeModifiers.None;\n\n    // notes keep track of the neume they belong to in order to facilitate layout\n    // this.neume gets set when a note is added to a neume via Neume.addNote()\n    this.neume = null;\n\n    // various markings that can exist on a note, organized by type\n    // for faster access and simpler code logic\n    this.episemata = [];\n    this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\n    // these are set on the note when they are needed, otherwise, they're undefined\n    // this.ictus\n    // this.accuteAccent\n    // this.braceStart\n    // this.braceEnd\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);\n    else this.glyphVisualizer = new GlyphVisualizer(ctxt, glyphCode);\n\n    this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\n    // assign glyphvisualizer metrics to this note\n    this.bounds.x = this.glyphVisualizer.bounds.x;\n    this.bounds.y = this.glyphVisualizer.bounds.y;\n    this.bounds.width = this.glyphVisualizer.bounds.width;\n    this.bounds.height = this.glyphVisualizer.bounds.height;\n\n    this.origin.x = this.glyphVisualizer.origin.x;\n    this.origin.y = this.glyphVisualizer.origin.y;\n  }\n\n  // a utility function for modifiers\n  shapeModifierMatches(shapeModifier) {\n    if (shapeModifier === NoteShapeModifiers.None)\n      return this.shapeModifier === NoteShapeModifiers.None;\n    else return this.shapeModifier & (shapeModifier !== 0);\n  }\n\n  draw(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n\n    this.glyphVisualizer.draw(ctxt);\n  }\n\n  createSvgNode(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n    return this.svgNode;\n  }\n  createSvgTree(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgTree(ctxt, this);\n  }\n\n  createSvgFragment(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgFragment(ctxt, this);\n  }\n}\n\nexport class Clef extends ChantNotationElement {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super();\n\n    this.isClef = true;\n    this.staffPosition = staffPosition;\n    this.octave = octave;\n    this.defaultAccidental = defaultAccidental;\n    this.activeAccidental = defaultAccidental;\n    this.keepWithNext = true;\n  }\n\n  resetAccidentals() {\n    this.activeAccidental = this.defaultAccidental;\n  }\n\n  pitchToStaffPosition(pitch) {}\n\n  performLayout(ctxt) {\n    ctxt.activeClef = this;\n\n    if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    // if we have a default accidental, then add a glyph for it now\n    if (this.defaultAccidental) {\n      var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n      accidentalGlyph.bounds.x +=\n        this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n      this.addVisualizer(accidentalGlyph);\n    }\n\n    super.finishLayout(ctxt);\n  }\n\n  static default() {\n    return __defaultDoClef;\n  }\n\n  clone() {\n    if (this.model) return this.model.clone();\n    let clone = new this.constructor(\n      this.staffPosition,\n      this.octave,\n      this.defaultAccidental\n    );\n    clone.sourceGabc = this.sourceGabc;\n    clone.sourceIndex = this.sourceIndex;\n    clone.elementIndex = this.elementIndex;\n    clone.model = this;\n    return clone;\n  }\n}\n\nexport class DoClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.leadingSpace = 0.0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Do)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition;\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.DoClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\nvar __defaultDoClef = new DoClef(3, 2);\n\nexport class FaClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.octave = octave;\n\n    this.leadingSpace = 0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Fa)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.FaClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TextOnly\n */\nexport class TextOnly extends ChantNotationElement {\n  constructor(sourceIndex, sourceLength) {\n    super();\n    this.sourceIndex = sourceIndex;\n    this.sourceLength = sourceLength;\n    this.sourceGabc = \"\";\n    this.trailingSpace = 0;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // add an empty glyph as a placeholder\n    this.addVisualizer(new GlyphVisualizer(ctxt, GlyphCode.None));\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport class ChantLineBreak extends ChantNotationElement {\n  constructor(justify) {\n    super();\n    this.calculatedTrailingSpace = this.trailingSpace = 0;\n    this.justify = justify;\n  }\n\n  performLayout(ctxt) {\n    // reset the bounds before doing a layout\n    this.bounds = new Rect(0, 0, 0, 0);\n  }\n\n  clone() {\n    var lb = new ChantLineBreak();\n    lb.justify = this.justify;\n\n    return lb;\n  }\n}\n\n// a chant mapping is a lightweight format independent way of\n// tracking how a chant language (e.g., gabc) has been\n// mapped to exsurge notations.\nexport class ChantMapping {\n  // source can be any object type. in the case of gabc, source is a text\n  // string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n  // notations is an array of ChantNotationElements\n  constructor(source, notations, sourceIndex) {\n    this.source = source;\n    this.notations = notations;\n    this.sourceIndex = sourceIndex;\n  }\n}\n\nconst __connectorSpan = new TextSpan(\" • \"),\n  __mergeAnnotationWithTextLeft = (...annotationSpans) =>\n    annotationSpans.reduce((result, spans) => {\n      if (result && result.length) {\n        if (spans && spans.length) return result.concat(__connectorSpan, spans);\n        else return result;\n      } else if (spans && spans.length) {\n        return spans;\n      }\n      return [];\n    });\n\n/*\n * Score, document\n */\nexport class ChantScore {\n  // mappings is an array of ChantMappings.\n  constructor(ctxt, mappings = [], useDropCap) {\n    this.mappings = mappings;\n\n    this.lines = [];\n    this.notes = [];\n    if (ctxt) this.titles = new Titles(ctxt, this);\n\n    this.startingClef = null;\n\n    this.useDropCap = useDropCap;\n    this.dropCap = null;\n\n    this.annotation = null;\n\n    this.compiled = false;\n\n    this.autoColoring = true;\n    this.needsLayout = true;\n\n    // valid after chant lines are created...\n    this.bounds = new Rect();\n\n    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\n    if (ctxt) this.updateNotations(ctxt);\n  }\n\n  /**\n   * Make a copy of the score, only including the specified lines\n   * @param  {number} startLine starting index\n   * @param  {number} endLine   ending index\n   * @return {ChantScore}           the partial score\n   */\n  copyLines(startLine, endLine) {\n    let result = new ChantScore();\n    result.lines = this.lines.slice(startLine, endLine);\n    result.bounds = this.bounds.clone();\n    let lastLine = result.lines.slice(-1)[0];\n    result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n    if (startLine === 0) {\n      result.titles = this.titles;\n      result.dropCap = this.dropCap;\n      result.annotation = this.annotation;\n    }\n    return result;\n  }\n\n  updateSelection(selection) {\n    this.selection = selection;\n    const elementSelection = (selection && selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let insertion = elementSelection.insertion;\n    if (\n      !insertion &&\n      selectedIndices.length === 1 &&\n      this.notes[selectedIndices[0]] instanceof TextOnly\n    ) {\n      // if there is only one selection, and its a text only, it should display as an insertion cursor:\n      insertion = { afterElementIndex: selectedIndices[0] };\n    }\n    // update the selected elements so that they can be given a .selected class when rendered\n    for (let i = 0; i < this.notes.length; ++i) {\n      let element = this.notes[i];\n      element.selected = selectedIndices.includes(i);\n    }\n    (\n      this.startingClef.model || this.startingClef\n    ).selected = selectedIndices.includes(-1);\n    for (let i = 0; i < this.lines.length; ++i) {\n      this.lines[i].insertionCursor = null;\n    }\n    // update the insertion cursor, so it can be drawn on the correct system\n    this.insertionElement = null;\n    let insertionLine = null;\n    if (insertion) {\n      if (typeof insertion.chantLine === \"number\") {\n        insertionLine = this.lines[insertion.chantLine];\n        this.insertionElement = insertionLine.startingClef;\n        insertionLine.insertionCursor = new InsertionCursor();\n      } else if (typeof insertion.afterElementIndex === \"number\") {\n        this.insertionElement = this.notes[insertion.afterElementIndex];\n        if (!this.insertionElement) {\n          insertionLine = this.lines[0];\n          this.insertionElement = insertionLine.startingClef;\n        } else if (this.insertionElement.neume) {\n          this.insertionElement = this.insertionElement.neume;\n        }\n        if (!insertionLine) {\n          insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n        }\n        insertionLine.insertionCursor = new InsertionCursor();\n      }\n    }\n  }\n\n  updateNotations(ctxt) {\n    var i, j, mapping, notation;\n\n    // flatten all mappings into one array for N(0) access to notations\n    this.notations = [];\n    this.notes = [];\n    this.hasLyrics = false;\n    this.hasAboveLinesText = false;\n    this.hasTranslations = false;\n    const elementSelection = (this.selection && this.selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n\n    // find the starting clef...\n    // start with a default clef in case the notations don't provide one.\n    this.startingClef = null;\n\n    for (i = 0; i < this.mappings.length; i++) {\n      mapping = this.mappings[i];\n      for (j = 0; j < mapping.notations.length; j++) {\n        notation = mapping.notations[j];\n        notation.score = this;\n        notation.mapping = mapping;\n\n        if (!this.startingClef) {\n          if (notation.isNeume) {\n            this.startingClef = Clef.default();\n          } else if (notation.isClef) {\n            this.startingClef = notation;\n            continue;\n          }\n        }\n\n        notation.notationIndex = this.notations.push(notation) - 1;\n        if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n        if (!this.hasAboveLinesText && notation.alText)\n          this.hasAboveLinesText = true;\n        if (!this.hasTranslations && notation.translationText)\n          this.hasTranslations = true;\n\n        // Update this.notes and find element indices:\n        let elements = notation.notes || [notation];\n        for (let element of elements) {\n          let elementIndex = (element.elementIndex =\n            this.notes.push(element) - 1);\n          element.selected = selectedIndices.includes(elementIndex);\n        }\n      }\n    }\n\n    // if we've reached this far and we *still* don't have a clef, then there aren't even\n    // any neumes in the score. still, set the default clef just for good measure\n    if (!this.startingClef) this.startingClef = Clef.default();\n    this.startingClef.elementIndex = -1;\n\n    // update drop cap\n    if (this.useDropCap) this.recreateDropCap(ctxt);\n    else this.dropCap = null;\n\n    this.needsLayout = true;\n  }\n\n  recreateDropCap(ctxt) {\n    this.dropCap = null;\n\n    // find the first notation with lyrics to use\n    for (var i = 0; i < this.notations.length; i++) {\n      if (\n        this.notations[i].hasLyrics() &&\n        this.notations[i].lyrics[0] !== null &&\n        this.notations[i].lyrics[0].spans &&\n        this.notations[i].lyrics[0].spans.length\n      ) {\n        let notation = this.notations[i],\n          lyrics = notation.lyrics[0];\n        if (this.useDropCap) {\n          this.dropCap = lyrics.generateDropCap(ctxt);\n        } else {\n          lyrics.dropCap = null;\n          lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n        }\n        notation.needsLayout = true;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Shared layout initialization method for performLayout() and performLayoutAsync()\n   * @param  {ChantContext} ctxt\n   */\n  initializeLayout(ctxt) {\n    // setup the context\n    ctxt.activeClef = this.startingClef;\n    ctxt.notations = this.notations;\n    ctxt.currNotationIndex = 0;\n\n    if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\n    if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n  }\n\n  // this is the the synchronous version of performLayout that\n  // process everything without yielding to any other workers/threads.\n  // good for server side processing or very small chant pieces.\n  performLayout(ctxt, force) {\n    if (!force && this.needsLayout === false) return; // nothing to do here!\n\n    ctxt.updateHyphenWidth();\n\n    this.initializeLayout(ctxt);\n\n    for (let i = 0; i < this.notations.length; i++) {\n      let notation = this.notations[i];\n      if (force || notation.needsLayout) {\n        ctxt.currNotationIndex = i;\n        notation.performLayout(ctxt);\n      }\n    }\n\n    this.needsLayout = false;\n  }\n\n  // for web applications, probably performLayoutAsync would be more\n  // apppropriate that the above performLayout, since it will process\n  // the notations without locking up the UI thread.\n  performLayoutAsync(ctxt, finishedCallback) {\n    if (this.needsLayout === false) {\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return; // nothing to do here!\n    }\n\n    if (ctxt.onFontLoaded) {\n      ctxt.onFontLoaded.push(() =>\n        this.performLayoutAsync(ctxt, finishedCallback)\n      );\n      return;\n    }\n\n    // check for sane value of hyphen width:\n    ctxt.updateHyphenWidth();\n    if (\n      !ctxt.hyphenWidth ||\n      ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6\n    ) {\n      setTimeout(() => {\n        this.performLayoutAsync(ctxt, finishedCallback);\n      }, 100);\n      return;\n    }\n\n    this.initializeLayout(ctxt);\n\n    setTimeout(() => this.layoutElementsAsync(ctxt, 0, finishedCallback), 0);\n  }\n\n  layoutElementsAsync(ctxt, index, finishedCallback) {\n    if (index >= this.notations.length) {\n      this.needsLayout = false;\n\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return;\n    }\n\n    if (index === 0) ctxt.activeClef = this.startingClef;\n\n    var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n    do {\n      var notation = this.notations[index];\n      if (notation.needsLayout) {\n        ctxt.currNotationIndex = index;\n        notation.performLayout(ctxt);\n      }\n\n      index++;\n    } while (index < this.notations.length && new Date().getTime() < timeout);\n\n    // schedule the next block of processing\n    setTimeout(\n      () => this.layoutElementsAsync(ctxt, index, finishedCallback),\n      0\n    );\n  }\n\n  layoutChantLines(ctxt, width, finishedCallback) {\n    this.lines = [];\n\n    if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n      let annotation = this.annotation,\n        annotationSpans = annotation.annotations\n          ? annotation.annotations.map((annotation) => annotation.spans)\n          : [annotation.spans];\n      this.overrideTextLeft = new TextLeftRight(ctxt, \"\", \"textLeft\");\n      this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft(\n        ...annotationSpans,\n        this.titles.textLeft && this.titles.textLeft.spans\n      );\n    } else {\n      this.overrideTextLeft = null;\n    }\n\n    var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n    var currIndex = 0;\n\n    ctxt.activeClef = this.startingClef;\n\n    var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\n    do {\n      var line = new ChantLine(this);\n\n      line.buildFromChantNotationIndex(ctxt, currIndex, width);\n      currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n      line.performLayout(ctxt);\n      line.elementIndex = this.lines.length;\n      this.lines.push(line);\n\n      line.bounds.y = -line.bounds.y + y;\n      y += line.bounds.height + spaceBetweenSystems;\n    } while (currIndex < this.notations.length);\n\n    var lastLine = this.lines[this.lines.length - 1];\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = lastLine.bounds.width;\n    this.bounds.height = y - spaceBetweenSystems;\n\n    this.pages = [this];\n\n    if (this.selection) {\n      this.updateSelection(this.selection);\n    }\n\n    if (finishedCallback) finishedCallback(this);\n  }\n\n  paginate(height) {\n    if (!height) return;\n    this.pages = [];\n    let pageHeightOffset = 0,\n      startLineIndex = 0;\n    for (let i = 1; i < this.lines.length; ++i) {\n      let line = this.lines[i];\n      let pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\n      if (pageHeight > height) {\n        // this line will be the first on the new page\n        this.pages.push(this.copyLines(startLineIndex, i));\n        startLineIndex = i;\n        pageHeightOffset = line.bounds.y - line.origin.y;\n        line.bounds.y = line.origin.y;\n      } else {\n        // not a new page yet...update the bounds:\n        line.bounds.y -= pageHeightOffset;\n      }\n    }\n    this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n  }\n\n  draw(ctxt, scale = 1) {\n    ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    if (this.titles) this.titles.draw(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++) this.lines[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getSvgProps(ctxt, zoom) {\n    let width =\n        typeof zoom === \"number\"\n          ? zoom * this.bounds.width\n          : zoom\n          ? undefined\n          : this.bounds.width,\n      height = zoom ? undefined : this.bounds.height;\n\n    return {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      version: \"1.1\",\n      class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n      width,\n      height,\n      viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n    };\n  }\n\n  createSvgNode(ctxt) {\n    // create defs section\n    var node = [ctxt.defsNode.cloneNode(true)];\n    node[0].appendChild(ctxt.createStyleNode());\n\n    if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgNode(ctxt));\n\n    node = QuickSvg.createNode(\"g\", {}, node);\n\n    node = QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt, zoom) {\n    // create defs section\n    var node = [\n      QuickSvg.createSvgTree(\n        \"defs\",\n        {},\n        ...ctxt.makeDefs.map((makeDef) => makeDef.makeSvgTree()),\n        ctxt.createStyleTree()\n      )\n    ];\n\n    if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgTree(ctxt));\n\n    node = QuickSvg.createSvgTree(\"g\", {}, ...node);\n    let svgProps = this.getSvgProps(ctxt, zoom);\n    svgProps.source = this;\n    node = QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\n    return node;\n  }\n\n  createSvg(ctxt) {\n    var fragment = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n    fragment += ctxt.createStyle();\n\n    fragment = QuickSvg.createFragment(\"defs\", {}, fragment);\n\n    if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++)\n      fragment += this.lines[i].createSvgFragment(ctxt);\n\n    fragment = QuickSvg.createFragment(\"g\", {}, fragment);\n\n    fragment = QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\n    return fragment;\n  }\n\n  createSvgNodeForEachLine(ctxt) {\n    var node = [];\n\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment = [\n        ctxt.defsNode.cloneNode(true),\n        this.lines[i].createSvgNode(ctxt, top)\n      ];\n      lineFragment[0].appendChild(ctxt.createStyleNode());\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createNode(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createNode(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height,\n          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n        },\n        lineFragment\n      );\n      node.push(lineFragment);\n      top += height;\n    }\n    return node;\n  }\n\n  createSvgForEachLine(ctxt) {\n    var fragment = \"\",\n      fragmentDefs = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n    fragmentDefs += ctxt.createStyle();\n\n    fragmentDefs = QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment =\n        fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createFragment(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createFragment(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height\n        },\n        lineFragment\n      );\n      fragment += lineFragment;\n      top += height;\n    }\n    return fragment;\n  }\n\n  unserializeFromJson(data, ctxt) {\n    this.autoColoring = data[\"auto-coloring\"];\n\n    if (data.annotation !== null && data.annotation !== \"\") {\n      // create the annotation\n      this.annotation = new Annotation(ctxt, data.annotation);\n    } else this.annotation = null;\n\n    var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\n    Gabc.parseChantNotations(data.notations, this, createDropCap);\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    data[\"type\"] = \"score\";\n    data[\"auto-coloring\"] = true;\n\n    if (this.annotation !== null)\n      data.annotation = this.annotation.unsanitizedText;\n    else data.annotation = \"\";\n\n    return data;\n  }\n}\n\nexport class ChantDocument {\n  constructor() {\n    var defaults = {\n      layout: {\n        units: \"mm\",\n        \"default-font\": {\n          \"font-family\": \"Crimson\",\n          \"font-size\": 14\n        },\n        page: {\n          width: 8.5,\n          height: 11,\n          \"margin-left\": 0,\n          \"margin-top\": 0,\n          \"margin-right\": 0,\n          \"margin-bottom\": 0\n        }\n      },\n      scores: []\n    };\n\n    // default layout\n    this.copyLayout(this, defaults);\n\n    this.scores = defaults.scores;\n  }\n\n  copyLayout(to, from) {\n    to.layout = {\n      units: from.layout.units,\n      \"default-font\": {\n        \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n        \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n      },\n      page: {\n        width: from.layout.page.width,\n        height: from.layout.page.height,\n        \"margin-left\": from.layout.page[\"margin-left\"],\n        \"margin-top\": from.layout.page[\"margin-top\"],\n        \"margin-right\": from.layout.page[\"margin-right\"],\n        \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n      }\n    };\n  }\n\n  unserializeFromJson(data) {\n    this.copyLayout(this, data);\n\n    this.scores = [];\n\n    // read in the scores\n    for (var i = 0; i < data.scores.length; i++) {\n      var score = new ChantScore();\n\n      score.unserializeFromJson(data.scores[i]);\n      this.scores.push(score);\n    }\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    this.copyLayout(data, this);\n\n    data.scores = [];\n\n    // save scores...\n    for (var i = 0; i < this.scores.length; i++)\n      data.scores.push(this.scores[i].serializeToJson());\n\n    return data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport * as Exsurge from \"./Exsurge.Core.js\";\nimport { Step, Pitch, Rect, Point, Margins } from \"./Exsurge.Core.js\";\nimport * as Neumes from \"./Exsurge.Chant.Neumes.js\";\nimport {\n  QuickSvg,\n  ChantLayoutElement,\n  GlyphCode,\n  GlyphVisualizer,\n  RoundBraceVisualizer,\n  CurlyBraceVisualizer,\n  MarkingPositionHint,\n  Lyric,\n  LyricArray,\n  LyricType,\n  DropCap\n} from \"./Exsurge.Drawing.js\";\nimport { ChantLineBreak, TextOnly, NoteShape } from \"./Exsurge.Chant.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\nimport {\n  Custos,\n  DoubleBar,\n  FullBar,\n  InsertionCursor\n} from \"./Exsurge.Chant.Signs.js\";\nimport {\n  HorizontalEpisemaAlignment,\n  HorizontalEpisema,\n  BraceShape,\n  BracePoint,\n  BraceAttachment\n} from \"./Exsurge.Chant.Markings.js\";\n\n// a chant line represents one staff line on the page. ChantLines are created by the score\n// and laid out by the page\nexport class ChantLine extends ChantLayoutElement {\n  constructor(score) {\n    super();\n\n    this.score = score;\n\n    this.notationsStartIndex = 0;\n    this.numNotationsOnLine = 0;\n    this.notationBounds = null; // Rect\n\n    this.staffLeft = 0;\n    this.staffRight = 0;\n\n    this.startingClef = null; // necessary for the layout process\n    this.custos = null;\n\n    this.justify = true;\n\n    // these are markings that exist at the chant line level rather than at the neume level.\n    this.ledgerLines = [];\n    this.braces = [];\n\n    this.nextLine = null;\n    this.previousLine = null; // for layout assistance\n\n    this.lyricLineHeight = 0; // height of each text line\n    this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n    this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\n    // fixme: make these configurable values from the score\n    this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n    this.spaceBetweenTextTracks = 0; // spacing between each text track\n\n    this.lastLyrics = [];\n  }\n\n  performLayout(ctxt) {\n    // start off with a rectangle that holds at least the four staff lines\n    this.notationBounds = new Rect(\n      this.staffLeft,\n      -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) *\n        ctxt.staffInterval,\n      this.staffRight - this.staffLeft,\n      (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval\n    );\n\n    // run through all the elements of the line and calculate the bounds of the notations,\n    // as well as the bounds of each text track we will use\n    var i;\n    var notations = this.score.notations;\n    var lastNeumeIndex =\n      this.extraTextOnlyIndex === null\n        ? this.notationsStartIndex + this.numNotationsOnLine\n        : this.extraTextOnlyIndex;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var notation = null;\n\n    this.notationBounds.union(this.startingClef.bounds);\n\n    // reset the lyric line offsets before we [re]calculate them now\n    this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n    this.lyricLineBaseline = 0;\n    this.numLyricLines = 0;\n\n    this.altLineHeight = 0;\n    this.altLineBaseline = 0;\n    this.numAltLines = 0;\n\n    this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n    this.translationLineBaseline = 0;\n    this.numTranslationLines = 0;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n\n      this.notationBounds.union(notation.bounds);\n\n      // keep track of lyric line offsets\n      if (notation.lyrics.length && notation.lyrics[0].text) {\n        // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n        //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n        if (notation.lyrics[0].origin.y > this.lyricLineBaseline)\n          this.lyricLineBaseline = notation.lyrics[0].origin.y;\n        if (notation.lyrics.length > this.numLyricLines)\n          this.numLyricLines = notation.lyrics.length;\n      }\n\n      if (notation.alText && this.numAltLines < notation.alText.length) {\n        if (notation.alText[0].bounds.height > this.altLineHeight)\n          this.altLineHeight = notation.alText[0].bounds.height;\n        if (notation.alText[0].origin.y > this.altLineBaseline)\n          this.altLineBaseline = notation.alText[0].origin.y;\n        if (notation.alText.length > this.numAltLines)\n          this.numAltLines = notation.alText.length;\n      }\n\n      if (\n        notation.translationText &&\n        notation.translationText[0] &&\n        notation.translationText[0].text\n      ) {\n        // if (\n        //   notation.translationText[0].bounds.height > this.translationLineHeight\n        // )\n        //   this.translationLineHeight =\n        //     notation.translationText[0].bounds.height;\n        if (notation.translationText[0].origin.y > this.translationLineBaseline)\n          this.translationLineBaseline = notation.translationText[0].origin.y;\n        if (notation.translationText.length > this.numTranslationLines)\n          this.numTranslationLines = notation.translationText.length;\n      }\n    }\n\n    if (this.custos) this.notationBounds.union(this.custos.bounds);\n\n    // add any braces to the notationBounds as well\n    for (i = 0; i < this.braces.length; i++)\n      this.notationBounds.union(this.braces[i].bounds);\n\n    // finalize the lyrics placement\n    var notationBoundsOffset =\n      this.notationBounds.bottom() +\n      ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n    this.lyricLineBaseline += notationBoundsOffset;\n    this.translationLineBaseline += notationBoundsOffset;\n    this.altLineBaseline +=\n      this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n      var offset = 0;\n      for (var j = 0; j < notation.lyrics.length; j++) {\n        notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n\n      if (notation.translationText) {\n        for (j = 0; j < notation.translationText.length; j++) {\n          notation.translationText[j].bounds.y =\n            offset + this.translationLineBaseline;\n          offset += this.translationLineHeight;\n        }\n      }\n\n      if (notation.alText) {\n        offset = 0;\n        for (j = 0; j < notation.alText.length; j++) {\n          notation.alText[j].bounds.y = offset + this.altLineBaseline;\n          offset -= ctxt.textStyles.al.size * 1.1;\n        }\n      }\n    }\n\n    this.extraTextOnlyHeight = 0;\n    // handle placement of extra TextOnly elements:\n    if (ctxt.useExtraTextOnly) {\n      var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n      if (this.extraTextOnlyIndex === null) {\n        // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n        let lastNotation = notations[lastNeumeIndex - 1] || {};\n        if (lastNotation.constructor === ChantLineBreak)\n          lastNotation = notations[lastNeumeIndex - 2];\n        if (\n          lastNotation.constructor === TextOnly &&\n          lastNotation.lyrics.length === 1 &&\n          lastNotation.lyrics[0].bounds.height > this.lyricLineHeight\n        ) {\n          this.extraTextOnlyHeight = this.lyricLineHeight;\n        }\n      } else {\n        let lastLyrics = null;\n        let xOffset = 0;\n        offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n        offset += this.numTranslationLines * this.translationLineHeight;\n        let extraLines = 0;\n        for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n          notation = notations[i];\n          if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n          lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n          if (lastLyrics.lineWidth) {\n            xOffset = this.staffRight - lastLyrics.lineWidth;\n            offset += this.lyricLineHeight;\n            extraLines++;\n          }\n          extraLines += lastLyrics.numLines - 1;\n          lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n          notation.bounds.x += xOffset;\n        }\n        this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n      }\n    }\n\n    if (this.startingClef.hasLyrics()) {\n      offset = 0;\n      for (j = 0; j < this.startingClef.lyrics.length; j++) {\n        this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n    }\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.annotation !== null) {\n        // annotations use dominant-baseline to align text to the top\n        this.score.annotation.bounds.x = this.staffLeft / 2;\n        this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n        if (this.score.dropCap !== null) {\n          var lowestPossibleAnnotationY =\n            this.lyricLineBaseline -\n            this.score.annotation.bounds.height -\n            ctxt.staffInterval * ctxt.textStyles.annotation.padding -\n            this.score.dropCap.origin.y;\n          // if the annotation would overlap with the drop cap, move the annotation higher.\n          // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n          if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n            this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n          } else {\n            this.score.annotation.bounds.y =\n              (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n          }\n          if (this.score.annotation.bounds.y < this.notationBounds.y) {\n            this.notationBounds.y = this.score.annotation.bounds.y;\n            this.notationBounds.height +=\n              this.notationBounds.y - this.score.annotation.bounds.y;\n          }\n        }\n        this.score.annotation.bounds.y += this.score.annotation.origin.y;\n      }\n\n      if (this.score.dropCap !== null) {\n        // drop caps and annotations are drawn from their center, so aligning them\n        // horizontally is as easy as this.staffLeft / 2\n        this.score.dropCap.bounds.x = this.staffLeft / 2;\n        this.score.dropCap.bounds.y =\n          this.lyricLineBaseline - this.score.dropCap.origin.y;\n        this.notationBounds.union(this.score.dropCap.bounds);\n        this.score.dropCap.bounds.y = this.lyricLineBaseline;\n      }\n    }\n\n    if (this.numLyricLines > 0) {\n      // add up the lyric line heights to get the total height of the chant line\n      var lyricAndTextRect = new Rect(\n        0,\n        notationBoundsOffset,\n        0,\n        this.lyricLineHeight * this.numLyricLines +\n          this.extraTextOnlyHeight +\n          this.translationLineHeight * this.numTranslationLines\n      );\n      this.notationBounds.union(lyricAndTextRect);\n    }\n    if (this.numAltLines > 0) {\n      var altLineTextRect = new Rect(\n        0,\n        this.notationBounds.y -\n          this.altLineHeight -\n          0.5 * ctxt.staffInterval -\n          ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1),\n        0,\n        ctxt.textStyles.al.size * 1.1 * this.numAltLines\n      );\n      this.notationBounds.union(altLineTextRect);\n    }\n    // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n    this.notationBounds.union(\n      new Rect(\n        0,\n        0,\n        0,\n        (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) *\n          ctxt.staffInterval\n      )\n    );\n    var totalHeight = this.notationBounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = this.notationBounds.y;\n    this.bounds.width = this.notationBounds.right();\n    this.bounds.height = totalHeight;\n\n    // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n    this.origin = new Point(this.staffLeft, -this.notationBounds.y);\n  }\n\n  // TODO: remove if not necsessary\n  layoutInsertionCursor(ctxt) {\n    if (this.insertionCursor) {\n      // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n      this.insertionCursor.performLayout(ctxt);\n      this.insertionCursor.bounds.x =\n        this.score.insertionElement.bounds.right() +\n        ((this.score.insertionElement.trailingSpace &&\n          this.score.insertionElement.calculatedTrailingSpace) ||\n          0) /\n          2 -\n        this.insertionCursor.origin.x;\n    }\n    return this.insertionCursor;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    // draw the staff lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight,\n      y;\n    canvasCtxt.lineWidth = ctxt.staffLineWeight;\n    canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\n    for (i = -3; i <= 3; i += 2) {\n      y = ctxt.staffInterval * i;\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(x1, y);\n      canvasCtxt.lineTo(x2, y);\n      canvasCtxt.stroke();\n    }\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      this.insertionCursor.draw(ctxt);\n    }\n\n    // draw the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(ledgerLine.x1, y);\n      canvasCtxt.lineTo(ledgerLine.x2, y);\n      canvasCtxt.stroke();\n    }\n\n    // fixme: draw the braces\n\n    // draw the dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        this.score.annotation.draw(ctxt);\n    }\n\n    // draw the notations\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      notations[i].draw(ctxt);\n\n    this.startingClef.draw(ctxt);\n\n    if (this.custos) this.custos.draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(\n    ctxt,\n    top = 0,\n    functionNames = { quickSvg: \"createNode\", elements: \"createSvgNode\" }\n  ) {\n    var inner = [];\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    if (ctxt.editable) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"rect\", {\n          key: \"insertion\",\n          x: x1,\n          y: ctxt.staffInterval * -3,\n          width: x2 - x1,\n          height: ctxt.staffInterval * 6,\n          fill: \"none\"\n        })\n      );\n    }\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          key: i,\n          x1: x1,\n          y1: ctxt.staffInterval * i,\n          x2: x2,\n          y2: ctxt.staffInterval * i,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"staffLine\"\n        })\n      );\n    }\n\n    inner = [\n      QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)\n    ];\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner.push(this.insertionCursor[functionNames.elements](ctxt));\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          x1: ledgerLine.x1,\n          y1: y,\n          x2: ledgerLine.x2,\n          y2: y,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"ledgerLine\"\n        })\n      );\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner.push(this.braces[i][functionNames.elements](ctxt));\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner = inner.concat(\n          this.score.annotation[functionNames.elements](ctxt)\n        );\n    }\n\n    inner.push(this.startingClef[functionNames.elements](ctxt));\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner.push(notations[i][functionNames.elements](ctxt));\n\n    if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n    return inner;\n  }\n\n  createSvgNode(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createNode\",\n      elements: \"createSvgNode\"\n    });\n\n    return QuickSvg.createNode(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex,\n        source: this\n      },\n      inner\n    );\n  }\n\n  createSvgTree(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createSvgTree\",\n      elements: \"createSvgTree\"\n    });\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      ...inner\n    );\n  }\n\n  createSvgFragment(ctxt, top = 0) {\n    var inner = \"\";\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: x1,\n        y1: ctxt.staffInterval * i,\n        x2: x2,\n        y2: ctxt.staffInterval * i,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"staffLine\"\n      });\n    }\n\n    inner = QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner += this.insertionCursor.createSvgFragment(ctxt);\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: ledgerLine.x1,\n        y1: y,\n        x2: ledgerLine.x2,\n        y2: y,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"ledgerLine\"\n      });\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner += this.braces[i].createSvgFragment(ctxt);\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner += this.score.dropCap.createSvgFragment(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner += this.score.annotation.createSvgFragment(ctxt);\n    }\n\n    inner += this.startingClef.createSvgFragment(ctxt);\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner += notations[i].createSvgFragment(ctxt);\n\n    if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\n    return QuickSvg.createFragment(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      inner\n    );\n  }\n\n  // code below based on code by: https://gist.github.com/alexhornbake\n  //\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path string ready to insert into svg doc\n  generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n    var h;\n\n    if (isAbove) h = -ctxt.staffInterval / 2;\n    else h = ctxt.staffInterval / 2;\n\n    // and q factor, .5 is normal, higher q = more expressive bracket\n    var q = 0.6;\n\n    var len = x2 - x1;\n\n    //Calculate Control Points of path,\n    var qx1 = x1;\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * len;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * len;\n    var ty1 = y + h;\n    var qx3 = x2;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * len;\n    var qy4 = y + (1 - q) * h;\n    var d =\n      \"M \" +\n      x1 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx1 +\n      \" \" +\n      qy1 +\n      \" \" +\n      qx2 +\n      \" \" +\n      qy2 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1 +\n      \" M \" +\n      x2 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx3 +\n      \" \" +\n      qy3 +\n      \" \" +\n      qx4 +\n      \" \" +\n      qy4 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1;\n\n    return QuickSvg.createFragment(\"path\", {\n      d: d,\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n      fill: \"none\"\n    });\n  }\n\n  buildFromChantNotationIndex(ctxt, newElementStart, width) {\n    // todo: reset / clear the children we have in case they have data\n    var notations = this.score.notations,\n      beginningLyrics = null,\n      prev = null,\n      prevNeume = null,\n      prevLyrics = [];\n    var condensableSpaces = [];\n    this.notationsStartIndex = newElementStart;\n    this.numNotationsOnLine = 0;\n\n    this.staffLeft = 0;\n    this.paddingLeft = 0;\n\n    this.extraTextOnlyIndex = null;\n    this.extraTextOnlyLyricIndex = 0;\n\n    if (width > 0) this.staffRight = width;\n    else this.staffRight = Infinity; // no limit to staff size\n\n    // If this is the first chant line, then we have to make room for a\n    // drop cap and/or annotation, if present\n    if (this.notationsStartIndex === 0) {\n      var padding = 0;\n\n      if (this.score.dropCap !== null)\n        padding =\n          this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        padding = Math.max(\n          padding,\n          this.score.annotation.bounds.width + this.score.annotation.padding * 2\n        );\n\n      this.staffLeft += padding;\n      if (this.score.dropCap !== null)\n        this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n    } else {\n      prev = notations[newElementStart - 1];\n      if (\n        prev.constructor === DoubleBar &&\n        prev.hasLyrics() &&\n        (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))\n      ) {\n        beginningLyrics = prev.lyrics.map(function(lyric) {\n          var newLyric = new Lyric(\n            ctxt,\n            lyric.originalText,\n            lyric.lyricType,\n            lyric.notation,\n            lyric.notations,\n            lyric.sourceIndex\n          );\n          newLyric.elidesToNext = lyric.elidesToNext;\n          // Hide the original lyric by setting its bounds.y to an extremely high number.\n          // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n          lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n          return newLyric;\n        });\n        var minX = beginningLyrics\n          .map(function(l) {\n            return l.bounds.x;\n          })\n          .reduce(function(a, b) {\n            return a < b ? a : b;\n          });\n        beginningLyrics.forEach(function(l) {\n          l.bounds.x -= minX;\n        });\n      }\n    }\n\n    // set up the clef...\n    // if the first notation on the line is a starting clef, then we treat it a little differently...\n    // the clef becomes this line's starting clef and we skip over the clef in the notations array\n    if (notations.length && notations[newElementStart].isClef) {\n      ctxt.activeClef = notations[newElementStart];\n      newElementStart++;\n      this.notationsStartIndex++;\n    }\n\n    // make a copy for this line to use at the beginning\n    this.startingClef = ctxt.activeClef.clone();\n    this.startingClef.performLayout(ctxt);\n    this.startingClef.bounds.x = this.staffLeft;\n\n    var curr = this.startingClef;\n\n    if (beginningLyrics) {\n      LyricArray.setNotation(beginningLyrics, curr);\n    }\n\n    // estimate how much space we have available to us\n    var rightNotationBoundary =\n      this.staffRight - Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n    var lastTranslationTextWithEndNeume = null;\n\n    // iterate through the notations, fittng what we can on this line\n    var i,\n      j,\n      lastNotationIndex = notations.length - 1;\n\n    if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n    // if we already have a start brace on the context, we must be continuing it from the previous system.\n    if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n      ctxt.lastStartBrace.note = this.startingClef;\n    }\n    var lastLyricsBeforeTextOnly;\n    var textOnlyStartIndex;\n\n    for (i = newElementStart; i <= lastNotationIndex; i++) {\n      prev = curr;\n      if (curr.constructor !== TextOnly) prevNeume = curr;\n\n      curr = notations[i];\n\n      var actualRightBoundary;\n      if (\n        i === lastNotationIndex ||\n        curr.constructor === Custos ||\n        (prev.constructor === Custos && curr.isDivider) ||\n        (curr.constructor === ChantLineBreak &&\n          prevNeume.constructor === Custos)\n      ) {\n        // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n        // right boundary.\n        // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n        // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n        // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n        actualRightBoundary = this.staffRight;\n      } else if (i === lastNotationIndex - 1) {\n        // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n        // between the final notation and a custos:\n        actualRightBoundary = Math.max(\n          rightNotationBoundary,\n          this.staffRight - notations[lastNotationIndex].bounds.width\n        );\n      } else {\n        // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n        actualRightBoundary = rightNotationBoundary;\n      }\n\n      // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n      // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n      var forceBreak =\n        !curr.isDivider &&\n        curr.constructor !== ChantLineBreak &&\n        curr.constructor !== Custos &&\n        !(\n          curr.constructor === TextOnly &&\n          curr.hasLyrics() &&\n          /^[*†]$/.test(curr.lyrics[0].text)\n        ) &&\n        lastNotationIndex - i > 1 &&\n        !prevNeume.keepWithNext &&\n        prevNeume.bounds.right() >= rightNotationBoundary;\n\n      // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n      forceBreak =\n        forceBreak ||\n        (this.extraTextOnlyIndex !== null &&\n          curr.constructor !== TextOnly &&\n          curr.constructor !== ChantLineBreak &&\n          curr.constructor !== Custos &&\n          curr.hasLyrics());\n\n      if (curr instanceof TextOnly && prev === prevNeume) {\n        lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n        textOnlyStartIndex = i;\n      }\n      if (\n        curr instanceof TextOnly &&\n        notations[textOnlyStartIndex] &&\n        !notations[textOnlyStartIndex].hasLyrics()\n      ) {\n        // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n        // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n        // that does have lyrics, we will use it instead\n        textOnlyStartIndex = i;\n      }\n\n      if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n        curr.lyrics[0].recalculateMetrics(ctxt);\n      }\n\n      // try to fit the curr element on this line.\n      // if it doesn't fit, we finish up here.\n      var fitsOnLine =\n        !forceBreak &&\n        this.positionNotationElement(\n          ctxt,\n          this.lastLyrics,\n          prevNeume,\n          curr,\n          actualRightBoundary,\n          this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n        );\n      var candidateForExtraTextOnlyLine =\n        ctxt.useExtraTextOnly &&\n        curr.constructor === TextOnly &&\n        LyricArray.hasOnlyOneLyric(curr.lyrics) &&\n        (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n      var extraTextOnlyLyricIndex;\n      if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n        // check to make sure there is enough text to put on the text only line:\n        extraTextOnlyLyricIndex = LyricArray.indexOfLyric(curr.lyrics);\n        if (textOnlyStartIndex === i) {\n          var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n          if (currentLyric.length <= 1) {\n            var nextNotation = notations[i + 1];\n            candidateForExtraTextOnlyLine =\n              nextNotation &&\n              nextNotation.constructor === TextOnly &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex] &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n          }\n        }\n      }\n      if (candidateForExtraTextOnlyLine) {\n        // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n        // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n        // line of lyrics associated with them.\n        var firstOnLine;\n        extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n        if (\n          this.extraTextOnlyIndex === null &&\n          notations[textOnlyStartIndex].lyrics.length\n        ) {\n          if (\n            textOnlyStartIndex === this.notationsStartIndex ||\n            !ctxt.startExtraTextOnlyFromFirst\n          ) {\n            textOnlyStartIndex = i;\n            let lastNotationWithLyrics = notations\n              .slice(this.notationsStartIndex, i)\n              .reverse()\n              .find(notation => notation.hasLyrics());\n            lastLyricsBeforeTextOnly =\n              (lastNotationWithLyrics &&\n                lastNotationWithLyrics.lyrics.slice()) ||\n              [];\n          }\n          // go back to the first in this string of consecutive TextOnly elements.\n          this.extraTextOnlyIndex = textOnlyStartIndex;\n          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = LyricArray.indexOfLyric(\n            curr.lyrics\n          );\n          this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n          this.lastLyrics = [];\n          i = textOnlyStartIndex - 1;\n          this.numNotationsOnLine =\n            textOnlyStartIndex - this.notationsStartIndex;\n          continue;\n        }\n        delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n        if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n          curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n          let lastLyricRight = ctxt.startExtraTextOnlyFromFirst\n            ? LyricArray.getRight(this.lastLyrics) +\n              (ctxt.minLyricWordSpacing || 0)\n            : 0;\n          curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(\n            ctxt,\n            this.staffRight,\n            this.staffRight - lastLyricRight\n          );\n          firstOnLine = curr;\n        }\n        if (firstOnLine)\n          firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[\n            extraTextOnlyLyricIndex\n          ].getRight();\n      } else if (fitsOnLine === false) {\n        // first check for elements that cannot begin a system: dividers and custodes\n        while (\n          this.numNotationsOnLine > 1 &&\n          (curr.isDivider || curr.constructor === Custos)\n        ) {\n          curr = notations[--i];\n          this.numNotationsOnLine--;\n        }\n\n        if (lastTranslationTextWithEndNeume) {\n          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n          // TODO?: need to go back to before the last translation text start:\n        }\n\n        // check if the prev elements want to be kept with this one\n        for (j = i - 1; j > this.notationsStartIndex; j--) {\n          var cne = notations[j];\n          curr = notations[j + 1];\n\n          // curr is the first notation on the next line\n          // cne is the last notation on this line\n\n          if (cne.firstWithNoWidth) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // don't let a line break occur in the middle of a translation\n          if (lastTranslationTextWithEndNeume) {\n            this.numNotationsOnLine--;\n            if (cne === lastTranslationTextWithEndNeume) {\n              lastTranslationTextWithEndNeume = null;\n            }\n            continue;\n          }\n\n          // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n          if (\n            curr &&\n            curr.notes &&\n            (curr.notes[0].shape === NoteShape.Quilisma ||\n              curr.notes[0].shape === NoteShape.Inclinatum)\n          ) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n          // whether there would be too much space introduced between\n          if (cne.keepWithNext === true) {\n            if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine)\n              this.maxNumNotationsOnLine = this.numNotationsOnLine;\n            this.numNotationsOnLine--;\n          } else break;\n        }\n\n        // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n        if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\n        // determine the neumes we can space apart, if we do end up justifying\n        curr = this.findNeumesToJustify(prevLyrics);\n\n        this.lastLyrics = prevLyrics;\n        if (this.maxNumNotationsOnLine) {\n          // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n          // Check how much space we would have without the extra notations\n          var extraSpace = this.getWhitespaceOnRight(ctxt);\n          if (\n            extraSpace / this.toJustify.length >\n            ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals\n          ) {\n            LyricArray.mergeInArray(\n              prevLyrics,\n              notations.slice(\n                this.notationsStartIndex + this.numNotationsOnLine,\n                this.notationsStartIndex + this.maxNumNotationsOnLine\n              )\n            );\n            this.numNotationsOnLine = this.maxNumNotationsOnLine;\n            delete this.maxNumNotationsOnLine;\n          }\n        }\n\n        // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n        let next = this.score.notations[\n          this.extraTextOnlyIndex === null\n            ? this.notationsStartIndex + this.numNotationsOnLine\n            : this.extraTextOnlyIndex\n        ];\n        if (\n          next &&\n          next.hasLyrics() &&\n          (next.lyrics[0].lyricType === LyricType.BeginningSyllable ||\n            next.lyrics[0].lyricType === LyricType.SingleSyllable)\n        ) {\n          this.toJustify.push(this.custos);\n        }\n\n        if (\n          j >= 1 &&\n          notations[j].isDivider &&\n          notations[j - 1].constructor === Custos\n        ) {\n          // reverse the order: put the divider first, and end the line with the custos.\n          prevLyrics = [];\n          for (i = j - 2; i >= this.notationsStartIndex; i--) {\n            if (notations[i].hasLyrics()) {\n              LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n              break;\n            }\n          }\n          // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          this.positionNotationElement(\n            ctxt,\n            prevLyrics,\n            notations[j - 2],\n            notations[j],\n            this.staffRight,\n            condensableSpaces\n          );\n          this.custos = notations[j - 1];\n          this.custos.bounds.x =\n            this.staffRight -\n            this.custos.bounds.width -\n            this.custos.leadingSpace;\n        }\n\n        // we are at the end of the line!\n        break;\n      }\n\n      if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n      if (\n        lastTranslationTextWithEndNeume &&\n        curr === lastTranslationTextWithEndNeume.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = null;\n      } else if (\n        curr.translationText &&\n        curr.translationText.length &&\n        curr.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = curr;\n      }\n\n      curr.line = this;\n      this.numNotationsOnLine++;\n\n      if (curr.isClef) ctxt.activeClef = curr;\n\n      // line breaks are a special case indicating to stop processing here\n      if (curr.constructor === ChantLineBreak && width > 0) {\n        this.justify =\n          curr.justify ||\n          this.extraTextOnlyIndex !== null ||\n          this.getWhitespaceOnRight(ctxt) < 0;\n        if (this.justify) this.findNeumesToJustify(prevLyrics);\n        break;\n      }\n\n      if (curr.constructor === Custos) {\n        this.custos = curr;\n      } else if (curr.isNeume) {\n        this.custos = null;\n      }\n    }\n\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n    var last = notations[lastIndex] || {};\n    while (\n      lastIndex > 0 &&\n      (last.constructor === ChantLineBreak ||\n        last.constructor === Custos ||\n        last.constructor === TextOnly)\n    ) {\n      last = notations[--lastIndex];\n    }\n    var isLastLine =\n      this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n    if (\n      (this.justify && this.extraTextOnlyIndex !== null) ||\n      (width > 0 && isLastLine)\n    ) {\n      // this is the last chant line, or it has extra TextOnly elements at the end\n      if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n      this.justify =\n        (!isLastLine || last.isDivider) &&\n        this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <=\n          ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n    }\n\n    if (!this.custos) {\n      // create the automatic custos at the end of the line if there are neumes left in the notations\n      for (\n        i = this.notationsStartIndex + this.numNotationsOnLine;\n        i < notations.length;\n        i++\n      ) {\n        var notation = notations[i];\n\n        if (notation.isNeume) {\n          this.custos = new Custos(true);\n          ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n          this.custos.performLayout(ctxt);\n\n          if (this.justify) {\n            // Put the custos at the very end of the line\n            this.custos.bounds.x =\n              this.staffRight -\n              this.custos.bounds.width -\n              this.custos.leadingSpace;\n          } else {\n            this.custos.bounds.x =\n              prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n          }\n          // nothing more to see here...\n          break;\n        }\n      }\n    }\n\n    if (this.lastLyricsBeforeTextOnly) {\n      this.lastLyrics = this.lastLyricsBeforeTextOnly;\n      delete this.lastLyricsBeforeTextOnly;\n    }\n\n    // find the final lyric and mark it as connecting if needed.\n    if (width > 0) {\n      var whitespace = this.getWhitespaceOnRight();\n      var rightEdge = this.staffRight;\n      if (whitespace < 0) {\n        rightEdge -= whitespace;\n      }\n    }\n    i = 0;\n    while (this.lastLyrics && this.lastLyrics[i]) {\n      let lyrics = this.lastLyrics[i];\n      if (lyrics.allowsConnector()) {\n        lyrics.setNeedsConnector(true, 0);\n        if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n          whitespace = rightEdge - lyrics.getRight();\n          // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n          if (whitespace < 0) {\n            var minHyphenWidth = Math.max(\n              ctxt.hyphenWidth + whitespace,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n      }\n      ++i;\n    }\n\n    // if the provided width is less than zero, then set the width of the line\n    // based on the last notation\n    if (width <= 0) {\n      this.staffRight = notations[\n        this.notationsStartIndex + this.numNotationsOnLine - 1\n      ].bounds.right();\n      this.justify = false;\n    }\n\n    // Justify the line if we need to\n    this.justifyElements(ctxt, this.justify, condensableSpaces);\n\n    this.centerDividers();\n\n    this.finishLayout(ctxt);\n  }\n\n  centerDividers() {\n    var lastIndex =\n        this.extraTextOnlyIndex === null\n          ? this.notationsStartIndex + this.numNotationsOnLine\n          : this.extraTextOnlyIndex,\n      curr;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      curr = this.score.notations[i];\n\n      if (curr && curr.isDivider) {\n        var j = 1;\n        var prev = this.score.notations[i - 1];\n        var next =\n          i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n        if (prev === next && next === this.custos) {\n          prev = this.score.notations[i - 2];\n        }\n        if (prev && next) {\n          //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n          var oldBoundsX = curr.bounds.x;\n          var leftPoint =\n              prev instanceof TextOnly && prev.hasLyrics()\n                ? prev.lyrics[0].getRight()\n                : prev.bounds.right(),\n            rightPoint =\n              next instanceof TextOnly && next.hasLyrics()\n                ? next.lyrics[0].getLeft()\n                : next.bounds.x;\n          curr.bounds.x = (leftPoint + rightPoint - curr.bounds.width) / 2;\n          if (curr.hasLyrics()) {\n            var offset = oldBoundsX - curr.bounds.x;\n            for (j = curr.lyrics.length - 1; j >= 0; j--) {\n              curr.lyrics[j].bounds.x += offset;\n              curr.lyrics[j].needsLayout = true;\n            }\n          }\n        } else if (\n          i === lastIndex - 1 &&\n          this.justify &&\n          (curr.constructor === DoubleBar || curr.constructor === FullBar)\n        ) {\n          curr.bounds.x = this.staffRight - curr.bounds.width;\n        }\n      }\n    }\n  }\n\n  findNeumesToJustify(prevLyrics) {\n    this.toJustify = [];\n    var prev,\n      curr = null,\n      next = null,\n      nextOrCurr = null,\n      lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = nextOrCurr;\n      curr = this.score.notations[i];\n      next = curr.isAccidental && this.score.notations[++i];\n      nextOrCurr = next || curr;\n      var hasLyrics = nextOrCurr.hasLyrics();\n\n      if (!curr || !prev) continue;\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      )\n        continue;\n\n      if (prev !== null) {\n        LyricArray.mergeIn(prevLyrics, prev.lyrics);\n        if (prev.keepWithNext === true) continue;\n      }\n\n      if (\n        !curr.isDivider &&\n        prevLyrics.length &&\n        prevLyrics[0].allowsConnector() &&\n        hasLyrics\n      )\n        continue;\n\n      if (nextOrCurr.constructor === ChantLineBreak) continue;\n\n      if (nextOrCurr === this.custos && !hasLyrics) continue;\n\n      if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\n      // otherwise, we can add space before this element\n      this.toJustify.push(curr);\n    }\n    if (nextOrCurr !== null) LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n    return nextOrCurr;\n  }\n\n  getWhitespaceOnRight(ctxt) {\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var last = notations[lastIndex - 1];\n    if (this.extraTextOnlyIndex !== null && last.constructor === TextOnly) {\n      lastIndex = this.extraTextOnlyIndex;\n      last = notations[lastIndex - 1];\n    }\n    var lastRightNeume = last\n      ? last.bounds.right() + last.calculatedTrailingSpace\n      : 0;\n    var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n    var lastRightLyric = lastLyrics.length\n      ? LyricArray.getRight(lastLyrics)\n      : 0;\n\n    if (this.custos) {\n      lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n      if (this.custos.hasLyrics()) {\n        lastRightLyric = LyricArray.getRight(this.custos.lyrics);\n      }\n    } else if (ctxt && lastIndex < notations.length) {\n      lastRightNeume += Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n    }\n    return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n  }\n\n  justifyElements(ctxt, doJustify, condensableSpaces) {\n    var i;\n    var toJustify = this.toJustify || [];\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n    // move the custos over.\n    // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n    var lastNotation =\n      notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n    var extraSpaceBeforeCustos =\n      this.staffRight < Infinity &&\n      this.custos &&\n      lastNotation.keepWithNext &&\n      this.custos.bounds.x -\n        lastNotation.bounds.right() -\n        lastNotation.calculatedTrailingSpace;\n    if (extraSpaceBeforeCustos > 0) {\n      // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n      i = 0;\n      while (this.lastLyrics && this.lastLyrics[i]) {\n        let lyrics = this.lastLyrics[i];\n        if (lyrics.allowsConnector()) {\n          var connectorWidth = lyrics.getConnectorWidth();\n          if (ctxt.minLyricWordSpacing < connectorWidth) {\n            var minHyphenWidth = Math.max(\n              connectorWidth - extraSpaceBeforeCustos,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n        ++i;\n      }\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n\n    // first step of justification is to determine how much space we have to use up\n    var extraSpace = this.getWhitespaceOnRight();\n\n    if (\n      Math.abs(extraSpace) < 0.5 ||\n      (extraSpace > 0 && ((doJustify && toJustify.length === 0) || !doJustify))\n    )\n      return;\n\n    this.condensableSpaces = condensableSpaces;\n\n    var curr, prev;\n    var offset = 0;\n    var increment = extraSpace / toJustify.length;\n    var multiplier = 0;\n    var toJustifyIndex = 0;\n    if (extraSpace < 0) {\n      toJustify = condensableSpaces.filter(s => s.condensable > 0);\n      multiplier = extraSpace / condensableSpaces.sum;\n      increment = 0;\n    }\n    var nextToJustify = toJustify[toJustifyIndex++];\n    var incrementOffsetAtNextChance = false;\n    for (i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = curr;\n      curr = notations[i];\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      ) {\n        continue;\n      }\n\n      if (!multiplier && curr === this.custos) {\n        if (curr.hasLyrics()) {\n          curr.bounds.x = Math.min(\n            curr.bounds.x +\n              (this.staffRight - LyricArray.getRight(curr.lyrics)),\n            this.staffRight - curr.bounds.width\n          );\n          offset += increment;\n        } else {\n          curr.bounds.x = Math.min(\n            curr.bounds.x + offset,\n            this.staffRight - curr.bounds.width\n          );\n        }\n        continue;\n      }\n\n      if (multiplier) {\n        if (nextToJustify && nextToJustify.notation === curr) {\n          offset += multiplier * nextToJustify.condensable;\n          nextToJustify = toJustify[toJustifyIndex++];\n        }\n      } else if (nextToJustify === curr) {\n        if (prev.hasNoWidth) {\n          incrementOffsetAtNextChance = true;\n        } else {\n          offset += increment;\n        }\n        nextToJustify = toJustify[toJustifyIndex++];\n      } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n        incrementOffsetAtNextChance = false;\n        offset += increment;\n      }\n\n      curr.bounds.x += offset;\n    }\n\n    if (extraSpaceBeforeCustos > 0) {\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n  }\n\n  handleEndBrace(ctxt, note, i) {\n    var startBrace = ctxt.lastStartBrace;\n    if (!startBrace) return;\n    // calculate the y value of the brace by iterating over all notations\n    // under/over the brace.\n    var y;\n    var k = startBrace.notationIndex;\n    var notations = this.score.notations;\n    var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n    var startNote = startBrace.note;\n\n    if (startBrace.isAbove) {\n      y = Math.min(\n        ctxt.calculateHeightFromStaffPosition(4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.y - dy)\n      );\n    } else {\n      y = Math.max(\n        ctxt.calculateHeightFromStaffPosition(-4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.bottom() + dy)\n      );\n    }\n\n    var addAcuteAccent = false;\n\n    if (startBrace.shape === BraceShape.RoundBrace) {\n      this.braces.push(\n        new RoundBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove\n        )\n      );\n    } else {\n      if (startBrace.shape === BraceShape.AccentedCurlyBrace)\n        addAcuteAccent = true;\n\n      this.braces.push(\n        new CurlyBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove,\n          addAcuteAccent\n        )\n      );\n    }\n\n    delete ctxt.lastStartBrace;\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = []; // clear any existing ledger lines\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // an element needs to have a staffPosition property, as well as the standard\n    // bounds property. so it could be a note, or it could be a custos\n    // offsetX can be used to add to the position info for the element,\n    // useful in the case of notes.\n    var processElementForLedgerLine = (\n      element,\n      endElem = element,\n      staffPosition = element.staffPosition,\n      offsetX = element.neume ? element.neume.bounds.x : 0\n    ) => {\n      // do we need a ledger line for this note?\n\n      if (staffPosition >= 5 || staffPosition <= -5) {\n        var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n        var x2 =\n          offsetX +\n          endElem.bounds.x +\n          endElem.bounds.width +\n          ctxt.intraNeumeSpacing;\n\n        // round the staffPosition to the nearest line\n        if (staffPosition > 0)\n          staffPosition = staffPosition - ((staffPosition - 1) % 2);\n        else staffPosition = staffPosition - ((staffPosition + 1) % 2);\n\n        // if we have a ledger line close by, then average out the distance between the two\n        var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\n        if (\n          this.ledgerLines.length > 0 &&\n          this.ledgerLines[this.ledgerLines.length - 1].x2 +\n            minLedgerSeparation >=\n            x1\n        ) {\n          // average out the distance\n          var half =\n            (x1 - this.ledgerLines[this.ledgerLines.length - 1].x2) / 2;\n          this.ledgerLines[this.ledgerLines.length - 1].x2 += half;\n          x1 -= half;\n        }\n\n        // never let a ledger line extend past the staff width\n        if (x2 > this.staffRight) x2 = this.staffRight;\n\n        // finally, add the ledger line\n        this.ledgerLines.push({\n          x1: x1,\n          x2: x2,\n          staffPosition: staffPosition\n        });\n      }\n    };\n\n    var episemata = []; // keep track of episemata in case we can connect some\n    var startBrace = null;\n    var minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE; // for braces\n\n    var positionNonLyricText = (text, neume, rightX) => {\n      text.setMaxWidth(ctxt, this.staffRight);\n      //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n      text.bounds.x = 0;\n      if (rightX)\n        text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n      var beyondStaffRight =\n        neume.bounds.x + text.bounds.right() - this.staffRight;\n      if (beyondStaffRight > 0) {\n        text.bounds.x -= beyondStaffRight;\n      }\n      if (neume.bounds.x + text.bounds.x < 0) {\n        text.bounds.x = -neume.bounds.x;\n      }\n    };\n\n    // make a final pass over all of the notes to add any necessary\n    // ledger lines and to smooth out episemata\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      var neume = notations[i];\n\n      minY = Math.min(minY, neume.bounds.y);\n      maxY = Math.max(maxY, neume.bounds.bottom());\n\n      if (neume.constructor === Custos) {\n        processElementForLedgerLine(neume);\n        continue;\n      }\n\n      // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n      if (neume.alText) {\n        for (var j = 0; j < neume.alText.length; j++) {\n          positionNonLyricText(neume.alText[j], neume);\n        }\n      }\n\n      // set up horizontal position of translations\n      if (neume.translationText) {\n        for (j = 0; j < neume.translationText.length; j++) {\n          var text = neume.translationText[j];\n          if (text.endNeume) {\n            var rightX = text.endNeume.hasLyrics()\n              ? text.endNeume.bounds.x +\n                Math.max(...text.endNeume.lyrics.map(l => l.bounds.right()))\n              : text.endNeume.bounds.right();\n            rightX -= neume.bounds.x;\n            positionNonLyricText(text, neume, rightX);\n          } else {\n            positionNonLyricText(text, neume);\n          }\n        }\n      }\n\n      // if it's not a neume then just skip here\n      if (!neume.isNeume) continue;\n\n      for (j = 0; j < neume.ledgerLines.length; j++) {\n        var ll = neume.ledgerLines[j];\n        processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n      }\n\n      for (j = 0; j < neume.notes.length; j++) {\n        var k,\n          note = neume.notes[j];\n\n        // blend episemata as we're able\n        if (note.episemata.length === 0) episemata = [];\n        for (k = 0; k < note.episemata.length; k++) {\n          var episema = note.episemata[k];\n\n          var spaceBetweenEpisemata = 0;\n\n          // calculate the distance between the last episemata and this one...\n          // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n          if (episemata.length > 0)\n            spaceBetweenEpisemata =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.right());\n\n          // we try to blend the episema if we're able.\n          if (\n            episemata.length === 0 ||\n            episemata[episemata.length - 1].positionHint !==\n              episema.positionHint ||\n            episemata[episemata.length - 1].terminating === true ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Left ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Center ||\n            episema.alignment === HorizontalEpisemaAlignment.Right ||\n            episema.alignment === HorizontalEpisemaAlignment.Center ||\n            (spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 &&\n              note.glyphVisualizer.glyphCode !== GlyphCode.None)\n          ) {\n            // start a new set of episemata to potentially blend\n            episemata = [episema];\n          } else {\n            // blend all previous with this one\n            var newY;\n\n            if (episema.positionHint === MarkingPositionHint.Below)\n              newY = Math.max(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n            else\n              newY = Math.min(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n\n            if (episema.bounds.y !== newY) episema.bounds.y = newY;\n            else {\n              for (var l = 0; l < episemata.length; l++)\n                episemata[l].bounds.y = newY;\n            }\n\n            // extend the last episema to meet the new one\n            var newWidth =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.x);\n            if (newWidth < 0) {\n              newWidth *= -1;\n              episemata[episemata.length - 1].bounds.x -= newWidth;\n            }\n            episemata[episemata.length - 1].bounds.width = newWidth;\n\n            episemata.push(episema);\n          }\n        }\n\n        if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\n        if (note.braceStart) {\n          ctxt.lastStartBrace = startBrace = note.braceStart;\n          startBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // if we still have an active brace, that means it spands two chant lines!\n    if (startBrace !== null) {\n      if (this.custos) {\n        // if the next end brace is on the first note following the line break, simply use it with the custos\n        // Do the same if there is only an accidental between\n        // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n        var nextNotation = notations[lastIndex];\n        var nextNote = nextNotation.notes && nextNotation.notes[0];\n        var nextNotationButOne = notations[lastIndex + 1];\n        var nextNoteButOne =\n          nextNotationButOne &&\n          nextNotationButOne.notes &&\n          nextNotationButOne.notes[0];\n        var braceEnd =\n          (nextNote && nextNote.braceEnd) ||\n          (nextNotation.isAccidental &&\n            nextNoteButOne &&\n            nextNoteButOne.braceEnd);\n        if (braceEnd) {\n          this.custos.braceEnd = braceEnd;\n          this.handleEndBrace(ctxt, this.custos, i);\n        } else {\n          this.braceStart = startBrace;\n          this.custos.braceEnd = new BracePoint(\n            this.custos,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Right\n          );\n          this.handleEndBrace(ctxt, this.custos, i - 1);\n          ctxt.lastStartBrace = new BracePoint(\n            null,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Left\n          );\n          ctxt.lastStartBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // don't forget to also include the final custos, which may need a ledger line too\n    if (this.custos) processElementForLedgerLine(this.custos);\n  }\n\n  // this is where the real core of positioning neumes takes place\n  // returns true if positioning was able to fit the neume before rightNotationBoundary.\n  // returns false if cannot fit before given right margin.\n  // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n  positionNotationElement(\n    ctxt,\n    prevLyrics,\n    prev,\n    curr,\n    rightNotationBoundary,\n    condensableSpaces = []\n  ) {\n    if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n    var i,\n      space = { notation: curr },\n      fixedX = false;\n\n    // To begin we just place the current notation right after the previous,\n    // irrespective of lyrics.\n    // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n    // we force it to have the same x as the previous group.\n    if (\n      (!curr.hasNoWidth || curr.firstWithNoWidth === curr) &&\n      prev.firstWithNoWidth\n    ) {\n      curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n      fixedX = true;\n    } else {\n      curr.bounds.x = prev.bounds.right();\n    }\n\n    if (\n      (curr.constructor === TextOnly && this.extraTextOnlyIndex === null) ||\n      (!curr.hasLyrics() && prev.calculatedTrailingSpace < 0)\n    ) {\n      // We transfer over the trailing space from the previous neume if the current neume is text only,\n      // so that the text only neume has a better chance at not needing a connector.\n      curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n      if (curr.hasLyrics())\n        curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n      if (curr.constructor === TextOnly && curr.lyrics.length === 1) {\n        curr.lyrics[0].setMaxWidth(\n          ctxt,\n          this.staffRight,\n          this.staffRight -\n            LyricArray.getRight(prevLyrics) -\n            ctxt.minLyricWordSpacing\n        );\n      }\n    } else if (!fixedX) {\n      curr.bounds.x += prev.calculatedTrailingSpace;\n    }\n\n    if (\n      curr.hasLyrics() &&\n      !prev.isDivider &&\n      !prev.isAccidental &&\n      this.numNotationsOnLine > 0 &&\n      (curr.lyrics[0].lyricType === LyricType.SingleSyllable ||\n        curr.lyrics[0].lyricType === LyricType.BeginningSyllable)\n    ) {\n      curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n    }\n    if (curr.hasNoWidth || fixedX) {\n      space.total = space.condensable = 0;\n    } else if (\n      this.extraTextOnlyIndex !== null &&\n      curr.constructor === TextOnly\n    ) {\n      curr.bounds.x = 0;\n      space.total = space.condensable = 0;\n    } else {\n      space.total = curr.bounds.x - prev.bounds.right();\n      space.condensable = space.total * ctxt.condensingTolerance;\n    }\n\n    // if the previous notation has no lyrics, then we simply make sure the\n    // current notation with lyrics is in the bounds of the line\n    if (prevLyrics.length === 0) {\n      var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\n      // if the lyric left is negative, then offset the neume appropriately\n      for (i = 0; i < curr.lyrics.length; i++) {\n        let currLyric = curr.lyrics[i];\n        // we hope for the best!\n        // but always use a connector if the lyric has original text that was all used up for the drop cap.\n        let needsConnector =\n          currLyric.allowsConnector() &&\n          currLyric.dropCap &&\n          currLyric.originalText &&\n          !currLyric.text;\n        currLyric.setNeedsConnector(needsConnector);\n        let minLeft = this.staffLeft - this.paddingLeft;\n\n        if (currLyric.getLeft() < minLeft)\n          curr.bounds.x -= currLyric.getLeft() - minLeft;\n\n        space.condensable = Math.min(\n          space.condensable,\n          currLyric.getLeft() - minLeft\n        );\n        maxRight = Math.max(maxRight, currLyric.getRight());\n      }\n\n      if (\n        maxRight >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    } else {\n      if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n        curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n        space.total = curr.bounds.x - prev.bounds.right();\n        space.condensable = space.total * ctxt.condensingTolerance;\n      }\n    }\n\n    // if the curr notation has no lyrics, then simply check whether there is enough room\n    if (curr.hasLyrics() === false) {\n      if (\n        curr.bounds.right() + curr.calculatedTrailingSpace >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we have multiple lyrics on the current or the previous notation,\n    // we will have to run several passes over each set of lyrics:\n\n    // on the first pass, we will check the absolute left-most placement of the new syllables\n    // we will make additional passes until everything is stable\n    do {\n      var hasShifted = false;\n      var atLeastOneWithoutConnector = false;\n      for (i = 0; i < curr.lyrics.length; i++) {\n        if (!curr.lyrics[i].originalText) continue;\n        var prevLyricRight = 0;\n        let condensableSpacesSincePrevLyric = [];\n        let condensableSpaceSincePrevLyric = null;\n        if (i < prevLyrics.length && prevLyrics[i]) {\n          prevLyricRight = prevLyrics[i].getRight();\n          let notationI = condensableSpaces\n            .map(s => s.notation)\n            .lastIndexOf(prevLyrics[i].notation);\n          if (notationI >= 0) {\n            condensableSpacesSincePrevLyric = condensableSpaces.slice(\n              notationI + 1\n            );\n            condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric\n              .map(s => s.condensable)\n              .reduce((a, b) => a + b, 0);\n          } else {\n            condensableSpacesSincePrevLyric.sum = 0;\n          }\n        }\n\n        curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n        var currLyricLeft = curr.lyrics[i].getLeft();\n        if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n          // No connector needed, but include space between words if necessary!\n          let extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n          if (extraSpace < 0) {\n            // push the current element over a bit.\n            let shift =\n              prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            hasShifted = shift > 0.5;\n          } else {\n            condensableSpaceSincePrevLyric = extraSpace;\n          }\n        } else {\n          // we may need a connector yet...\n          if (\n            prevLyricRight + 0.1 >\n            currLyricLeft -\n              condensableSpacesSincePrevLyric.sum -\n              space.condensable\n          ) {\n            // in this case, the lyric elements actually overlap.\n            // so nope, no connector needed. instead, we just place the lyrics together\n            // fixme: for better text layout, we could actually use the kerning values\n            // between the prev and curr lyric elements!\n            let shift = prevLyricRight - currLyricLeft;\n            if (shift < -0.1) {\n              // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n              let multiplier =\n                shift /\n                (condensableSpacesSincePrevLyric.sum + space.condensable);\n              let offset = 0;\n              condensableSpacesSincePrevLyric.forEach(s => {\n                offset += multiplier * s.condensable;\n                s.notation.bounds.x += offset;\n              });\n            }\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            atLeastOneWithoutConnector = true;\n            hasShifted = shift > 0.5;\n          } else {\n            // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n            if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n              var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n              if (spaceBetweenSyls < ctxt.hyphenWidth) {\n                var minHyphenWidth =\n                  prevLyrics.length > 1\n                    ? ctxt.intraNeumeSpacing\n                    : ctxt.minLyricWordSpacing;\n                // we might not need to shift the syllable, but we do want to shrink the hyphen...\n                prevLyrics[i].setConnectorWidth(\n                  Math.max(minHyphenWidth, spaceBetweenSyls)\n                );\n              }\n            }\n            prevLyrics[i].setNeedsConnector(true);\n            prevLyricRight = prevLyrics[i].getRight();\n\n            if (prevLyricRight + 0.1 > currLyricLeft) {\n              let shift = prevLyricRight - currLyricLeft;\n              curr.bounds.x += shift;\n              condensableSpaceSincePrevLyric = 0;\n              hasShifted = shift > 0.5;\n            } else {\n              condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n            }\n          }\n        }\n\n        if (condensableSpaceSincePrevLyric !== null) {\n          if (\n            condensableSpaceSincePrevLyric <\n            condensableSpacesSincePrevLyric.sum + space.condensable\n          ) {\n            // reduce condensable space so that lyrics retain at least the width of a space character between words:\n            let multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n            space.condensable *= multiplier;\n            if (condensableSpacesSincePrevLyric.sum) {\n              condensableSpacesSincePrevLyric.forEach(space => {\n                space.condensable *= multiplier;\n              });\n              condensableSpaces.sum = condensableSpaces\n                .map(s => s.condensable)\n                .reduce((a, b) => a + b, 0);\n            }\n          }\n        }\n      }\n    } while (\n      curr.lyrics.length > 1 &&\n      hasShifted &&\n      atLeastOneWithoutConnector\n    );\n\n    for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n      let pLyrics = prevLyrics[i];\n      if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n        currLyricLeft = curr.lyrics[i].getLeft();\n        prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n        spaceBetweenSyls = currLyricLeft - prevLyricRight;\n        if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n        pLyrics.setConnectorWidth(spaceBetweenSyls);\n      }\n    }\n\n    if (\n      curr.bounds.right() + curr.calculatedTrailingSpace <\n        rightNotationBoundary + condensableSpaces.sum + space.condensable &&\n      LyricArray.getRight(curr.lyrics, true) <=\n        this.staffRight + condensableSpaces.sum + space.condensable\n    ) {\n      if (prev.isAccidental) {\n        // move the previous accidental up next to the current note:\n        let shift =\n          curr.bounds.x -\n          prev.bounds.width -\n          prev.calculatedTrailingSpace -\n          prev.bounds.x;\n        prev.bounds.x += shift;\n        if (Math.abs(shift) > 0.1) {\n          let lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n          condensableSpaces.sum -= lastCondensable.condensable;\n          lastCondensable.condensable = 0;\n        }\n      }\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we made it this far, then the element won't fit on this line.\n    return false;\n  }\n\n  /**\n   * Find the notation closest to x without going past it\n   * @param {number} x\n   */\n  bisectNotationAtX(x, useMidpoint = true) {\n    let minIndex = -1,\n      maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1),\n      notations = this.score.notations.slice(\n        this.notationsStartIndex,\n        this.notationsStartIndex + this.numNotationsOnLine\n      );\n\n    while (minIndex < curIndex) {\n      let notation = notations[curIndex];\n      let notationX = notation.bounds.x;\n      if (notationX > x) {\n        maxIndex = curIndex;\n      } else {\n        minIndex = curIndex;\n      }\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1);\n    }\n    let notation = notations[curIndex];\n    if (\n      useMidpoint &&\n      notation &&\n      notation.bounds.width === 0 &&\n      curIndex + 1 < notations.length\n    ) {\n      let nextNotation = notations[curIndex + 1],\n        closenessToLeft = x - notation.bounds.x,\n        closenessToRight = nextNotation.bounds.x - x;\n      if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft)\n        ++curIndex;\n    }\n    return notations[curIndex];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.ChantLine.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers\n} from \"./Exsurge.Chant.js\";\nimport {\n  ChantNotationElement,\n  GlyphCode,\n  MarkingPositionHint,\n  NeumeLineVisualizer,\n  VirgaLineVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\nclass NeumeBuilder {\n  constructor(ctxt, neume, startingX = 0) {\n    this.ctxt = ctxt;\n    this.neume = neume;\n    this.x = startingX;\n    this.lastNote = null;\n    this.lineIsHanging = false;\n    this.minX = 0;\n  }\n\n  // used to start a hanging line on the left of the next note\n  lineFrom(note) {\n    var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n    if (\n      this.x === 0 &&\n      previousNotation &&\n      previousNotation.notes &&\n      previousNotation.trailingSpace === 0\n    ) {\n      this.lastNote = previousNotation.notes.slice(-1)[0];\n      this.minX = -this.ctxt.neumeLineWeight;\n    } else {\n      this.lastNote = note;\n      this.lineIsHanging = true;\n    }\n    return this;\n  }\n\n  // add a note, with a connecting line on the left if we have one\n  noteAt(note, glyph, withLineTo = true) {\n    if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\n    if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\n    note.setGlyph(this.ctxt, glyph);\n    var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\n    var needsLine =\n      withLineTo &&\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        note,\n        this.lineIsHanging\n      );\n      this.neume.addVisualizer(line);\n      line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\n      if (!noteAlignsRight) this.x = line.bounds.x;\n    }\n\n    // if this is the first note of a right aligned glyph (probably an initio debilis),\n    // then there's nothing to worry about. but if it's not then first, then this\n    // subtraction will right align it visually\n    if (noteAlignsRight && this.lastNote)\n      note.bounds.x = this.x - note.bounds.width;\n    else {\n      note.bounds.x = this.x;\n      this.x += note.bounds.width;\n    }\n\n    this.neume.addVisualizer(note);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  // a special form of noteAdd that creates a virga\n  // uses a punctum cuadratum and a line rather than the virga glyphs\n  virgaAt(note, withLineTo = true) {\n    // add the punctum for the virga\n    this.noteAt(note, GlyphCode.PunctumQuadratum);\n\n    // add a line for the virga\n    var line = new VirgaLineVisualizer(this.ctxt, note);\n    this.x -= line.bounds.width;\n    line.bounds.x = this.x;\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  advanceBy(x) {\n    this.lastNote = null;\n    this.lineIsHanging = false;\n\n    this.x += x;\n\n    return this;\n  }\n\n  // for terminating hanging lines with no lower notes\n  withLineEndingAt(note) {\n    if (this.lastNote === null) return;\n\n    var line = new NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n    this.neume.addVisualizer(line);\n    this.x -= line.bounds.width;\n    line.bounds.x = this.x;\n\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n\n    return this;\n  }\n\n  withPodatus(lowerNote, upperNote) {\n    var upperGlyph;\n    var lowerGlyph;\n\n    if (lowerNote.liquescent === LiquescentType.InitioDebilis) {\n      // liquescent upper note or not?\n      if (upperNote.liquescent === LiquescentType.None)\n        upperGlyph = GlyphCode.PunctumQuadratum;\n      else upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.BeginningAscLiquescent;\n      upperGlyph = GlyphCode.TerminatingAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Ascending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Descending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    } else {\n      // standard shape\n      lowerGlyph = GlyphCode.PodatusLower;\n      upperGlyph = GlyphCode.PodatusUpper;\n    }\n\n    // allow a quilisma pes\n    if (lowerNote.shape === NoteShape.Quilisma) lowerGlyph = GlyphCode.Quilisma;\n\n    this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\n    // make sure we don't have lines connected to the podatus\n    this.lastNote = null;\n\n    return this;\n  }\n\n  withClivis(upper, lower) {\n    var lowerGlyph;\n\n    if (upper.shape === NoteShape.Oriscus)\n      this.noteAt(upper, GlyphCode.OriscusDes, false);\n    else this.lineFrom(lower).noteAt(upper, GlyphCode.PunctumQuadratum);\n\n    if (lower.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (lower.liquescent === LiquescentType.Ascending)\n      lowerGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (lower.liquescent === LiquescentType.Descending)\n      lowerGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    this.noteAt(lower, lowerGlyph);\n\n    // make sure we don't have lines connected to the clivis\n    this.lastNote = null;\n\n    return this;\n  }\n\n  // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n  withInclinata(notes) {\n    var staffPosition = notes[0].staffPosition,\n      prevStaffPosition = notes[0].staffPosition;\n\n    // it is important to advance by the width of the inclinatum glyph itself\n    // rather than by individual note widths, so that any liquescents are spaced\n    // the same as non-liquscents\n    var advanceWidth =\n      Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\n    // now add all the punctum inclinatum\n    for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n      var note = notes[i];\n\n      if (note.liquescent & LiquescentType.Small)\n        note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatumLiquescent);\n      else if (note.liquescent & LiquescentType.Large)\n        // fixme: is the large inclinatum liquescent the same as the apostropha?\n        note.setGlyph(this.ctxt, GlyphCode.Stropha);\n      // fixme: some climaci in the new chant books end with a punctum quadratum\n      // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n      else note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatum);\n\n      staffPosition = note.staffPosition;\n\n      var multiple = Math.abs(prevStaffPosition - staffPosition);\n      switch (multiple) {\n        case 0:\n          multiple = 1.1;\n          break;\n        default:\n          multiple *= 2 / 3;\n          break;\n      }\n\n      if (i > 0) this.x += advanceWidth * multiple;\n\n      note.bounds.x = this.x;\n\n      this.neume.addVisualizer(note);\n    }\n\n    return this;\n  }\n\n  withPorrectusSwash(start, end) {\n    var needsLine =\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        start,\n        this.lineIsHanging\n      );\n      this.x = Math.max(this.minX, this.x - line.bounds.width);\n      line.bounds.x = this.x;\n      this.neume.addVisualizer(line);\n    }\n\n    var glyph;\n\n    switch (start.staffPosition - end.staffPosition) {\n      case 1:\n        glyph = GlyphCode.Porrectus1;\n        break;\n      case 2:\n        glyph = GlyphCode.Porrectus2;\n        break;\n      case 3:\n        glyph = GlyphCode.Porrectus3;\n        break;\n      case 4:\n        glyph = GlyphCode.Porrectus4;\n        break;\n      default:\n        // fixme: should we generate an error here?\n        glyph = GlyphCode.None;\n        break;\n    }\n\n    start.setGlyph(this.ctxt, glyph);\n    start.bounds.x = this.x;\n\n    // the second glyph does not draw anything, but it still has logical importance for the editing\n    // environment...it can respond to changes which will then change the swash glyph of the first.\n    end.setGlyph(this.ctxt, GlyphCode.None);\n\n    this.x = start.bounds.right();\n    end.bounds.x = this.x - end.bounds.width;\n\n    this.neume.addVisualizer(start);\n    this.neume.addVisualizer(end);\n\n    this.lastNote = end;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n}\n\n/*\n * Neumes base class\n */\nexport class Neume extends ChantNotationElement {\n  constructor(notes = []) {\n    super();\n\n    this.isNeume = true; // poor man's reflection\n    this.notes = notes;\n\n    for (var i = 0; i < notes.length; i++) notes[i].neume = this;\n  }\n\n  addNote(note) {\n    note.neume = this;\n    this.notes.push(note);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = this.requiresLedgerLine();\n\n    // allow subclasses an opportunity to position their own markings...\n    this.positionMarkings();\n\n    // layout the markings of the notes\n    for (var i = 0; i < this.notes.length; i++) {\n      var note = this.notes[i];\n      var j;\n\n      for (j = 0; j < note.episemata.length; j++) {\n        note.episemata[j].performLayout(ctxt);\n        this.addVisualizer(note.episemata[j]);\n      }\n\n      for (j = 0; j < note.morae.length; j++) {\n        note.morae[j].performLayout(ctxt);\n        this.addVisualizer(note.morae[j]);\n      }\n\n      // if the note has an ictus, then add it here\n      if (note.ictus) {\n        note.ictus.performLayout(ctxt);\n        this.addVisualizer(note.ictus);\n      }\n\n      if (note.accent) {\n        note.accent.performLayout(ctxt);\n        this.addVisualizer(note.accent);\n      }\n\n      if (note.choralSign) {\n        note.choralSign.performLayout(ctxt);\n        this.addVisualizer(note.choralSign);\n      }\n\n      // braces are handled by the chant line, so we don't mess with them here\n      // this is because brace size depends on chant line logic (neume spacing,\n      // justification, etc.) so they are considered chant line level\n      // markings rather than note level markings\n    }\n\n    this.origin.x = this.notes[0].origin.x;\n    this.origin.y = this.notes[0].origin.y;\n\n    super.finishLayout(ctxt);\n  }\n\n  requiresLedgerLine() {\n    var firstAbove = false,\n      needsAbove = false,\n      firstBelow = false,\n      needsBelow = false,\n      // isPorrectus = false,\n      result = [];\n\n    if (!this.notes) return result;\n\n    for (var i = 0; i < this.notes.length; ++i) {\n      var note = this.notes[i];\n      var staffPosition = note.staffPosition;\n      if (staffPosition >= 4) {\n        needsAbove = needsAbove || staffPosition >= 5;\n        if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n        if (staffPosition >= 5) continue;\n      } else if (staffPosition <= -4) {\n        needsBelow = needsBelow || staffPosition <= -5;\n        if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n        if (staffPosition <= -5) continue;\n      }\n      if (needsAbove || needsBelow) {\n        var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n        result.push({\n          element: this.notes[firstAbove || firstBelow || 0],\n          endElem: this.notes[endI],\n          staffPosition: needsAbove ? 5 : -5\n        });\n        firstAbove = firstBelow = needsAbove = needsBelow = false;\n      }\n      // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n    }\n    if (needsAbove || needsBelow) {\n      result.push({\n        element: this.notes[firstAbove || firstBelow || 0],\n        endElem: this.notes[this.notes.length - 1],\n        staffPosition: needsAbove ? 5 : -5\n      });\n    }\n    return result;\n  }\n\n  resetDependencies() {}\n\n  build(ctxt) {\n    return new NeumeBuilder(ctxt, this);\n  }\n  positionEpisemata(note, position) {\n    var i;\n    for (i = 0; i < note.episemata.length; i++)\n      if (note.episemata[i].positionHint === MarkingPositionHint.Default)\n        note.episemata[i].positionHint = position;\n    if (note.choralSign) note.choralSign.positionHint = position;\n    return note.episemata.length;\n  }\n  positionEpisemataAbove(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Above);\n  }\n  positionEpisemataBelow(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Below);\n  }\n\n  positionPodatusEpisemata(bottomNote, topNote) {\n    // 1. episema on lower note by default be below, upper note above\n    this.positionEpisemataBelow(bottomNote);\n    this.positionEpisemataAbove(topNote);\n  }\n  positionInclinataMorae(notes) {\n    notes = notes.slice(-2);\n    if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition)\n      return;\n    var bottomNote = notes[1],\n      topNote = notes[0],\n      mark;\n\n    // The mora on the second (lower) note should be below the punctum,\n    // if the punctum is on a line and the previous punctum is in the space above.\n    if (\n      Math.abs(bottomNote.staffPosition % 2) === 1 &&\n      topNote.staffPosition - bottomNote.staffPosition === 1 &&\n      bottomNote.morae.length > 0\n    ) {\n      mark = bottomNote.morae.slice(-1)[0];\n      if (mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionPodatusMorae(bottomNote, topNote) {\n    var mark;\n\n    // The mora on the first (lower) note should be below it,\n    // if it is on a line.\n    if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n      if (bottomNote.morae.length === 1) {\n        mark = bottomNote.morae[0];\n      } else if (topNote.morae.length > 1) {\n        mark = topNote.morae[0];\n      }\n      if (mark && mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n\n    // if there is a mora on the first note but not on the second, and the neume\n    // continues with a punctum higher than the second note, we need to adjust\n    // the space after the neume so that it follows immediately with no gap\n    if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n      bottomNote.morae[0].ignoreBounds = true;\n    }\n  }\n  // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n  positionPodatusMarkings(bottomNote, topNote) {\n    this.positionPodatusEpisemata(bottomNote, topNote);\n    this.positionPodatusMorae(bottomNote, topNote);\n  }\n\n  // just like a clivis, but the first note of the three also works like the second note of the clivis:\n  // episema below, unless the middle note also has an episema\n  positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n    var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n    hasTopEpisema =\n      this.positionEpisemata(\n        firstNote,\n        hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n      ) && hasTopEpisema;\n    return hasTopEpisema;\n  }\n  positionClivisMorae(firstNote, secondNote) {\n    // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n    var morae = firstNote.morae.concat(secondNote.morae);\n    if (\n      secondNote.morae.length &&\n      firstNote.staffPosition - secondNote.staffPosition === 1 &&\n      Math.abs(secondNote.staffPosition % 2) === 1\n    ) {\n      morae.slice(-1)[0].positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionClivisEpisemata(firstNote, secondNote) {\n    var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n    this.positionEpisemata(\n      secondNote,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n    return hasTopEpisema;\n  }\n  positionClivisMarkings(firstNote, secondNote) {\n    this.positionClivisMorae(firstNote, secondNote);\n    return this.positionClivisEpisemata(firstNote, secondNote);\n  }\n\n  positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n    // episemata on first and second note work like a clivis,\n    // the second note should have its episema below, unless the first note also has an episema.\n    this.positionClivisEpisemata(firstNote, secondNote);\n    this.positionPodatusMarkings(secondNote, thirdNote);\n  }\n\n  positionPorrectusFlexusMarkings(first, second, third, fourth) {\n    var hasTopEpisema = this.positionEpisemataAbove(first);\n    hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n    this.positionEpisemata(\n      second,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  // subclasses can override this in order to correctly place markings in a neume specific way\n  positionMarkings() {}\n}\n\n/*\n * Apostropha\n */\nexport class Apostropha extends Neume {\n  positionMarkings() {\n    var positionHint = MarkingPositionHint.Above;\n\n    // logic here is this: if first episema is default position, place it above.\n    // then place the second one (if there is one) opposite of the first.\n    for (var i = 0; i < this.notes[0].episemata.length; i++) {\n      if (\n        this.notes[0].episemata[i].positionHint === MarkingPositionHint.Default\n      )\n        this.notes[0].episemata[i].positionHint = positionHint;\n      else positionHint = this.notes[0].episemata[i].positionHint;\n\n      // now place the next one in the opposite position\n      positionHint =\n        positionHint === MarkingPositionHint.Above\n          ? MarkingPositionHint.Below\n          : MarkingPositionHint.Above;\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).noteAt(\n      this.notes[0],\n      Apostropha.getNoteGlyphCode(this.notes[0])\n    );\n\n    this.finishLayout(ctxt);\n  }\n\n  static getNoteGlyphCode(note) {\n    if (note.shape === NoteShape.Stropha) return GlyphCode.Stropha;\n\n    if (note.liquescent & LiquescentType.Ascending)\n      return GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note.liquescent & LiquescentType.Descending)\n      return GlyphCode.PunctumQuadratumDesLiquescent;\n\n    if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n      return GlyphCode.PunctumCavum;\n\n    return GlyphCode.PunctumQuadratum;\n  }\n}\n\n/*\n * Bivirga\n *\n * For simplicity in implementation, Bivirga's have two notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Bivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Trivirga\n *\n * For simplicity in implementation, Trivirga's have three notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Trivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Climacus\n */\nexport class Climacus extends Neume {\n  positionMarkings() {\n    for (var i = 0; i < this.notes.length; i++) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .withInclinata(this.notes.slice(1));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Clivis\n */\nexport class Clivis extends Neume {\n  positionMarkings() {\n    this.positionClivisMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var upper = this.notes[0];\n    var lower = this.notes[1];\n\n    this.build(ctxt).withClivis(upper, lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Distropha\n *\n * For simplicity in implementation, Distropha's have two notes in the object\n * structure. These technically must be the same pitch though (like Bivirga).\n */\nexport class Distropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance = ctxt.intraNeumeSpacing;\n    glyphCodes.slice(0, 2).forEach((glyphCode) => {\n      if (glyphCode === GlyphCode.Stropha)\n        glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n    });\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Oriscus\n */\nexport class Oriscus extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // determine the glyph to use\n    var note = this.notes[0];\n    var glyph;\n\n    if (note.liquescent !== LiquescentType.None) {\n      glyph = GlyphCode.OriscusLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Ascending)\n        glyph = GlyphCode.OriscusAsc;\n      else if (note.shapeModifiers & NoteShapeModifiers.Descending)\n        glyph = GlyphCode.OriscusDes;\n      else {\n        // by default we take the descending form, unless we can figure out by a lookahead here\n        glyph = GlyphCode.OriscusDes;\n\n        // try to find a neume following this one\n        var neume = ctxt.findNextNeume();\n\n        if (neume) {\n          var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(\n            neume.notes[0].pitch\n          );\n\n          if (nextNoteStaffPosition > note.staffPosition)\n            glyph = GlyphCode.OriscusAsc;\n        }\n      }\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  resetDependencies() {\n    // a single oriscus tries to automatically use the right direction\n    // based on the following neumes. if we don't have a manually designated\n    // direction, then we reset our layout so that we can try to guess it\n    // at next layout phase.\n    if (\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Ascending ||\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Descending\n    )\n      return;\n\n    this.needsLayout = true;\n  }\n}\n\n/*\n * PesQuassus\n */\nexport class PesQuassus extends Neume {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var lower = this.notes[0];\n    var upper = this.notes[1];\n\n    var lowerGlyph;\n\n    var lowerStaffPos = lower.staffPosition;\n    var upperStaffPos = upper.staffPosition;\n\n    if (lower.shape === NoteShape.Oriscus) lowerGlyph = GlyphCode.OriscusAsc;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\n    if (upperStaffPos - lowerStaffPos === 1)\n      // use a virga glyph in this case\n      builder.virgaAt(upper);\n    else if (upper.liquescent === LiquescentType.LargeDescending)\n      builder\n        .noteAt(upper, GlyphCode.PunctumQuadratumDesLiquescent)\n        .withLineEndingAt(lower);\n    else\n      builder.noteAt(upper, GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PesSubpunctis\n */\nexport class PesSubpunctis extends Neume {\n  positionMarkings() {\n    this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n    for (var i = 2; i < this.notes.length; ++i) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes.slice(1));\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // podatus followed by inclinata\n    this.build(ctxt)\n      .withPodatus(this.notes[0], this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing * 0.68)\n      .withInclinata(this.notes.slice(2));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Podatus\n *\n * This podatus class handles a few neume types actually, depending on the note\n * data: Podatus (including various liquescent types on the upper note),\n * Podatus initio debilis, and Quilisma-Pes\n */\nexport class Podatus extends Neume {\n  positionMarkings() {\n    this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Porrectus\n */\nexport class Porrectus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var thirdGlyph;\n\n    if (third.liquescent & LiquescentType.Small)\n      thirdGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else thirdGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PorrectusFlexus\n */\nexport class PorrectusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[0],\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var thirdGlyph = GlyphCode.PunctumQuadratum,\n      fourthGlyph;\n\n    if (fourth.liquescent & LiquescentType.Small) {\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fourthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fourth.liquescent & LiquescentType.Ascending)\n      fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fourth.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n// this is some type of pseudo nume right? there is no such thing as a neume\n// of puncta inclinata, but this will be part of other composite neumes.\nexport class PunctaInclinata extends Neume {\n  positionMarkings() {\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withInclinata(this.notes);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Punctum\n */\nexport class Punctum extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note = this.notes[0];\n    var glyph = GlyphCode.PunctumQuadratum;\n\n    // determine the glyph to use\n    if (note.liquescent !== LiquescentType.None) {\n      if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatumLiquescent;\n      else if (note.shape === NoteShape.Oriscus)\n        glyph = GlyphCode.OriscusLiquescent;\n      else if (note.liquescent & LiquescentType.Ascending)\n        glyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (note.liquescent & LiquescentType.Descending)\n        glyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      else glyph = GlyphCode.PunctumQuadratumLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n        glyph = GlyphCode.PunctumCavum;\n      else if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatum;\n      else if (note.shape === NoteShape.Quilisma) glyph = GlyphCode.Quilisma;\n      else glyph = GlyphCode.PunctumQuadratum;\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus\n */\nexport class Salicus extends Neume {\n  positionMarkings() {\n    // by default place episema below\n    // fixme: is this correct?\n    for (var i = 0; i < this.notes.length; i++)\n      this.positionEpisemataBelow(this.notes[i]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms\n    if (third.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.TerminatingAscLiquescent);\n    else if (third.liquescent === LiquescentType.Ascending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (third.liquescent === LiquescentType.Descending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.virgaAt(third);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus Flexus\n */\nexport class SalicusFlexus extends Neume {\n  positionMarkings() {\n    var hasTopEpisema = this.positionTorculusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n    this.positionEpisemata(\n      this.notes[0],\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms,\n    // ...based on note four though!\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(third, GlyphCode.PunctumQuadratum);\n\n    // finally, do the fourth note\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(fourth, GlyphCode.TerminatingDesLiquescent);\n    else if (fourth.liquescent & LiquescentType.Ascending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (fourth.liquescent & LiquescentType.Descending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(fourth, GlyphCode.PunctumQuadratum);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus\n */\nexport class Scandicus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionEpisemataAbove(this.notes[2]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n    }\n  }\n\n  // if the third note shape is a virga, then the scadicus is rendered\n  // as a podatus followed by a virga. Otherwise, it's rendered as a\n  // punctum followed by a podatus...\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt).withPodatus(first, second).virgaAt(third);\n    } else {\n      this.build(ctxt)\n        .noteAt(\n          first,\n          first.shape === NoteShape.Quilisma\n            ? GlyphCode.Quilisma\n            : GlyphCode.PunctumQuadratum\n        )\n        .withPodatus(second, third);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus Flexus\n */\nexport class ScandicusFlexus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionClivisMarkings(this.notes[2], this.notes[3]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n      this.positionEpisemataAbove(this.notes[3]);\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt)\n        .withPodatus(first, second)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .withClivis(third, fourth);\n    } else {\n      var fourthGlyph = GlyphCode.PunctumQuadratum;\n\n      if (fourth.liquescent & LiquescentType.Ascending)\n        fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (fourth.liquescent & LiquescentType.Descending)\n        fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      this.build(ctxt)\n        .noteAt(first, GlyphCode.PunctumQuadratum)\n        .withPodatus(second, third)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .noteAt(fourth, fourthGlyph);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Torculus\n */\nexport class Torculus extends Neume {\n  positionMarkings() {\n    this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note1 = this.notes[0];\n    var note2 = this.notes[1];\n    var note3 = this.notes[2];\n\n    var glyph1, glyph3;\n\n    if (note1.liquescent === LiquescentType.InitioDebilis)\n      glyph1 = GlyphCode.TerminatingDesLiquescent;\n    else if (note1.shape === NoteShape.Quilisma) glyph1 = GlyphCode.Quilisma;\n    else glyph1 = GlyphCode.PunctumQuadratum;\n\n    if (note3.liquescent & LiquescentType.Small)\n      glyph3 = GlyphCode.TerminatingDesLiquescent;\n    else if (note3.liquescent & LiquescentType.Ascending)\n      glyph3 = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note3.liquescent & LiquescentType.Descending)\n      glyph3 = GlyphCode.PunctumQuadratumDesLiquescent;\n    else glyph3 = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(note1, glyph1)\n      .noteAt(note2, GlyphCode.PunctumQuadratum)\n      .noteAt(note3, glyph3);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinus\n */\nexport class TorculusResupinus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var firstGlyph, fourthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fourth.liquescent & LiquescentType.Small)\n      fourthGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinusFlexus\n */\nexport class TorculusResupinusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3],\n      this.notes[4]\n    );\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n    var fifth = this.notes[4];\n\n    var firstGlyph,\n      fourthGlyph = GlyphCode.PunctumQuadratum,\n      fifthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fifth.liquescent & LiquescentType.Small) {\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fifthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fifth.liquescent & LiquescentType.Ascending)\n      fifthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fifth.liquescent & LiquescentType.Descending)\n      fifthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fifthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph)\n      .noteAt(fifth, fifthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Tristropha\n *\n * For simplicity in implementation, Tristropha's have three notes in the object\n * structure. These technically must be the same pitch though (like the\n * Distropha and Bivirga).\n */\nexport class Tristropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance =\n      glyphCodes[0] === GlyphCode.Stropha\n        ? ctxt.intraNeumeSpacing / 2\n        : ctxt.intraNeumeSpacing;\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[2], glyphCodes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Virga\n */\nexport class Virga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).virgaAt(this.notes[0]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Neumes.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Step } from \"./Exsurge.Core.js\";\nimport {\n  GlyphCode,\n  GlyphVisualizer,\n  DividerLineVisualizer,\n  ChantNotationElement\n} from \"./Exsurge.Drawing.js\";\n\n/*\n *\n */\nexport class Custos extends ChantNotationElement {\n  // if auto is true, then the custos will automatically try to determine it's height based on\n  // subsequent notations\n  constructor(auto = false) {\n    super();\n    this.auto = auto;\n    this.staffPosition = 0; // default sane value\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    if (this.auto) {\n      var neume = ctxt.findNextNeume();\n\n      if (neume)\n        this.staffPosition = ctxt.activeClef.pitchToStaffPosition(\n          neume.notes[0].pitch\n        );\n\n      // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n      // within reasonable bounds\n      while (this.staffPosition < -6) this.staffPosition += 7;\n\n      while (this.staffPosition > 6) this.staffPosition -= 7;\n    }\n\n    var glyph = new GlyphVisualizer(\n      ctxt,\n      Custos.getGlyphCode(this.staffPosition)\n    );\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  // called when layout has changed and our dependencies are no longer good\n  resetDependencies() {\n    // we only need to resolve new dependencies if we're an automatic custos\n    if (this.auto) this.needsLayout = true;\n  }\n\n  static getGlyphCode(staffPosition) {\n    if (staffPosition <= 2) {\n      // ascending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosLong;\n      else return GlyphCode.CustosShort;\n    } else {\n      // descending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosDescLong;\n      else return GlyphCode.CustosDescShort;\n    }\n  }\n}\n\n/*\n * Divider\n */\nexport class Divider extends ChantNotationElement {\n  constructor() {\n    super();\n\n    this.isDivider = true;\n    this.resetsAccidentals = true;\n  }\n}\n\n/*\n * QuarterBar\n */\nexport class QuarterBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(new DividerLineVisualizer(ctxt, 2, 4, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * HalfBar\n */\nexport class HalfBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -2, 2, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * FullBar\n */\nexport class FullBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -3, 3, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Insertion Cursor\n */\nexport class InsertionCursor extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -4, 4));\n\n    this.origin.x = this.bounds.width / 2;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DominicanBar\n */\nexport class DominicanBar extends Divider {\n  constructor(staffPosition) {\n    super();\n    staffPosition--;\n    var parity = staffPosition % 2;\n\n    this.staffPosition = staffPosition - 2 * parity;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(\n      new DividerLineVisualizer(\n        ctxt,\n        this.staffPosition - 3,\n        this.staffPosition,\n        this\n      )\n    );\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DoubleBar\n */\nexport class DoubleBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var line0 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line0.bounds.x = 0;\n    this.addVisualizer(line0);\n\n    var line1 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n    this.addVisualizer(line1);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport const AccidentalType = {\n  Flat: -1,\n  Natural: 0,\n  Sharp: 1\n};\n\n/*\n * Accidental\n */\nexport class Accidental extends ChantNotationElement {\n  constructor(staffPosition, accidentalType) {\n    super();\n    this.isAccidental = true;\n    this.keepWithNext = true; // accidentals should always stay connected...\n\n    this.staffPosition = staffPosition;\n    this.accidentalType = accidentalType;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\n    this.finishLayout(ctxt);\n  }\n\n  // creation of the glyph visualizer is refactored out or performLayout\n  // so that clefs can use the same logic for their accidental glyph\n  createGlyphVisualizer(ctxt) {\n    var glyphCode = GlyphCode.Flat;\n\n    switch (this.accidentalType) {\n      case AccidentalType.Natural:\n        glyphCode = GlyphCode.Natural;\n        break;\n      case AccidentalType.Sharp:\n        glyphCode = GlyphCode.Sharp;\n        break;\n      default:\n        glyphCode = GlyphCode.Flat;\n        break;\n    }\n\n    var glyph = new GlyphVisualizer(ctxt, glyphCode);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    return glyph;\n  }\n\n  adjustStep(step) {\n    switch (this.accidentalType) {\n      case AccidentalType.Flat:\n        if (step === Step.Ti) return Step.Te;\n        if (step === Step.Mi) return Step.Me;\n        break;\n      case AccidentalType.Sharp:\n        if (step === Step.Do) return Step.Du;\n        if (step === Step.Fa) return Step.Fu;\n        break;\n      case AccidentalType.Natural:\n        if (step === Step.Te) return Step.Ti;\n        if (step === Step.Me) return Step.Mi;\n        if (step === Step.Du) return Step.Do;\n        if (step === Step.Fu) return Step.Fa;\n        break;\n    }\n\n    // no adjustment needed\n    return step;\n  }\n\n  applyToPitch(pitch) {\n    // no adjusment needed\n    if (this.pitch.octave !== pitch.octave) return;\n\n    pitch.step = this.adjustStep(pitch.step);\n  }\n}\n\n/*\n * Virgula\n */\nexport class Virgula extends Divider {\n  constructor() {\n    super();\n\n    // unlike other dividers a virgula does not reset accidentals\n    this.resetsAccidentals = false;\n\n    // the staff position of the virgula is customizable, so that it\n    // can be placed on different lines (top or bottom) depending on the\n    // notation tradition of what is being notated (e.g., Benedictine has it\n    //  on top line, Norbertine at the bottom)\n    this.staffPosition = 3;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.Virgula);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    this.addVisualizer(glyph);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Signs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { NoteShape } from \"./Exsurge.Chant.js\";\nimport {\n  ChantLayoutElement,\n  GlyphCode,\n  GlyphVisualizer,\n  MarkingPositionHint,\n  QuickSvg\n} from \"./Exsurge.Drawing.js\";\n\nexport class Accent extends GlyphVisualizer {\n  constructor(ctxt, note, glyphCode = GlyphCode.AcuteAccent) {\n    super(ctxt, glyphCode);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Above;\n  }\n\n  performLayout(ctxt) {\n    this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\n    // this puts the acute accent either over the staff lines, or over the note if the\n    // note is above the staff lines\n    this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n  }\n}\n\n// for positioning markings on notes\nexport var HorizontalEpisemaAlignment = {\n  Default: 0,\n  Left: 1,\n  Center: 2,\n  Right: 3\n};\n\n/*\n * HorizontalEpisema\n *\n * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n */\nexport class HorizontalEpisema extends ChantLayoutElement {\n  constructor(note) {\n    super();\n\n    this.note = note;\n\n    this.positionHint = MarkingPositionHint.Default;\n    this.terminating = false; // indicates if this episema should terminate itself or not\n    this.alignment = HorizontalEpisemaAlignment.Default;\n  }\n\n  performLayout(ctxt) {\n    // following logic helps to keep the episemata away from staff lines if they get too close\n\n    var y = 0,\n      step;\n    var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    var ledgerLine = this.note.neume.ledgerLines[0] || {};\n    var punctumInclinatumShorten = false;\n\n    if (glyphCode === GlyphCode.PunctumInclinatum) {\n      let notes = this.note.neume.notes,\n        index = notes.indexOf(this.note),\n        prevNote = notes[index - 1];\n      if (\n        prevNote &&\n        prevNote.glyphVisualizer.glyphCode === GlyphCode.PunctumInclinatum &&\n        prevNote.staffPosition - this.note.staffPosition === 1\n      ) {\n        punctumInclinatumShorten = true;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Below) {\n      y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n      if (glyphCode === GlyphCode.None)\n        // correction for episema under the second note of a porrectus\n        y += ctxt.staffInterval / 2;\n      step = Math.ceil(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.ceil((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // if it's an odd step, that means we're on a staff line,\n        // so we shift to between the staff line\n        if (Math.abs(step) % 2 === 1) {\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step += 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step += 1 / 3;\n          }\n        }\n      }\n    } else {\n      y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n      step = Math.floor(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.floor((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // find nearest acceptable third between staff lines (or staff line)\n        if (Math.abs(step) % 2 === 1) {\n          // if it was a staff line, we need to adjust\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step -= 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step -= 1 / 3;\n          }\n        }\n      }\n    }\n\n    y = step * ctxt.staffInterval;\n\n    var width = this.note.bounds.width;\n    var x = this.note.bounds.x;\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      width = ctxt.staffInterval;\n    else if (glyphCode === GlyphCode.None) {\n      width = ctxt.staffInterval;\n      x -= width;\n    } else if (punctumInclinatumShorten) {\n      width *= 2 / 3;\n      x += 0.5 * width;\n    } else if (glyphCode === GlyphCode.PunctumInclinatumLiquescent) {\n      width *= 2 / 3;\n      x += 0.25 * width;\n    }\n\n    // also, the position hint can affect the x/width of the episema\n    if (this.alignment === HorizontalEpisemaAlignment.Left) {\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n      x += width * 0.1;\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n      x += width * 0.2;\n      width *= 0.8;\n    }\n\n    this.bounds.x = x;\n    this.bounds.y = y - ctxt.episemaLineWeight / 2;\n    this.bounds.width = width;\n    this.bounds.height = ctxt.episemaLineWeight;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      this.bounds.width,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: this.bounds.width,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"horizontalEpisema\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\n/*\n * Ictus\n */\nexport class Ictus extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.VerticalEpisemaAbove);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n  }\n\n  performLayout(ctxt) {\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n    var positionHint = this.positionHint || MarkingPositionHint.Below;\n    var staffPosition =\n      this.note.staffPosition +\n      (positionHint === MarkingPositionHint.Above ? 1 : -1);\n    var collisionWithEpisema =\n      this.note.episemata.length > 0 &&\n      (this.note.episemata[0].positionHint || MarkingPositionHint.Above) ===\n        positionHint;\n    var horizontalOffset;\n    var verticalOffset = 1;\n    var shortOffset = -0.2;\n    var extraOffset = 0;\n    var collisionWithStaffLine =\n      staffPosition % 2 &&\n      (Math.abs(staffPosition) < 4 ||\n        (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      horizontalOffset = ctxt.staffInterval / 2;\n    else if (glyphCode === GlyphCode.None) {\n      horizontalOffset = -ctxt.staffInterval / 2;\n    } else {\n      horizontalOffset = this.note.bounds.width / 2;\n      if (\n        glyphCode === GlyphCode.PunctumInclinatum &&\n        !collisionWithStaffLine &&\n        !collisionWithEpisema\n      ) {\n        extraOffset = 0.3;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      glyphCode = GlyphCode.VerticalEpisemaAbove;\n      verticalOffset *= -1;\n    } else {\n      glyphCode = GlyphCode.VerticalEpisemaBelow;\n    }\n    if (collisionWithEpisema) {\n      extraOffset = 0.4;\n    }\n    verticalOffset *=\n      ctxt.staffInterval *\n      (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\n    this.setGlyph(ctxt, glyphCode);\n    this.setStaffPosition(ctxt, staffPosition);\n\n    this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n    this.bounds.y += verticalOffset;\n  }\n}\n\n/*\n * Mora\n */\nexport class Mora extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.Mora);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n  }\n\n  performLayout(ctxt) {\n    this.setGlyph(ctxt, this.glyphCode);\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n    var staffPosition = this.note.staffPosition;\n\n    this.setStaffPosition(ctxt, staffPosition);\n\n    var verticalOffset = 0;\n    // First, we need to find the next note in the neume.\n    var noteIndex = this.note.neume.notes.indexOf(this.note);\n    var nextNote;\n    if (noteIndex >= 0) {\n      ++noteIndex;\n      if (this.note.neume.notes.length > noteIndex) {\n        nextNote = this.note.neume.notes[noteIndex];\n        if (\n          nextNote.morae &&\n          nextNote.morae.length &&\n          this.note.neume.notes.length === noteIndex + 1\n        ) {\n          // this note is the second to last in its neume, and the last note also has a mora\n          this.horizontalOffset +=\n            nextNote.bounds.right() - this.note.bounds.right();\n        } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n          // center the dot over the following note.\n          this.horizontalOffset =\n            (nextNote.bounds.right() -\n              this.note.bounds.right() -\n              this.bounds.right()) /\n            2;\n        } else {\n          nextNote = null;\n        }\n      } else if (this.note.neume.notes.length === noteIndex) {\n        // this note is the last in its neume:\n        if (this.note.neume.trailingSpace === 0) {\n          // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n          var notationIndex = this.note.neume.score.notations.indexOf(\n            this.note.neume\n          );\n          if (notationIndex >= 0) {\n            var nextNotation = this.note.neume.score.notations[\n              notationIndex + 1\n            ];\n            if (nextNotation && nextNotation.notes) {\n              nextNote = nextNotation.notes[0];\n            }\n          }\n        } else if (this.note.shape !== NoteShape.Inclinatum) {\n          this.note.neume.calculatedTrailingSpace += this.origin.x;\n        }\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;\n      else verticalOffset -= ctxt.staffInterval * 0.75;\n    } else if (this.positionHint === MarkingPositionHint.Below) {\n      if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;\n      else verticalOffset += ctxt.staffInterval * 0.75;\n    } else {\n      if (staffPosition % 2 === 0) {\n        // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n        // between the top of the note's space and the top of the following note.\n        if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n          verticalOffset -= ctxt.staffInterval * 0.25;\n        }\n      } else {\n        verticalOffset -= ctxt.staffInterval * 0.75;\n      }\n    }\n    this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n    this.bounds.y += verticalOffset;\n  }\n}\n\n// indicates the shape of the brace\nexport var BraceShape = {\n  RoundBrace: 0,\n  CurlyBrace: 1,\n  AccentedCurlyBrace: 2\n};\n\n// indicates how the brace is alignerd to the note to which it's connected\nexport var BraceAttachment = {\n  Left: 0,\n  Right: 1\n};\n\nexport class BracePoint extends ChantLayoutElement {\n  constructor(note, isAbove, shape, attachment) {\n    super();\n\n    this.note = note;\n    this.isAbove = isAbove;\n    this.shape = shape;\n    this.attachment = attachment;\n  }\n\n  getAttachmentX(note) {\n    if (!note) note = this.note;\n    if (this.attachment === BraceAttachment.Left)\n      return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;\n    else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Markings.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  Units,\n  Pitch,\n  Point,\n  Rect,\n  Margins,\n  Size,\n  Step\n} from \"./Exsurge.Core.js\";\nimport {\n  MarkingPositionHint,\n  LyricType,\n  Lyric,\n  LyricArray,\n  AboveLinesText,\n  ChoralSign,\n  TranslationText,\n  DefaultTrailingSpace,\n  GlyphCode\n} from \"./Exsurge.Drawing.js\";\nimport {\n  Note,\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers,\n  ChantMapping,\n  ChantScore,\n  ChantDocument,\n  Clef,\n  DoClef,\n  FaClef,\n  TextOnly,\n  ChantLineBreak\n} from \"./Exsurge.Chant.js\";\nimport * as Markings from \"./Exsurge.Chant.Markings.js\";\nimport * as Signs from \"./Exsurge.Chant.Signs.js\";\nimport * as Neumes from \"./Exsurge.Chant.Neumes.js\";\n\n// reusable reg exps\nvar __syllablesRegex = /(?=\\S)([^(]*)(?:\\(?([^)]*)\\)?)?/g;\nvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\nvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\nvar __notationsRegex_group_insideBraces = 1;\n\nvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\n// for the brace string inside of [ and ] in notation data\n// the capturing groups are:\n//  1. o or u, to indicate over or under\n//  2. b, cb, or cba, to indicate the brace type\n//  3. 0 or 1 to indicate the attachment point\n//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n//  5. a float indicating the millimeter length of the brace (not supported yet)\nvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\nconst TrailingSpaceForAccidental = ctxt =>\n  ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\nconst TrailingSpaceMultiple = multiplier => ctxt =>\n  ctxt.intraNeumeSpacing * multiplier;\n\nconst regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\nconst regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\nconst regexHeaderComment = /^%.*/;\nexport class GabcHeader {\n  static getLength(gabc) {\n    let match = gabc.match(regexHeaderEnd);\n    return match ? match.index + match[0].length : 0;\n  }\n\n  constructor(text) {\n    if (typeof text !== \"string\") text = \"\";\n    this.comments = [];\n    this.cValues = {};\n    this.original = \"\";\n    let match = text.match(regexHeaderEnd);\n    if (match) {\n      let txtHeader = (this.original = text.slice(\n        0,\n        match.index + match[0].length\n      ));\n      var lines = txtHeader.split(/\\r?\\n/g);\n      for (var i = 0; i < lines.length; ++i) {\n        let line = lines[i],\n          match = regexHeaderLine.exec(line);\n        if (match) {\n          var key = match[1].replace(/-([a-z])/g, function(a, letter) {\n            return letter.toUpperCase();\n          });\n          if (this[match[1]]) {\n            var arrayName = match[1] + \"Array\";\n            if (!this[arrayName]) {\n              this[arrayName] = [this[match[1]]];\n            }\n            this[arrayName].push(match[2]);\n          } else {\n            this[match[1]] = match[2];\n          }\n          if (key !== match[1]) this[key] = this[match[1]];\n        } else if ((match = regexHeaderComment.exec(line))) {\n          if (line !== \"%%\") {\n            match = regexHeaderLine.exec(line.slice(1));\n            if (match) {\n              let key = match[1].replace(/-([a-z])/g, function(a, letter) {\n                return letter.toUpperCase();\n              });\n              this.cValues[match[1]] = match[2];\n              if (key !== match[1]) this.cValues[key] = match[2];\n            } else {\n              this.comments[i] = line;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  toString() {\n    var result = [];\n    for (let key in this) {\n      if (\n        typeof this[key] !== \"string\" ||\n        /^(length|original|comments|cValues)$/.test(key)\n      ) {\n        continue;\n      }\n      var alternateKey = key.replace(/[A-Z]/g, function(letter) {\n        return \"-\" + letter.toLowerCase();\n      });\n      if (alternateKey !== key && alternateKey in this) continue;\n      var array = this[key + \"Array\"];\n      if (array) {\n        for (var i = 0; i < array.length; ++i) {\n          result.push(key + \": \" + array[i] + \";\");\n        }\n      } else {\n        result.push(key + \": \" + this[key] + \";\");\n      }\n    }\n    for (let key in this.cValues) {\n      if (key.length === 0 || !this.cValues.hasOwnProperty(key)) continue;\n      result.push(\"%\" + key + \": \" + this.cValues[key] + \";\");\n    }\n    for (let i in this.comments) {\n      if (!this.comments.hasOwnProperty(i)) continue;\n      try {\n        result.splice(i, 0, this.comments[i]);\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return result.join(\"\\n\") + \"\\n%%\\n\";\n  }\n}\n\nvar elementCountForNotations = items =>\n  items.reduce((sum, item) => sum + (item.notes ? item.notes.length : 1), 0);\n\nexport class Gabc {\n  // takes gabc source code (without the header info) and returns an array\n  // of ChantMappings describing the chant. A chant score can then be created\n  // fron the chant mappings and later updated via updateMappings() if need\n  // be...\n  static createMappingsFromSource(ctxt, gabcSource) {\n    var headerLength = GabcHeader.getLength(gabcSource);\n    gabcSource = gabcSource.slice(headerLength);\n    var words = this.splitWords(gabcSource);\n\n    // set the default clef\n    ctxt.activeClef = Clef.default();\n\n    var mappings = this.createMappingsFromWords(\n      ctxt,\n      words,\n      clef => (ctxt.activeClef = clef)\n    );\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return mappings;\n  }\n\n  // A simple general purpose diff algorithm adapted here for comparing\n  // an array of existing mappings with an updated list of gabc words.\n  // note before is an array of mappings, and after is an array of strings\n  // (gabc words).\n  //\n  // This is definitely not the most effecient diff algorithm, but for our\n  // limited needs and source size it seems to work just fine...\n  //\n  // code is adapted from: https://github.com/paulgb/simplediff\n  //\n  // Returns:\n  //   A list of pairs, with the first part of the pair being one of three\n  //   strings ('-', '+', '=') and the second part being a list of values from\n  //   the original before and/or after lists. The first part of the pair\n  //   corresponds to whether the list of values is a deletion, insertion, or\n  //   unchanged, respectively.\n  static diffDescriptorsAndNewWords(before, after) {\n    // Create a map from before values to their indices\n    var oldIndexMap = {},\n      i;\n    for (i = 0; i < before.length; i++) {\n      oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n      oldIndexMap[before[i].source].push(i);\n    }\n\n    var overlap = [],\n      startOld,\n      startNew,\n      subLength,\n      inew;\n\n    startOld = startNew = subLength = 0;\n\n    for (inew = 0; inew < after.length; inew++) {\n      var _overlap = [];\n      oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n      for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n        var iold = oldIndexMap[after[inew]][i];\n        // now we are considering all values of val such that\n        // `before[iold] == after[inew]`\n        _overlap[iold] = ((iold && overlap[iold - 1]) || 0) + 1;\n        if (_overlap[iold] > subLength) {\n          // this is the largest substring seen so far, so store its indices\n          subLength = _overlap[iold];\n          startOld = iold - subLength + 1;\n          startNew = inew - subLength + 1;\n        }\n      }\n      overlap = _overlap;\n    }\n\n    if (subLength === 0) {\n      // If no common substring is found, we return an insert and delete...\n      var result = [];\n\n      if (before.length) result.push([\"-\", before]);\n\n      if (after.length) result.push([\"+\", after]);\n\n      return result;\n    }\n\n    // ...otherwise, the common substring is unchanged and we recursively\n    // diff the text before and after that substring\n    return [].concat(\n      this.diffDescriptorsAndNewWords(\n        before.slice(0, startOld),\n        after.slice(0, startNew)\n      ),\n      [[\"=\", after.slice(startNew, startNew + subLength)]],\n      this.diffDescriptorsAndNewWords(\n        before.slice(startOld + subLength),\n        after.slice(startNew + subLength)\n      )\n    );\n  }\n\n  // this function essentially performs and applies a rudimentary diff between a\n  // previously parsed set of mappings and between a new gabc source text.\n  // the mappings array passed in is changed in place to be updated from the\n  // new source\n  static updateMappingsFromSource(\n    ctxt,\n    mappings,\n    newGabcSource,\n    insertionIndex = null,\n    oldInsertionIndex = null\n  ) {\n    var headerLength = GabcHeader.getLength(newGabcSource);\n    newGabcSource = newGabcSource.slice(headerLength);\n    // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n    mappings.pop();\n\n    if (insertionIndex === null) {\n      insertionIndex = NaN;\n    }\n    if (oldInsertionIndex === null) {\n      oldInsertionIndex = NaN;\n    }\n\n    var newWords = this.splitWords(newGabcSource);\n\n    var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\n    var index = 0,\n      j,\n      k,\n      l,\n      sourceIndex = 0,\n      wordLength = 0,\n      mapping,\n      elementIndex = 0;\n\n    ctxt.activeClef = Clef.default();\n\n    // apply the results to the mappings, marking notations that need to be processed\n    var lastTranslationNeumes = [];\n    for (var i = 0; i < results.length; i++) {\n      var resultCode = results[i][0];\n      var resultValues = results[i][1];\n\n      if (index > 0)\n        sourceIndex =\n          mappings[index - 1].sourceIndex +\n          mappings[index - 1].source.length +\n          1;\n      if (resultCode === \"=\") {\n        var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n        // skip over ones that haven't changed, but updating the clef and source\n        // index (and pitch in case clef or accidentals have changed) as we go\n        for (j = 0; j < resultValues.length; j++, index++) {\n          mapping = mappings[index];\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n          }\n          if (\n            insertionIndex >= elementIndex ||\n            oldInsertionIndex >= elementIndex\n          ) {\n            // check if the insertion index is within this mapping:\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (\n              (insertionIndex >= elementIndex &&\n                insertionIndex < elementIndex + elementCount) ||\n              (oldInsertionIndex >= elementIndex &&\n                oldInsertionIndex < elementIndex + elementCount)\n            ) {\n              // re-do this mapping:\n              // TODO: check sourceIndex\n              let sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n              mappings.splice(index, 1, mapping);\n\n              elementIndex += elementCount;\n              continue;\n            }\n            elementIndex += elementCount;\n          }\n          mapping.sourceIndex += sourceIndexDiff;\n          for (k = 0; k < mapping.notations.length; k++) {\n            var curNotation = mapping.notations[k];\n            var prevIsAccidental =\n              mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n            // notify the notation that its dependencies are no longer valid\n            curNotation.resetDependencies();\n\n            if (curNotation.isClef) {\n              ctxt.activeClef = mappings[index].notations[k];\n            }\n\n            if (curNotation.isAccidental) {\n              ctxt.activeClef.activeAccidental = curNotation;\n            } else if (\n              curNotation.resetsAccidentals ||\n              (!prevIsAccidental &&\n                curNotation.hasLyrics() &&\n                curNotation.lyrics[0].lyricType <= LyricType.BeginningSyllable)\n            ) {\n              ctxt.activeClef.resetAccidentals();\n            }\n\n            // update source index, pitch, and automatic braces\n            if (curNotation.notes) {\n              for (l = 0; l < curNotation.notes.length; ++l) {\n                let note = curNotation.notes[l];\n                note.sourceIndex += sourceIndexDiff;\n                note.pitch = ctxt.activeClef.staffPositionToPitch(\n                  note.staffPosition\n                );\n                if (note.braceEnd && note.braceEnd.automatic)\n                  delete note.braceEnd;\n                if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n                  note.braceEnd = new Markings.BracePoint(\n                    note,\n                    this.needToEndBrace.isAbove,\n                    this.needToEndBrace.shape,\n                    this.needToEndBrace.attachment ===\n                    Markings.BraceAttachment.Left\n                      ? Markings.BraceAttachment.Right\n                      : Markings.BraceAttachment.Left\n                  );\n                  note.braceEnd.automatic = true;\n                  delete this.needToEndBrace;\n                } else if (note.braceStart && note.braceStart.automatic) {\n                  this.needToEndBrace = note.braceStart;\n                }\n              }\n            }\n            if (curNotation.translationText) {\n              for (l = 0; l < curNotation.translationText.length; ++l) {\n                let transText = curNotation.translationText[l];\n                delete transText.endNeume;\n                curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n                if (\n                  transText.textAnchor === \"end\" &&\n                  lastTranslationNeumes[0]\n                ) {\n                  let lastTranslationText =\n                    lastTranslationNeumes[0].translationText[l];\n                  if (lastTranslationText)\n                    lastTranslationText.endNeume = curNotation;\n                }\n              }\n              lastTranslationNeumes[0] = curNotation;\n            }\n            if (sourceIndexDiff) {\n              if (typeof curNotation.sourceIndex === \"number\") {\n                curNotation.sourceIndex += sourceIndexDiff;\n              }\n              for (l = 0; l < curNotation.lyrics.length; ++l) {\n                curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n              }\n              if (curNotation.alText) {\n                for (l = 0; l < curNotation.alText.length; ++l) {\n                  curNotation.alText[l].sourceIndex += sourceIndexDiff;\n                }\n              }\n            }\n          }\n        }\n      } else if (resultCode === \"-\") {\n        // delete elements that no longer exist, but first notify all\n        // elements of the change\n        mappings.splice(index, resultValues.length);\n      } else if (resultCode === \"+\") {\n        // insert new ones\n        for (j = 0; j < resultValues.length; j++) {\n          wordLength = resultValues[j].length + 1;\n          mapping = this.createMappingFromWord(\n            ctxt,\n            resultValues[j],\n            sourceIndex,\n            lastTranslationNeumes,\n            insertionIndex - elementIndex\n          );\n\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (insertionIndex < elementCount) {\n              // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n            }\n          }\n\n          for (k = 0; k < mapping.notations.length; k++) {\n            let curNotation = mapping.notations[k];\n            elementIndex += curNotation.notes ? curNotation.notes.length : 1;\n            if (curNotation.isClef) {\n              ctxt.activeClef = mapping.notations[k];\n            }\n          }\n\n          mappings.splice(index++, 0, mapping);\n          sourceIndex += wordLength;\n        }\n      }\n    }\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return headerLength;\n  }\n\n  // takes an array of gabc words (like that returned by splitWords below)\n  // and returns an array of ChantMapping objects, one for each word.\n  static createMappingsFromWords(ctxt, words) {\n    var mappings = [];\n    var sourceIndex = 0,\n      wordLength = 0,\n      lastTranslationNeumes = [];\n\n    for (var i = 0; i < words.length; i++) {\n      sourceIndex += wordLength;\n      wordLength = words[i].length + 1;\n      var word = words[i].trim();\n\n      if (word === \"\") continue;\n\n      var mapping = this.createMappingFromWord(\n        ctxt,\n        word,\n        sourceIndex,\n        lastTranslationNeumes\n      );\n\n      if (mapping) mappings.push(mapping);\n    }\n\n    return mappings;\n  }\n\n  // takes a gabc word (like those returned by splitWords below) and returns\n  // a ChantMapping object that contains the gabc word source text as well\n  // as the generated notations.\n  static createMappingFromWord(\n    ctxt,\n    word,\n    sourceIndex,\n    lastTranslationNeumes,\n    insertionIndex\n  ) {\n    var matches = [];\n    var notations = [];\n    var currSyllable = 0;\n\n    while ((match = __syllablesRegex.exec(word))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyricText = match[1].replace(/~/g, \" \");\n      var alText = [];\n      var translationText = [];\n      var notationData = match[2];\n\n      // new words reset the accidentals, per the Solesmes style (see LU xviij)\n      // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n      if (\n        currSyllable === 0 &&\n        /[a-z]/i.test(lyricText) &&\n        /[a-m]/i.test(notationData)\n      )\n        ctxt.activeClef.resetAccidentals();\n\n      var items = this.parseNotations(\n        ctxt,\n        notationData,\n        sourceIndex + match.index + match[1].length + 1,\n        insertionIndex\n      );\n\n      if (items.length === 0) continue;\n\n      if (insertionIndex >= 0)\n        insertionIndex -= elementCountForNotations(items);\n\n      items[0].firstOfSyllable = !!lyricText;\n      items[0].firstOfParentheses = true;\n      notations.push(...items);\n\n      // add the lyrics and/or alText to the first notation that makes sense...\n      var notationWithLyrics = null;\n      for (var i = 0; i < items.length; i++) {\n        var cne = items[i];\n\n        if (cne.isAccidental && i + 1 < items.length) continue;\n\n        notationWithLyrics = cne;\n        break;\n      }\n\n      var m = __altTranslationRegex.exec();\n      let indexOffset = 0;\n      while ((m = __altTranslationRegex.exec(lyricText))) {\n        let index = m.index;\n        lyricText =\n          lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n        index += sourceIndex + indexOffset + 1;\n        if (typeof m[1] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[1],\n            notationWithLyrics,\n            index + 4\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else if (typeof m[2] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[3],\n            notationWithLyrics,\n            index + m[2].length\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else {\n          let elem = new TranslationText(ctxt, m[3], notationWithLyrics, index);\n          elem.translationIndex = translationText.push(elem) - 1;\n        }\n        indexOffset += m[0].length;\n        __altTranslationRegex.exec();\n      }\n      if (lyricText === \"\" && alText.length === 0) continue;\n\n      if (notationWithLyrics === null)\n        return new ChantMapping(word, notations, sourceIndex);\n\n      if (alText.length) notationWithLyrics.alText = alText;\n\n      if (translationText.length) {\n        notationWithLyrics.translationText = translationText;\n        for (i = 0; i < translationText.length; ++i) {\n          let transText = translationText[i];\n          if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n            let lastTranslationText =\n              lastTranslationNeumes[0].translationText[i];\n            if (lastTranslationText)\n              lastTranslationText.endNeume = notationWithLyrics;\n          }\n        }\n        lastTranslationNeumes[0] = notationWithLyrics;\n      }\n\n      if (lyricText === \"\") continue;\n\n      var proposedLyricType;\n\n      // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n      if (!cne.isNeume && cne.constructor !== TextOnly)\n        proposedLyricType = LyricType.Directive;\n      // otherwise trye to guess the lyricType for the first lyric anyway\n      else if (currSyllable === 0 && j === matches.length - 1)\n        proposedLyricType = LyricType.SingleSyllable;\n      else if (currSyllable === 0 && j < matches.length - 1)\n        proposedLyricType = LyricType.BeginningSyllable;\n      else if (j === matches.length - 1)\n        proposedLyricType = LyricType.EndingSyllable;\n      else proposedLyricType = LyricType.MiddleSyllable;\n\n      currSyllable++;\n\n      var lyrics = this.createSyllableLyrics(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notationWithLyrics,\n        items,\n        sourceIndex + match.index\n      );\n\n      if (lyrics === null || lyrics.length === 0) continue;\n\n      notationWithLyrics.lyrics = lyrics;\n    }\n\n    return new ChantMapping(word, notations, sourceIndex);\n  }\n\n  // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n  static createSyllableLyrics(\n    ctxt,\n    text,\n    proposedLyricType,\n    notation,\n    notations,\n    sourceIndex\n  ) {\n    var lyrics = [];\n\n    // an extension to gabc: multiple lyrics per syllable can be separated by a |\n    var lyricTexts = text.split(\"|\");\n\n    for (var i = 0; i < lyricTexts.length; i++) {\n      var lyricText = lyricTexts[i];\n\n      if (i > 0) {\n        if (lyricText.match(/\\s$/)) {\n          lyricText = lyricText.replace(/s+$/, \"\");\n          proposedLyricType = LyricType.EndingSyllable;\n        } else {\n          proposedLyricType = LyricType.MiddleSyllable;\n        }\n      }\n\n      // gabc allows lyrics to indicate the centering part of the text by\n      // using braces to indicate how to center the lyric. So a lyric can\n      // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n      // word, respectively. Here we determine if the lyric should be spaced\n      // manually with this method of using braces.\n      var centerStartIndex = lyricText.indexOf(\"{\");\n      var centerLength = 0;\n\n      if (centerStartIndex >= 0) {\n        let indexClosingBracket = lyricText.indexOf(\"}\");\n\n        if (\n          indexClosingBracket >= 0 &&\n          indexClosingBracket > centerStartIndex\n        ) {\n          centerLength = indexClosingBracket - centerStartIndex - 1;\n\n          // strip out the brackets...is this better than string.replace?\n          lyricText =\n            lyricText.substring(0, centerStartIndex) +\n            lyricText.substring(centerStartIndex + 1, indexClosingBracket) +\n            lyricText.substring(indexClosingBracket + 1, lyricText.length);\n        } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n      }\n\n      var lyric = this.makeLyric(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notation,\n        notations,\n        sourceIndex\n      );\n\n      if (centerStartIndex) {\n        // update indices in case there had been any tags, etc.\n        let textIndex = 0,\n          centerEndIndex = -1;\n        for (let span of lyric.spans) {\n          if (\n            centerStartIndex >= span.sourceIndex &&\n            centerStartIndex < span.sourceIndex + span.text.length\n          ) {\n            centerStartIndex += textIndex - span.sourceIndex;\n            centerEndIndex = centerStartIndex + centerLength;\n          } else if (\n            centerEndIndex >= 0 &&\n            centerEndIndex >= span.sourceIndex &&\n            centerEndIndex < span.sourceIndex + span.text.length\n          ) {\n            centerEndIndex += textIndex - span.sourceIndex;\n            break;\n          }\n          textIndex += span.text.length;\n        }\n      }\n\n      // if we have manual lyric centering, then set it now\n      if (centerStartIndex >= 0) {\n        lyric.centerStartIndex = centerStartIndex;\n        lyric.centerLength = centerLength;\n      }\n\n      lyric.lyricIndex = lyrics.push(lyric) - 1;\n      sourceIndex += lyricText.length + 1;\n    }\n    notation.lyrics = lyrics;\n    return lyrics;\n  }\n\n  static makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    var elides = false;\n    var forceConnector = false;\n    if (text.length > 1) {\n      if (text[text.length - 1] === \"-\") {\n        forceConnector = true;\n        if (lyricType === LyricType.EndingSyllable)\n          lyricType = LyricType.MiddleSyllable;\n        else if (lyricType === LyricType.SingleSyllable)\n          lyricType = LyricType.BeginningSyllable;\n\n        text = text.slice(0, -1);\n      } else if (text[text.length - 1] === \" \") {\n        if (lyricType === LyricType.MiddleSyllable)\n          lyricType = LyricType.EndingSyllable;\n        else if (lyricType === LyricType.BeginningSyllable)\n          lyricType = LyricType.SingleSyllable;\n\n        text = text.slice(0, -1);\n      } else if (/<\\/i>$/.test(text)) {\n        // must be an elision\n        elides = true;\n      }\n    }\n\n    if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = LyricType.Directive;\n\n    var lyric = new Lyric(\n      ctxt,\n      text,\n      lyricType,\n      notation,\n      notations,\n      sourceIndex\n    );\n    lyric.elidesToNext = elides;\n    if (forceConnector) lyric.setForceConnector(true);\n\n    return lyric;\n  }\n\n  // takes a string of gabc notations and creates exsurge objects out of them.\n  // returns an array of notations.\n  static parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n    // if there is no data, then this must be a text only object\n    if (!data) return [new TextOnly(sourceIndex, 0)];\n\n    var baseSourceIndex = sourceIndex;\n    var sourceLength = 0;\n    var notations = [];\n    var notes = [];\n    var trailingSpace = DefaultTrailingSpace;\n\n    var addToLastSourceGabc = gabc => {\n      if (notes.length > 0) {\n        notes[notes.length - 1].sourceGabc += gabc;\n      }\n    };\n    var addNotation = notation => {\n      // first, if we have any notes left over, we create a neume out of them\n      if (notes.length > 0) {\n        // create neume(s)\n        var neumes = this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n        for (var i = 0; i < neumes.length; i++) notations.push(neumes[i]);\n\n        notes = [];\n      }\n\n      // reset the trailing space\n      trailingSpace = DefaultTrailingSpace;\n\n      // then, if we're passed a notation, let's add it\n      // also, perform chant logic here\n      if (notation !== null) {\n        let prevNotation = notations[notations.length - 1];\n        notation.sourceIndex = sourceIndex;\n        notation.sourceGabc = match[0];\n        if (notation.isClef) {\n          ctxt.activeClef = notation;\n          if (\n            prevNotation &&\n            prevNotation.trailingSpace.isDefault &&\n            prevNotation.isDivider\n          ) {\n            prevNotation.trailingSpace = TrailingSpaceForAccidental;\n          }\n        } else if (notation.isAccidental) {\n          ctxt.activeClef.activeAccidental = notation;\n        } else if (\n          notation.trailingSpace.isDefault &&\n          notation instanceof Signs.Custos\n        ) {\n          notation.trailingSpace = TrailingSpaceForAccidental;\n        } else if (notation.resetsAccidentals)\n          ctxt.activeClef.resetAccidentals();\n\n        notations.push(notation);\n      }\n    };\n\n    var regex = new RegExp(__notationsRegex.source, \"g\");\n    var match;\n\n    while ((match = regex.exec(data))) {\n      sourceIndex = baseSourceIndex + match.index;\n      sourceLength = match[0].length;\n      var atom = match[0];\n\n      // handle the clefs and dividers here\n      switch (atom) {\n        case \",\":\n          addNotation(new Signs.QuarterBar());\n          break;\n        case \"`\":\n          addNotation(new Signs.Virgula());\n          break;\n        case \";\":\n          addNotation(new Signs.HalfBar());\n          break;\n        case \";1\":\n        case \";2\":\n        case \";3\":\n        case \";4\":\n        case \";5\":\n        case \";6\":\n        case \",1\":\n        case \",2\":\n        case \",3\":\n        case \",4\":\n        case \",5\":\n        case \",6\":\n          addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n          break;\n        case \":\":\n          addNotation(new Signs.FullBar());\n          break;\n        case \"::\":\n          addNotation(new Signs.DoubleBar());\n          break;\n        // other gregorio dividers are not supported yet\n\n        case \"c1\":\n          addNotation((ctxt.activeClef = new DoClef(-3, 2)));\n          break;\n\n        case \"c2\":\n          addNotation((ctxt.activeClef = new DoClef(-1, 2)));\n          break;\n\n        case \"c3\":\n          addNotation((ctxt.activeClef = new DoClef(1, 2)));\n          break;\n\n        case \"c4\":\n          addNotation((ctxt.activeClef = new DoClef(3, 2)));\n          break;\n\n        case \"f1\":\n          addNotation((ctxt.activeClef = new FaClef(-3, 2)));\n          break;\n\n        case \"f2\":\n          addNotation((ctxt.activeClef = new FaClef(-1, 2)));\n          break;\n\n        case \"f3\":\n          addNotation((ctxt.activeClef = new FaClef(1, 2)));\n          break;\n\n        case \"f4\":\n          addNotation((ctxt.activeClef = new FaClef(3, 2)));\n          break;\n\n        case \"cb1\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -3,\n              2,\n              new Signs.Accidental(-4, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb2\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -1,\n              2,\n              new Signs.Accidental(-2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb3\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              1,\n              2,\n              new Signs.Accidental(0, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb4\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              3,\n              2,\n              new Signs.Accidental(2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"z\":\n          addNotation(new ChantLineBreak(true));\n          break;\n        case \"Z\":\n          addNotation(new ChantLineBreak(false));\n          break;\n        case \"z0\":\n          addNotation(new Signs.Custos(true));\n          break;\n\n        // spacing indicators\n        case \"!\":\n          trailingSpace = 0;\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n        case \" \":\n          // fixme: is this correct? logically what is the difference in gabc\n          // between putting a space between notes vs putting '//' between notes?\n          trailingSpace = TrailingSpaceMultiple(2);\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n\n        default:\n          // might be a number of slashes, a custos, might be an accidental, or might be a note\n          if (atom[0] === \"/\") {\n            trailingSpace = TrailingSpaceMultiple(atom.length);\n            addToLastSourceGabc(atom);\n            addNotation(null);\n          } else if (atom.length > 1 && atom[1] === \"+\") {\n            // custos\n            var custos = new Signs.Custos();\n\n            custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\n            addNotation(custos);\n          } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n            var accidentalType;\n\n            switch (atom[1]) {\n              case \"y\":\n                accidentalType = Signs.AccidentalType.Natural;\n                break;\n              case \"#\":\n                accidentalType = Signs.AccidentalType.Sharp;\n                break;\n              default:\n                accidentalType = Signs.AccidentalType.Flat;\n                break;\n            }\n\n            var noteArray = [];\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              noteArray,\n              sourceIndex\n            );\n            var accidental = new Signs.Accidental(\n              noteArray[0].staffPosition,\n              accidentalType\n            );\n            accidental.pitch = this.gabcHeightToExsurgePitch(\n              ctxt.activeClef,\n              atom[0]\n            );\n            accidental.sourceIndex = sourceIndex;\n            accidental.sourceLength = sourceLength;\n            accidental.trailingSpace = TrailingSpaceForAccidental;\n\n            ctxt.activeClef.activeAccidental = accidental;\n\n            addNotation(accidental);\n          } else if (atom.length > 1 && atom[0] === \"{\") {\n            trailingSpace = 0;\n            addNotation(null);\n            let bracketedNotations = this.parseNotations(\n              ctxt,\n              match[__notationsRegex_group_insideBraces],\n              sourceIndex + 1\n            );\n            // Set the width of these notations to 0\n            bracketedNotations.forEach(neume => {\n              neume.hasNoWidth = true;\n              neume.firstWithNoWidth = bracketedNotations[0];\n            });\n            notations.push(...bracketedNotations);\n          } else {\n            // looks like it's a note\n            if (insertionIndex === -1) {\n              trailingSpace = TrailingSpaceMultiple(1);\n              addNotation(null);\n            }\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              notes,\n              sourceIndex\n            );\n            --insertionIndex;\n          }\n          break;\n      }\n    }\n\n    // finish up any remaining notes we have left\n    addNotation(null);\n\n    return notations;\n  }\n\n  static createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n    var neumes = [];\n    var firstNoteIndex = 0;\n    var currNoteIndex = 0;\n\n    // here we use a simple finite state machine to create the neumes from the notes\n    // createNeume is helper function which returns the next state after a neume is created\n    // (unknownState). Each state object has a neume() function and a handle() function.\n    // neume() allows us to create the neume of the state in the event that we run out\n    // of notes. handle() gives the state an opportunity to examine the currNote and\n    // determine what to do...either transition to a different neume/state, or\n    // continue building the neume of that state. handle() returns the next state\n\n    var createNeume = function(neume, includeCurrNote, includePrevNote = true) {\n      // add the notes to the neume\n      var lastNoteIndex;\n      if (includeCurrNote) lastNoteIndex = currNoteIndex;\n      else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;\n      else lastNoteIndex = currNoteIndex - 2;\n\n      if (lastNoteIndex < 0) return;\n\n      while (firstNoteIndex <= lastNoteIndex) {\n        let note = notes[firstNoteIndex++];\n        neume.addNote(note);\n        if (note.alText) {\n          if (!neume.alText) neume.alText = [];\n          neume.alText.push(note.alText);\n          note.alText.noteIndex = firstNoteIndex - 1;\n        }\n      }\n\n      neumes.push(neume);\n\n      if (includeCurrNote === false) {\n        currNoteIndex--;\n\n        if (includePrevNote === false) currNoteIndex--;\n\n        neume.keepWithNext = true;\n        if (notes[currNoteIndex + 1].shape === NoteShape.Quilisma)\n          neume.trailingSpace = 0;\n        else {\n          neume.trailingSpace = TrailingSpaceMultiple(1);\n          neume.allowLineBreakBeforeNext = true;\n        }\n      }\n\n      return unknownState;\n    };\n\n    var unknownState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Virga) return virgaState;\n        else if (currNote.shape === NoteShape.Stropha) return apostrophaState;\n        else if (currNote.shape === NoteShape.Oriscus) return oriscusState;\n        else if (currNote.shape === NoteShape.Inclinatum)\n          return punctaInclinataState;\n        else if (currNote.shapeModifiers & NoteShapeModifiers.Cavum)\n          return createNeume(new Neumes.Punctum(), true);\n        else return punctumState;\n      }\n    };\n\n    var punctumState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote, notesRemaining) {\n        if (currNote.shape || prevNote.liquescent === LiquescentType.Small) {\n          var neume = new Neumes.Punctum();\n          var state = createNeume(neume, false);\n          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n          // Otherwise, we want no trailing space.\n          if (\n            currNote.staffPosition > prevNote.staffPosition &&\n            (currNote.staffPosition % 2 === 1 ||\n              prevNote.staffPosition !== currNote.staffPosition - 1 ||\n              !prevNote.morae ||\n              prevNote.morae.length === 0)\n          )\n            neume.trailingSpace = 0;\n          return state;\n        }\n\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return podatusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (currNote.shape === NoteShape.Inclinatum) return climacusState;\n          else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n            return clivisState;\n          }\n        } else if (!prevNote.morae || !prevNote.morae.length) {\n          return distrophaState;\n        }\n        return createNeume(new Neumes.Punctum(), false);\n      }\n    };\n\n    var punctaInclinataState = {\n      neume: function() {\n        return new Neumes.PunctaInclinata();\n      },\n      handle: function() {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PunctaInclinata(), false);\n        else return punctaInclinataState;\n      }\n    };\n\n    var oriscusState = {\n      neume: function() {\n        return new Neumes.Oriscus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Default) {\n          if (currNote.staffPosition > prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Ascending;\n            return createNeume(new Neumes.PesQuassus(), true);\n          } else if (currNote.staffPosition < prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Descending;\n            return createNeume(new Neumes.Clivis(), true);\n          }\n        }\n        // stand alone oriscus\n        var neume = new Neumes.Oriscus(),\n          state = createNeume(neume, false);\n        // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n        // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n        // Otherwise, we want no trailing space.\n        if (\n          currNote.staffPosition > prevNote.staffPosition &&\n          (currNote.staffPosition % 2 === 1 ||\n            prevNote.staffPosition !== currNote.staffPosition - 1 ||\n            !prevNote.morae ||\n            prevNote.morae.length === 0)\n        )\n          neume.trailingSpace = 0;\n        return state;\n      }\n    };\n\n    var podatusState = {\n      neume: function() {\n        return new Neumes.Podatus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Below;\n\n          if (prevNote.shape === NoteShape.Oriscus) return salicusState;\n          else return scandicusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (currNote.shape === NoteShape.Inclinatum)\n            return pesSubpunctisState;\n          else return torculusState;\n        } else return createNeume(new Neumes.Podatus(), false);\n      }\n    };\n\n    var clivisState = {\n      neume: function() {\n        return new Neumes.Clivis();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return porrectusState;\n        } else return createNeume(new Neumes.Clivis(), false);\n      }\n    };\n\n    var climacusState = {\n      neume: function() {\n        return new Neumes.Climacus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.Climacus(), false);\n        else return state;\n      }\n    };\n\n    var porrectusState = {\n      neume: function() {\n        return new Neumes.Porrectus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.PorrectusFlexus(), true);\n        else return createNeume(new Neumes.Porrectus(), false);\n      }\n    };\n\n    var pesSubpunctisState = {\n      neume: function() {\n        return new Neumes.PesSubpunctis();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PesSubpunctis(), false);\n        else return state;\n      }\n    };\n\n    var salicusState = {\n      neume: function() {\n        return new Neumes.Salicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition < prevNote.staffPosition)\n          return salicusFlexusState;\n        else return createNeume(new Neumes.Salicus(), false);\n      }\n    };\n\n    var salicusFlexusState = {\n      neume: function() {\n        return new Neumes.SalicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.SalicusFlexus(), false);\n      }\n    };\n\n    var scandicusState = {\n      neume: function() {\n        return new Neumes.Scandicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          prevNote.shape === NoteShape.Virga &&\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        ) {\n          // if we get here, then it seems we have a podatus, now being followed by a climacus\n          // rather than a scandicus. react accordingly\n          return createNeume(new Neumes.Podatus(), false, false);\n        } else if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return scandicusFlexusState;\n        else return createNeume(new Neumes.Scandicus(), false);\n      }\n    };\n\n    var scandicusFlexusState = {\n      neume: function() {\n        return new Neumes.ScandicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.ScandicusFlexus(), false);\n      }\n    };\n\n    var virgaState = {\n      neume: function() {\n        return new Neumes.Virga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return climacusState;\n        else if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return bivirgaState;\n        else return createNeume(new Neumes.Virga(), false);\n      }\n    };\n\n    var bivirgaState = {\n      neume: function() {\n        return new Neumes.Bivirga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return createNeume(new Neumes.Trivirga(), true);\n        else return createNeume(new Neumes.Bivirga(), false);\n      }\n    };\n\n    var apostrophaState = {\n      neume: function() {\n        return new Neumes.Apostropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition)\n          return distrophaState;\n        else return createNeume(new Neumes.Apostropha(), false);\n      }\n    };\n\n    var distrophaState = {\n      neume: function() {\n        return new Neumes.Distropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition) {\n          if (prevNote.morae && prevNote.morae.length) {\n            return createNeume(new Neumes.Distropha(), false);\n          } else {\n            return tristrophaState;\n          }\n        } else return createNeume(new Neumes.Apostropha(), false, false);\n      }\n    };\n\n    var tristrophaState = {\n      neume: function() {\n        return new Neumes.Tristropha();\n      },\n      handle: function(currNote, prevNote) {\n        // we only create a tristropha when the note run ends after three\n        // and the neume() function of this state is called. Otherwise\n        // we always interpret the third note to belong to the next sequence\n        // of notes.\n        //\n        // fixme: gabc allows any number of punctum/stropha in succession...\n        // is this a valid neume type? Or is it just multiple *stropha neumes\n        // in succession? Should we simplify the apostropha/distropha/\n        // tristropha classes to a generic stropha neume that can have 1 or\n        // more successive notes?\n        return createNeume(new Neumes.Distropha(), false, false);\n      }\n    };\n\n    var torculusState = {\n      neume: function() {\n        return new Neumes.Torculus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          let prevNoteButOne = notes[currNoteIndex - 2];\n          if (\n            prevNoteButOne &&\n            prevNoteButOne.staffPosition - prevNote.staffPosition <= 4\n          ) {\n            if (currNote.ictus)\n              currNote.ictus.positionHint = MarkingPositionHint.Above;\n            return torculusResupinusState;\n          }\n        }\n        return createNeume(new Neumes.Torculus(), false);\n      }\n    };\n\n    var torculusResupinusState = {\n      neume: function() {\n        return new Neumes.TorculusResupinus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.TorculusResupinusFlexus(), true);\n        else return createNeume(new Neumes.TorculusResupinus(), false);\n      }\n    };\n\n    var state = unknownState;\n\n    while (currNoteIndex < notes.length) {\n      var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n      var currNote = notes[currNoteIndex];\n\n      state = state.handle(\n        currNote,\n        prevNote,\n        notes.length - 1 - currNoteIndex\n      );\n\n      // if we are on the last note, then try to create a neume if we need to.\n      if (currNoteIndex === notes.length - 1 && state !== unknownState)\n        createNeume(state.neume(), true);\n\n      currNoteIndex++;\n    }\n\n    if (neumes.length > 0) {\n      if (!finalTrailingSpace.isDefault) {\n        neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n        neumes[neumes.length - 1].keepWithNext = true;\n\n        if (finalTrailingSpace > 0)\n          neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[\n            neumes.length - 1\n          ].keepWithNext = true;\n      }\n    }\n\n    return neumes;\n  }\n\n  // appends any notes created to the notes array argument\n  static createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n    var note = new Note();\n    note.sourceIndex = sourceIndex;\n    note.sourceGabc = data;\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    if (data[0] === \"-\") {\n      // liquescent initio debilis\n      note.liquescent = LiquescentType.InitioDebilis;\n      data = data.substring(1);\n    }\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    // the next char is always the pitch\n    var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\n    if (data[0] === data[0].toUpperCase()) note.shape = NoteShape.Inclinatum;\n\n    note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n    note.pitch = pitch;\n\n    var mark;\n\n    var episemaNoteIndex = notes.length;\n    var episemaNote = note;\n\n    // process the modifiers\n    for (var i = 1; i < data.length; i++) {\n      var c = data[i];\n      var lookahead = \"\\0\";\n\n      var haveLookahead = i + 1 < data.length;\n      if (haveLookahead) lookahead = data[i + 1];\n\n      switch (c) {\n        // rhythmic markings\n        case \".\":\n          mark = null;\n\n          // gabc supports putting up to two morae on each note, by repeating the\n          // period. here, we check to see if we've already created a mora for the\n          // note, and if so, we simply force the second one to have an Above\n          // position hint. if a user decides to try to put position indicators\n          // on the double morae (such as 1 or 2), then really the behavior is\n          // not defined by gabc, so it's on the user to figure it out.\n          if (note.morae.length > 0 && notes.length) {\n            var previousNote = notes.slice(-1)[0];\n            var previousMora = note.morae.slice(-1)[0];\n            previousMora.note = previousNote;\n          }\n\n          mark = new Markings.Mora(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n\n          note.morae.push(mark);\n          break;\n\n        case \"_\":\n          var episemaHadModifier = false;\n\n          mark = new Markings.HorizontalEpisema(episemaNote);\n          while (haveLookahead) {\n            if (lookahead === \"0\")\n              mark.positionHint = MarkingPositionHint.Below;\n            else if (lookahead === \"1\")\n              mark.positionHint = MarkingPositionHint.Above;\n            else if (lookahead === \"2\") mark.terminating = true;\n            // episema terminates\n            else if (lookahead === \"3\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Left;\n            else if (lookahead === \"4\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Center;\n            else if (lookahead === \"5\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Right;\n            else break;\n\n            // the gabc definition for episemata is so convoluted...\n            // - double underscores create episemata over multiple notes.\n            // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n            //   another underscore puts a second episema on the same note\n            // - (when there's a 2 lookahead, then this is treated as an\n            //   unmodified underscore, so another underscore would be\n            //   added to previous notes\n            if (\n              mark.alignment !== Markings.HorizontalEpisemaAlignment.Default &&\n              mark.positionHint !== MarkingPositionHint.Below\n            )\n              episemaHadModifier = true;\n\n            i++;\n            haveLookahead = i + 1 < data.length;\n\n            if (haveLookahead) lookahead = data[i + 1];\n          }\n\n          // since gabc allows consecutive underscores which is a shortcut to\n          // apply the episemata to previous notes, we keep track of that here\n          // in order to add the new episema to the correct note.\n\n          if (episemaNote) episemaNote.episemata.push(mark);\n\n          if (episemaNote === note && episemaHadModifier) episemaNote = note;\n          else if (episemaNoteIndex >= 0 && notes.length > 0)\n            episemaNote = notes[--episemaNoteIndex];\n\n          break;\n\n        case \"'\":\n          mark = new Markings.Ictus(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n          else if (note.shape === NoteShape.Virga)\n            // ictus on a virga goes above by default:\n            mark.positionHint = MarkingPositionHint.Above;\n\n          note.ictus = mark;\n          break;\n\n        //note shapes\n        case \"r\":\n          if (haveLookahead && /^[1-5]$/.test(lookahead)) {\n            switch (lookahead) {\n              case \"1\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.AcuteAccent\n                );\n                break;\n              case \"2\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.GraveAccent\n                );\n                break;\n              case \"3\":\n                note.accent = new Markings.Accent(ctxt, note, GlyphCode.Circle);\n                break;\n              case \"4\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.Semicircle\n                );\n                break;\n              case \"5\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.ReversedSemicircle\n                );\n                break;\n              default:\n            }\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Cavum;\n          break;\n\n        case \"s\":\n          if (note.shape === NoteShape.Stropha) {\n            // if we're already a stropha, that means this is gabc's\n            // quick stropha feature (e.g., gsss). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"s\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Stropha;\n          break;\n\n        case \"v\":\n          if (note.shape === NoteShape.Virga) {\n            // if we're already a stropha, that means this is gabc's\n            // quick virga feature (e.g., gvvv). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"v\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Virga;\n          break;\n\n        case \"w\":\n          note.shape = NoteShape.Quilisma;\n          break;\n\n        case \"o\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |= NoteShapeModifiers.Ascending;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |= NoteShapeModifiers.Descending;\n            i++;\n          }\n          break;\n\n        case \"O\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Ascending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Descending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Stemmed;\n          break;\n\n        // liquescents\n        case \"~\":\n          if (note.shape === NoteShape.Inclinatum)\n            note.liquescent |= LiquescentType.Small;\n          else if (note.shape === NoteShape.Oriscus)\n            note.liquescent |= LiquescentType.Large;\n          else note.liquescent |= LiquescentType.Small;\n          break;\n        case \"<\":\n          note.liquescent |= LiquescentType.Ascending;\n          break;\n        case \">\":\n          note.liquescent |= LiquescentType.Descending;\n          break;\n\n        // accidentals\n        case \"x\":\n          if (note.pitch.step === Step.Mi) note.pitch.step = Step.Me;\n          else if (note.pitch.step === Step.Ti) note.pitch.step = Step.Te;\n          break;\n        case \"y\":\n          if (note.pitch.step === Step.Te) note.pitch.step = Step.Ti;\n          else if (note.pitch.step === Step.Me) note.pitch.step = Step.Mi;\n          else if (note.pitch.step === Step.Du) note.pitch.step = Step.Do;\n          else if (note.pitch.step === Step.Fu) note.pitch.step = Step.Fa;\n          break;\n        case \"#\":\n          if (note.pitch.step === Step.Do) note.pitch.step = Step.Du;\n          else if (note.pitch.step === Step.Fa) note.pitch.step = Step.Fu;\n          break;\n\n        // gabc special item groups\n        case \"[\":\n          // read in the whole group and parse it\n          var startIndex = ++i;\n          while (i < data.length && data[i] !== \"]\") i++;\n\n          this.processInstructionForNote(\n            ctxt,\n            note,\n            data.substring(startIndex, i),\n            startIndex\n          );\n          break;\n      }\n    }\n\n    if (\n      this.needToEndBrace &&\n      !note.braceStart &&\n      !note.braceEnd &&\n      !/[xy#]/.test(c)\n    ) {\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        this.needToEndBrace.isAbove,\n        this.needToEndBrace.shape,\n        this.needToEndBrace.attachment === Markings.BraceAttachment.Left\n          ? Markings.BraceAttachment.Right\n          : Markings.BraceAttachment.Left\n      );\n      note.braceEnd.automatic = true;\n      delete this.needToEndBrace;\n    }\n\n    notes.push(note);\n  }\n\n  // an instruction in this context is referring to a special gabc coding found after\n  // notes between ['s and ]'s. choral signs and braces fall into this\n  // category.\n  //\n  // currently only brace instructions are supported here!\n  static processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n    var results = instruction.match(__bracketedCommandRegex);\n    if (results === null) return;\n    var cmd = results[1];\n    var data = results[2];\n    switch (cmd) {\n      case \"cs\":\n        note.choralSign = new ChoralSign(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n      case \"alt\":\n        note.alText = new AboveLinesText(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n    }\n\n    results = instruction.match(__braceSpecRegex);\n\n    if (results === null) return;\n\n    // see the comments at the definition of __braceSpecRegex for the\n    // capturing groups\n    var above = results[1] === \"o\";\n    var shape = Markings.BraceShape.CurlyBrace; // default\n\n    switch (results[2]) {\n      case \"b\":\n        shape = Markings.BraceShape.RoundBrace;\n        break;\n      case \"cb\":\n        shape = Markings.BraceShape.CurlyBrace;\n        break;\n      case \"cba\":\n        shape = Markings.BraceShape.AccentedCurlyBrace;\n        break;\n    }\n\n    var attachmentPoint =\n      results[3] === \"1\"\n        ? Markings.BraceAttachment.Left\n        : Markings.BraceAttachment.Right;\n\n    if (results[4] === \"{\" || results[5])\n      note.braceStart = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n    else\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n\n    // just have the next note end a brace that uses length;\n    if (results[5]) {\n      note.braceStart.automatic = true;\n      this.needToEndBrace = note.braceStart;\n    }\n  }\n\n  // takes raw gabc text source and parses it into words. For example, passing\n  // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n  // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n  static splitWords(gabcNotations) {\n    // split the notations on whitespace boundaries, as long as the space\n    // immediately follows a set of parentheses. Prior to doing that, we replace\n    // all whitespace with spaces, which prevents tabs and newlines from ending\n    // up in the notation data.\n    gabcNotations = gabcNotations\n      // .trim()\n      // .replace(/\\s/g, \" \")\n      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n    return gabcNotations.split(/\\n/g);\n  }\n\n  static parseSource(gabcSource) {\n    return this.parseWords(this.splitWords(gabcSource));\n  }\n\n  // gabcWords is an array of strings, e.g., the result of splitWords above\n  static parseWords(gabcWords) {\n    var words = [];\n\n    for (var i = 0; i < gabcWords.length; i++)\n      words.push(this.parseWord(gabcWords[i]));\n\n    return words;\n  }\n\n  // returns an array of objects, each of which has the following properties\n  //  - notations (string)\n  //  - lyrics (array of strings)\n  static parseWord(gabcWord) {\n    var syllables = [];\n    var matches = [];\n\n    syllables.wordLength = gabcWord.length;\n\n    while ((match = __syllablesRegex.exec(gabcWord))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyrics = match[1].trim().split(\"|\");\n      var notations = match[2];\n\n      syllables.push({\n        notations: notations,\n        lyrics: lyrics\n      });\n    }\n\n    return syllables;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgeHeight(gabcHeight) {\n    return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgePitch(clef, gabcHeight) {\n    var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\n    var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\n    return pitch;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Gabc.js","//\n// Author(s):\n// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n//\n// Copyright (c) 2019\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport * as Exsurge from \"./Exsurge.Core.js\";\nimport { Step, Pitch, Rect, Point, Margins } from \"./Exsurge.Core.js\";\nimport {\n  QuickSvg,\n  ChantLayoutElement,\n  Supertitle,\n  Title,\n  Subtitle,\n  TextLeftRight\n} from \"./Exsurge.Drawing.js\";\n\nexport class Titles extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    score,\n    { supertitle, title, subtitle, textLeft, textRight } = {}\n  ) {\n    super();\n    this.score = score;\n    this.setSupertitle(ctxt, supertitle);\n    this.setTitle(ctxt, title);\n    this.setSubtitle(ctxt, subtitle);\n    this.setTextLeft(ctxt, textLeft);\n    this.setTextRight(ctxt, textRight);\n  }\n\n  setBoundsX(ctxt, elementName, width) {\n    let element = this[elementName];\n    switch (ctxt.textStyles[elementName].alignment) {\n      case \"left\":\n        element.textAnchor = \"start\";\n        element.bounds.x = 0;\n        break;\n      case \"right\":\n        element.textAnchor = \"end\";\n        element.bounds.x = width;\n        break;\n      case \"center\":\n      default:\n        element.textAnchor = \"middle\";\n        element.bounds.x = width / 2;\n    }\n  }\n\n  /**\n   * Lays out the titles, and returns their total height\n   * @param  {ChantContext} ctxt\n   * @return {number}      the tottal height of titles laid out\n   */\n  layoutTitles(ctxt, width) {\n    this.bounds = new Rect(0, 0, 0, 0);\n    let y = 0;\n    if (this.supertitle) {\n      this.supertitle.recalculateMetrics(ctxt);\n      this.supertitle.setMaxWidth(ctxt, width);\n\n      this.setBoundsX(ctxt, \"supertitle\", width);\n      this.supertitle.bounds.y = y;\n      this.bounds.union(this.supertitle.bounds);\n      this.supertitle.bounds.y += this.supertitle.origin.y;\n      y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n    }\n    if (this.title) {\n      if (y) y += this.title.padding(ctxt);\n      this.title.recalculateMetrics(ctxt);\n      this.title.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"title\", width);\n      this.title.bounds.y = y;\n      this.bounds.union(this.title.bounds);\n      this.title.bounds.y += this.title.origin.y;\n      y += this.title.bounds.height + this.title.padding(ctxt);\n    }\n    if (this.subtitle) {\n      if (y) y += this.subtitle.padding(ctxt);\n      this.subtitle.recalculateMetrics(ctxt);\n      this.subtitle.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"subtitle\", width);\n      this.subtitle.bounds.y = y;\n      this.bounds.union(this.subtitle.bounds);\n      this.subtitle.bounds.y += this.subtitle.origin.y;\n      y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n    }\n    let finalY = y,\n      textLeft = this.score.overrideTextLeft || this.textLeft;\n    if (textLeft) {\n      textLeft.recalculateMetrics(ctxt);\n      textLeft.bounds.y = y;\n      this.bounds.union(textLeft.bounds);\n      textLeft.bounds.y += textLeft.origin.y;\n      finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n    }\n    if (this.textRight) {\n      this.textRight.recalculateMetrics(ctxt);\n      this.textRight.bounds.x = width;\n      this.textRight.bounds.y = y;\n      this.bounds.union(this.textRight.bounds);\n      this.textRight.bounds.y += this.textRight.origin.y;\n      finalY = Math.max(\n        finalY,\n        y + this.textRight.bounds.height + this.textRight.padding(ctxt)\n      );\n    }\n    return finalY;\n  }\n\n  setSupertitle(ctxt, supertitle) {\n    this.supertitle = supertitle ? new Supertitle(ctxt, supertitle) : null;\n  }\n  setTitle(ctxt, title) {\n    this.title = title ? new Title(ctxt, title) : null;\n  }\n  setSubtitle(ctxt, subtitle) {\n    this.subtitle = subtitle ? new Subtitle(ctxt, subtitle) : null;\n  }\n  setTextLeft(ctxt, textLeft) {\n    this.textLeft = textLeft\n      ? new TextLeftRight(ctxt, textLeft, \"textLeft\")\n      : null;\n  }\n  setTextRight(ctxt, textRight) {\n    this.textRight = textRight\n      ? new TextLeftRight(ctxt, textRight, \"textRight\")\n      : null;\n  }\n\n  hasSupertitle(ctxt, supertitle) {\n    return !!this.supertitle;\n  }\n  hasTitle(ctxt, title) {\n    return !!this.title;\n  }\n  hasSubtitle(ctxt, subtitle) {\n    return !!this.subtitle;\n  }\n  hasTextLeft(ctxt, textLeft) {\n    return !!this.textLeft;\n  }\n  hasTextRight(ctxt, textRight) {\n    return !!this.textRight;\n  }\n\n  draw(ctxt, scale = 1) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) el.draw(ctxt, scale);\n    }\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(ctxt, functionName = \"createSvgNode\") {\n    var nodes = [];\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) nodes.push(el[functionName](ctxt));\n    }\n    return nodes;\n  }\n\n  createSvgNode(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\n    var node = QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      { class: \"Titles\", source: this },\n      ...nodes\n    );\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = \"\";\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) fragment += el.createSvgFragment(ctxt);\n    }\n\n    fragment = QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n    return fragment;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Titles.js"],"sourceRoot":""}